============================================================================
               Jack32.dll version 0.20 コマンド説明ファイル
                                                              木村 利靖
                                                       Toshinobu Kimura
============================================================================

0.  はじめに
1.  コマンドラインの形式
2.  命令の詳細
3.  オプションの詳細
4.  自己復元形式

----------------------------------------------------------------------------

0.  はじめに
============

  JACK32.DLL では次の操作が可能です。

  (1) ファイルを規定のサイズで切り裂いて複数の分割ファイルを作成する
  (2) 切り裂いたファイルを復元する（切り裂いた順番をユーザに意識させ
      ることなく復元可能）
  (3) 切り裂いたファイルから復元ファイルの情報を取得する( API による操作 )
  (4) 自己復元形式で切り裂く


1.  コマンドラインの形式
========================

    int WINAPI Jack( const HWND hWnd, LPCSTR pszCmdLine,
                     LPSTR pszOutput, const DWORD dwSize );

    での pszCmdLine で指定するコマンドラインの形式は次の通りです。

        -<command> [-<option>...] <file_name> <directory_name>\

    <command>（命令）、<option>は大文字／小文字の区別をしません。
    <command>、<file_name>、<directory_name> は省略できません。
    また、<command>、<option>、<file_name>、<directory_name> の順序は変更でき
    ません。

    <directory_name> には、既存のディレクトリ名のみが指定できます。

    <directory_name> の末尾には '\' があってもなくてもかまいません。
    末尾が '\' でなければ内部で補います。

    <file_name>、<directory_name> にロングファイル名を指定する場合は、ファイル
    名全体を "（ダブルクォテーション）で括ってください。<directory_name>の末尾
    に '\' を付加して指定する場合は、これも含めて '"' で括る必要があります。


2.  命令の詳細
==============

     -c, -C  切り裂きファイルを復元します
    -------------------------------------

        <file_name> には切り裂きファイルのフルパス名を指定します。
        "Jack1.jak", "Jack2.jak", "Jack3.jak" という切り裂きファイルから復元す
        る場合、このパラメータには 3つのファイルのうちどれかひとつだけを指定し
        ます。
        指定された切り裂きファイルを収容するディレクトリ内に、復元に必要なすべ
        ての切り裂きファイルが存在しない場合には、ダイアログを表示して、残りの
        ファイルが存在するディレクトリをユーザに指定させます。
        例えば切り裂きファイルが FD内に収容されている場合にはここで FDを入れ
        替えることができます。

        <directory_name> には復元先のディレクトリを指定します。

        ※内部で JackCombine() API を呼び出しています。

        例）-c "c:\ripper files\jack2.jak" "c:\combine folder"


     -r, -R  ファイルを切り裂きます
    -------------------------------

        <file_name> には切り裂くファイルのフルパス名を指定します。

        <directory_name> には切り裂き先のディレクトリを指定します。
        切り裂き先が FDの場合には、随時 FDの入れ替えを要求します。
        FDがフォーマットされていない場合には、確認の上でフォーマットを行い、
        処理を続行します。

        コマンドラインで切り裂きサイズや切り裂き方式が指定されていない場合、
        JackConfigDialog() API で指定された値で動作します。

        切り裂き方式のデフォルトは「通常の形式」、切り裂きサイズのデフォルト
        は「1423」KB( 1.44MB )です。

        ※内部で JackRipper() API を呼び出しています。

        例）-r "c:\work folder\jack.hlp" "c:\ripper files\"
                ※ JackConfigDialog() API での指定により切り裂きます

            -r -m0 "c:\work folder\jack.hlp" "c:\ripper files\"
                ※ 通常の形式で切り裂きます。切り裂きサイズは
                   JackConfigDialog() API での指定に従います

            -r -m1 -v:1423 "c:\work folder\jack.hlp" "c:\ripper files\"
                ※ 自己復元形式で、1.44MB サイズで切り裂きます


3.  オプションの詳細
====================

    -m, -M  切り裂き方式を指定します
    --------------------------------

        -m0 : 通常の形式で切り裂きます
        -m1 : 自己復元形式で切り裂きます

        -r 命令時にのみ有効です。

    -t:xxxx, -T:xxxx  切り裂き、復元時にダイアログに表示する文字列を指定します
    --------------------------------------------------------------------------

        切り裂き時のデフォルトの文字列は "ファイルを切裂き中..."、
        復元時のデフォルトの文字列は "ファイルを復元中..." です。

        文字列に空白を含む場合には -t:(-T:)を含めて " で括ってください。

        ex)
            -r "-t:jack32 処理中" "c:\work folder\jack.hlp" "c:\ripper files\"

    -v:xxxx, -V:xxxx  切り裂きサイズを指定します
    --------------------------------------------

        xxxx には 1KBを 1024バイトで換算した値を指定します。
        1.44MBで切り裂くには "1423"と、720KBで切り裂くには "713"と指定します。

        -r 命令時にのみ有効です。


4.自己復元形式
==============

    １番目の切り裂きファイルの先頭にスタブモジュールを結合して作成します。
    スタブモジュールは Win32アプリケーションで、Windowsの GUI環境で動作し
    ます。

    使用方法
    --------

      あらかじめ復元に必要なすべてのファイルをひとつのディレクトリ内に置き、
      あとは .exeを実行するだけです。
      同じディレクトリにファイルを復元します。

    注意点
    ------

    ・スタブモジュールのサイズは約 8KBあるため、切り裂くファイルのサイズ
      によっては「通常の形式」で切り裂くよりも分割ファイル数が増える場合が
      あります。
    ・Jack32.dllで復元するのと違い、復元に必要なすべてのファイルが同一の
      ディレクトリ内に存在しなければエラー終了します。
    ・.exeの実行後に復元先のディレクトリを指定できません。

============================================================================
