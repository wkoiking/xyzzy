=======================================================================
               UNLHA32.DLL Ver 2.67a  コマンド説明ファイル
=======================================================================

                                               Ｍｉｃｃｏ (Sep.12,2010)


はじめに

　UNLHA32.DLL のドキュメント構成は以下のようになっています。

    API.TXT      : 基幹を成す Unlha() 系及び OpenArchive() 系 API の説明
    NOTE2.TXT    : API.TXT の補足説明
    COMMAND.TXT  : Unlha() に渡すコマンド文字列についての説明
    NOTE.TXT     : COMMAND.TXT の補足説明
    WINMES.TXT   : SetOwnerWindow() 系 API の説明
    ENUMAPI.TXT  : SetEnumMembersProc() 系 API の説明
    STRTABLE.TXT : ストリングテーブルと言語設定用 API についての説明
    HEADER.TXT   : LZH 書庫ヘッダ仕様の説明
    INFCOM.TXT   : Win32SFXM で使用される $ ファイルコマンドの説明
    QandA.TXT    : 過去にあった主な質問集
    HISTORY.TXT  : 修正履歴

　このドキュメントでは，Unlha() 等に渡すコマンドスイッチの詳細と，書庫形式
及び圧縮形式，自己解凍書庫についての概要が説明されています。


--------------------------------------------------------------------------
%1  1. コマンドラインの様式
%2  2. 命令の一覧
%3  3. 命令の詳細
%4  4. スイッチオプションの一覧
%5  5. スイッチオプションの詳細
%6  6. 基準ディレクトリーについて
%7  7. レスポンスファイル
%8  8. ワイルドカードについて
%9  9. ファイル数等の制限
%a 10. 環境変数
%b 11. 作業ファイル名
%c 12. UNLHA32.DLL が扱える書庫ヘッダ形式
%d 13. UNLHA32.DLL が扱える圧縮形式
%e   A. lh6/lh7/lh2/lh3/lhx 形式について
%f   B. 圧縮アルゴリズムとスライド辞書サイズの関係についての考察
%g 14. 自己解凍書庫(SFX)
%h   A. SMALL 版 DosSFX
%i   B. LARGE 版 DosSFX
%j   C. Windows 版 WinSFX
%k   D. Windows 版 WinSFXM
%l   E. NT/Win 9x 版 WinSFX32
%m   F. NT/Win 9x 版 WinSFX32M
%n   G. 自己解凍書庫の種類と扱えるヘッダ等について
%o   H. SFX の機能一覧
--------------------------------------------------------------------------


%1 1.  コマンドラインの様式

　Unlha() に渡すコマンド文字列は， 基本的に LHA のコマンド体系に準拠してい
ます。 ただし，Ver 2.67 を範としているため， 一般に出回っている  Ver 2.13/
2.55b とは異なっている部分が存在します。また，ARJ 風のコマンドやスイッチが
追加されている関係上，これらのスイッチ等では  LHA とは指定方法 (仕様) が異
なっています。結果，Unlha() のコマンド体系は大変複雑で統一性がとれていない
ものとなってしまっています。通常は問題ないと思われますが，各スイッチを使用
して細かい指定を行う際には気をつけてください。

　コマンド書式は次のようなものとなります。

    [<command>] [[-<switch>[+|-|0|1|2]]...] <archive_file_name>[.LZH]
        [[<base_directory_name>\] [<path_name>|<wild_name>]...]]...

                command                 : 命令
                switch                  : スイッチ
                archive_file_name       : 書庫名
                base_directory_name     : 基準ディレクトリー
                path_name               : パス (ファイル) 名
                wild_name               : ワイルドカード

  　命令及びスイッチは大文字・小文字の区別を行いません。また，スイッチの位
  置についても問わない関係上，ARJ.EXE のように『ファイル毎にスイッチを指定
  する』ことはできません。ただし，コマンド解釈が単純に前のほうから行われる
  ため，スイッチの指定順序が動作に影響を与える場合があるので注意してくださ
  い。

  　各パラメータは ' ' (スペース等空白文字) で区切るようにしてください。

  　命令はコマンドラインの (スイッチ以外の) 最初のパラメータとしてください。
  命令を省略した場合は， (判別可能であれば) 'l' が指定されたものとみなしま
  す。反対に言えば，"a" などといった命令と混同されるような名前の書庫を拡張
  子を付加せずに指定した場合には，期待した解釈が行われないことになります。
  誤認識を避けるため，命令を省略しないのが普通です。

  　スイッチを表す文字としては '-' と '/' が使えます。ただし，スイッチ文字
  を混在する事はできません。 スイッチ文字として '-' を使用している場合は，
  '/' はディレクトリーの区切り文字として使えます。誤認識をさけるために，な
  るべく '-' を使用するようにしてください。

  　UNLHA32.DLL は，コマンドラインに現れるコマンドでもスイッチでもない最初
  のパラメータを LZH 書庫名とみなします。 他の拡張子が付加されていない場合
  に限り ".LZH" の拡張子を省略することができます。書庫の作成を伴う場合は，
  省略されていれば ".LZH" を補います。拡張子が付加されないようにしたい場合
  は次のように指定してください。

      例 :    a archive. *.*
           あえて拡張子なしの名前 (archive) で書庫を作成。

  　LHA と異なり， 想定された ".LZH"  以外の拡張子が付加されている場合でも
  UNLHA32.DLL は警告を表示しません。

  　展開基準ディレクトリーを指定する場合は，パス名は '\' 又は ':' で終わら
  なければいけません。 最後の '\' 等を省略するとファイル指定とみなされてし
  まうので注意してください。詳しくは後述の『基準ディレクトリーについて』の
  項を参照してください。

      例 :    e archive c: *.doc d:\tmp\ *.txt -f
           c ドライブのカレントディレクトリーに .DOC を，d:\tmp にテキスト
           ファイル (.TXT) を展開。

  　処理すべきファイルのリストを基準ディレクトリーに続けて指定することがで
  きます。基準ディレクトリーが省略された場合は，カレントディレクトリーかレ
  ジストリーで指定されたディレクトリーが基準ディレクトリーとして使用されま
  す。

  　リストにはワイルドカードを含めることができます。ワイルドカードは Win32
  の指定方法を参考に '*' のワイルドカードが '.' にもマッチするようになって
  います。従って，"*" の指定で『すべてのファイル』を意味することになります。
  UNLHA32.DLL の古い版とは仕様が異なっている点に注意してください。同様に，
  この仕様は LHA (Ver 2.13/2.55b/2.6x 等すべての版) とも  LHA32 とも異なる
  UNLHA32.DLL 独自のものである点に注意が必要です。

  　ワイルドカードとして使用可能なのは '*' (複数の文字にマッチ)，'?' (1 文
  字にマッチ) の 2 つのみです。

      例 : *                    すべてのファイルにマッチ
           *.ne.*               nifty.ne.jp.TXT 等 .ne  の拡張子を間に含む
                                ファイルにマッチ
           *.TXT                nifty.ne.jp.TXT 等最後に .TXT の拡張子を含
                                むファイルにマッチ
           *.*                  例外的にすべてのファイルにマッチ
           *.                   拡張子をもたないファイルにマッチ。Win32 で
                                はこの指定でもすべてのファイルがマッチする
                                のに対して，UNLHA32.DLL ではマッチしないの
                                で注意してください
           *.*.*                拡張子を２つ以上もつファイルがマッチ。上記
                                の "*." の処理の関係上こうなってしまいます
           *a*                  'a' の文字を含む名前のファイルがマッチ

  　リストが指定されなかった場合は，"*.*" が指定されたものとみなされます。
  ただし，'d' 命令等リストが必ず必要となるものについてはエラーとなります。

  　スペースを含む名前のファイルを扱いたい場合は '"'  で括るようにします。
  括られていない場合は別のパラメータと判断されます。 Ver 1.28.2.1 以降では
  括る位置に制限はありませんが，以前の版との互換性を考慮して，以下の例にお
  けるスイッチ指定のようにパラメータすべてを括るようにしたほうがいいでしょ
  う。

      例 : a archive c:\test.lzh *.doc "-wE:\work directory\"

  　'"' で括られた部分については，単にスペースをセパレータとして認識しない
  だけなので気を付けてください。一部の環境 (shell 等) のような『'"' で括ら
  れた部分については，スイッチ文字等を無視する』といった解釈は行われません。
  上記の例では， UNLHA32.DLL においては，最後のパラメータはあくまでも "-w"
  スイッチ指定として扱われます。 '-' で始まる名前を扱いたい場合には，"-gb"
  スイッチを使用して  "-gb-test.txt" のように指定してください。 また， Ver
  1.51 以降ではスイッチ指定文字の無効化を行う "--3" スイッチを使用すること
  も出来ます。

  　多くのリストが必要となり，コマンドラインで直接指定するのが難しい場合に
  は，レスポンスファイルを使用することができます。レスポンスファイルである
  ことを示すには，ファイル名の前に '@' を付ける必要があります。もし '@' で
  始まるファイル名を処理するなどの理由で変更したい場合は "--" スイッチを使
  います。

      例 :    e archive c:\tmp\ @response.lst
           展開するファイルのリストを response.lst で指定。

  　詳しくは後述のレスポンスファイルの項を参照してください。

(参考)
  　Unlha() については，LZH ファイルの指定にワイルドカードを使用する事がで
  きます。現バージョンでは，その他の API で LZH ファイルの指定にワイルドカー
  ドは使用できません。


%2 2.  命令の一覧

        a: 書庫にファイルを追加
        c: 書庫内のファイルに注釈を入れる
        d: 書庫からファイルを削除
        e: 書庫内のファイルを展開
        f: 書庫のファイルを更新
        j: 書庫に別の書庫を加える
        l: 書庫の内容の一覧出力
        m: 書庫にファイルを移動
        n: 書庫内のファイルの名前を変更
        p: テキストファイルをバッファへ出力
        s: 既存書庫を変換して自己解凍書庫を作成
        t: 書庫の完全性検査
        u: 書庫へのファイルの更新・追加
        v: 書庫の内容の冗長な一覧表示
        x: パス情報を有効にしてファイルを展開
        y: 新しいスイッチで書庫を変換


%3 3.  命令の詳細

        a: 書庫にファイルを追加

          　ファイルを圧縮して書庫に追加・格納します。書庫が存在しなければ
          新しく作成します。書庫の中に同じ名前のファイルが存在していても強
          制的に置き換えられます。"u -c1" の省略形とも言えます。
          もし "-r" スイッチが指定されていれば，UNLHA32.DLL は指定されたワ
          イルド名に合致するような子ディレクトリーのすべてのファイルを追加
          します。

          例：    a -x1 -r1 archive subdir\*.*
              subdir\ 以下のすべてのファイルを圧縮して格納

          　'x' 命令等と異なり，'a' 命令の仕様から，"a -c0" 等とスイッチを
          使用してもタイムスタンプが常に無視されます。

        c: 書庫内のファイルに注釈を入れる

          　この命令で各ファイルに注釈を入れることができます。 UNLHA32.DLL
          は指定された各格納ファイルごとにあなたに注釈の入力を催促します。
          注釈は 2048 バイトまで可能です。"-jz" スイッチを使用することでファ
          イルから同一注釈を一括入力することも可能です。
          　現時点では，LZH 書庫のコメントヘッダの仕様が正式に決まっていな
          いので，個人的に使用するもの以外では書庫へのコメント格納は避けて
          ください。

        d: 書庫からファイルを削除

          　この命令で書庫からファイルを消去することができます。指定された
          ファイルは書庫から物理的に消されます。 "-jyd" スイッチをオフにす
          るとファイル毎に削除確認を行うようになります。

          例：    d -jyd0 archive *.c
              ".c" で終わるファイルを確認付きで削除

          　"-jn" スイッチを指定すると，ディスクに存在しないファイルを一括
          して書庫から消すことができます。

          例：    d -jn archive c:\text\ *.txt
              C:\TEXT\ 上に存在しないテキストファイルを書庫から削除

          　'd' 命令では，安全のためにファイル名の省略が行えない仕様となっ
          ています。 すべての格納ファイルを削除する場合でも必ず "*.*" 等の
          指定を行うようにしてください。

          　なお，上記の例では "-p" スイッチが指定されていないので，パス情
          報付きの書庫に使おうものなら， (C:\TEXT が子ディレクトリーをもっ
          ていなければ) 格納ファイルが軒並み削除されることになります。対象を
          しっかり把握した上でスイッチの有無を決定しないと泣きを見ます。

        e: 書庫内のファイルを展開

          　この命令は， 書庫から 1 個以上のファイルをカレントディレクト
          リーか，指定されていれば基準ディレクトリーに展開します。UNLHA32.
          DLL は通常既に存在するファイルを上書きする前に利用者に確認します。
          利用者が "no" と答えると，そのファイルの展開をスキップします。も
          し "-jyn" スイッチが指定されていれば，新しいファイル名を催促しま
          す。

          もし，UNLHA32.DLL  が展開中に CRC や不良ファイルデータのエラーに
          出合うと，その破損している展開されたファイルを確認の後消去します。

          例 :    e archive c:\windows\system *.dll c:\tmp\ *.*
              DLL を C:\WINDOWS\SYSTEM に，その他のファイルを C:\TMP に
              展開

          　'e' 命令は "x -m0x0" と等価なので， 格納ファイルのパス情報が無
          視され，すべて指定したディレクトリーに展開されます。従って，パス
          情報の異なる同名のファイルは上書きされてしまうことになりますので，
          注意が必要です。

        f: 書庫のファイルを更新

          　書庫内の格納ファイルと同名のファイルを探し，更新日時の新しいも
          のがあれば置き換え・格納します。 "-c" スイッチが指定されていると
          日時照合を行いません。

          書庫を更新する場合には，書庫を作成したときと同じスイッチ指定を使
          うべきです。

          例：    a archive \temp\ *.* -x -r2           作成時
                  f archive \temp\ *.* -x -r2           更新時

        j: 書庫に別の書庫を加える

          　"j" 命令は，いくつかの LZH 書庫を単純に連結します。

          例：    j archive work1.lzh work2.lzh
              archive.lzh に work1.lzh 及び work2.lzh を追加する

          　Ver 2.62 以降では， 'y' 命令と同様，指定されたスイッチに従って
          ヘッダの変換を行いながら追加が行われます。

          　'j' 命令の場合，"-jx" のような働きをするスイッチは，連結する書
          庫を選ぶのであって，書庫内の格納ファイルを選ぶのではないことに注
          意してください。格納ファイルはすべて追加されます。また，単純に追
          加が行われることから，同じパス・ファイル名のものも重複して格納さ
          れてしまう点に注意する必要があります。
          　追加する書庫の指定においては ".LZH" を省略することはできません
          ので，注意してください。

          例：    j C:\DATA\backup.lzh c:\work\*.lzh -jxlht*.tmp
              backup.lzh に c:\work\ 上の作業用書庫(lht*.tmp) 以外の書
              庫をすべて連結する。

          　'j' 命令は， 自己解凍書庫を通常の LZH 書庫に変換するのにも利用
          できます。

          例：    j new_name lzhsfx.exe
              自己解凍書庫 lzhsfx.exe を new_name.lzh に変換

        l: 書庫の内容の一覧出力

          　書庫の内容の一覧を出力します。ファイル一覧は，格納された順序で
          表示されます。"-jn" スイッチを指定すると，ディスクに存在しないファ
          イルを一覧します。

          　出力は次のようになります。'v' 命令もそうですが，この出力に関し
          ては，ロケール等に関係なく必ずこの形式になります。格納ファイルが
          パス情報をもっている場合， ファイル名の先頭に '+' の文字が付加さ
          れます。

===============================================================================
Listing of archive : C:/TMP/TEST.LZH

  Name          Original    Packed  Ratio   Date     Time   Attr Type  CRC
--------------  --------  -------- ------ -------- -------- ---- ----- ----
+ LHMELT.TXT       13246      5527  41.7% 98-12-27 01:00:34 a--w -lh5- C966
--------------  --------  -------- ------ -------- -------- ---- ----- ----
     1 files       13246      5527  41.7% 99-02-22 14:52:24
===============================================================================

        m: 書庫にファイルを移動

          　'u' 命令と同様に指定されたファイルを更新日時の照合を行いながら
          書庫に追加・更新しますが，追加の後指定ファイルを消去します。"-c"
          スイッチが指定されていると日時照合を行いません。

          　この命令の場合，格納の有無にかかわらず指定されたファイルが削除
          される結果となりますので，注意が必要です。

          　タイムスタンプの比較については， "-c" スイッチの『参考』の項も
          参照してください。

        n: 書庫内のファイルの名前を変更

          　この命令は，LZH 書庫に格納されているファイルの名前を変更します。
          UNLHA32.DLL は，選択されたファイル毎に新しいファイル名を催促しま
          す。何も入力せずにダイアログを終了すると，そのファイルについては
          ファイル名を変更しません。"Path/Filename.txt" と言ったように '\'
          や '/' の文字を使用することによって， パス情報の埋めこみ・変更が
          行えます。また，長いファイル名やスペースを含んだファイル名の入力
          も可能です。

        p: テキストファイルをバッファへ出力

          　LHA では標準出力への出力ですが， Windows での GUI アプリにおい
          ては標準出力のようなものが通常使用されないことから， UNLHA32.DLL
          ではバッファへの出力になります。この機能では，展開されるファイル
          のみを出力に含むように動作します。LHA と異なりログやファイル名等
          はバッファに出力されません。

        s: 既存書庫を変換して自己解凍書庫を作成

          　通常の書庫を変換して自己解凍書庫を作成します。自己解凍書庫につ
          いては後述の自己解凍書庫の項目や LHA，FMEXM の該当するドキュメン
          トも参照して下さい。

          　Ver 1.96a 以降では，"-jw"，"-gw" スイッチの適用範囲が変更され，
          s 命令に限らず  a，f 等の書庫操作を行う命令一般でも， これらのス
          イッチが指定されていれば自己解凍書庫が作成されます。

          例：    a -gw4 -xr1 archive c:\tmp\ *.*
              c:\tmp 配下のファイルを圧縮して自己解凍書庫 archive.exe を
              直接作成する (archive.lzh が存在しない場合)。

          　's' コマンドのみの指定では MS-DOS 版である DosSFX が作成される
          ことに注意してください。Windows 3.1 用 WinSFX(M) であれば "-jw"，
          Win32 用 WinSFX32(M) なら "-gw" スイッチの指定が必要となります。

          例：    s archive c:\tmp\
              archive.lzh を変換して C:\TMP 上に自己解凍書庫 archive.exe
              を作成。(スイッチを指定していないので，DosSFX が作成される)

          　自己解凍書庫の名前を指定したい場合は "-gr" スイッチを使います。
          詳しくは "-gr" スイッチの項を参照してください (Ver 0.94 以降)。

          　自己解凍書庫は，それぞれ特定の形式ヘッダのみを扱うので，元の書
          庫と自己解凍書庫で情報に差の生じる可能性があることに注意する必要
          があります。

        t: 書庫の完全性検査

          　選択された格納ファイルの CRC 値が正しいか試験します。 UNLHA32.
          DLL には，DLL 自身の完全性検査機能は実装されていません (LHA には
          't' 命令による自身の改竄チェック機能が存在します)。

        u: 書庫へのファイルの更新・追加

          　'a' 命令と同様に書庫にファイルを更新・追加しますが，書庫の中に
          同じ名前のファイルがある場合には，タイムスタンプ (更新日時) の比
          較を行い，新しいほうを書庫に残します。"-c1" スイッチを指定すると
          'a' 命令と同じ動作となります。

          　更新のみで追加を行いたくない場合には，'f' 命令を使用してくださ
          い。

          　タイムスタンプの比較については， "-c" スイッチの『参考』の項も
          参照してください。

        v: 書庫の内容の冗長な一覧表示

          　LHA での 'v' 命令と同様の一覧を表示します。"l -x1" と等価です。

          　出力は次のようになります。パス名部分は FNAME_MAX32 (512 バイト)
          までとなります。

===============================================================================
Listing of archive : C:/TMP/TEST.LZH

  Name          Original    Packed  Ratio   Date     Time   Attr Type  CRC
--------------  --------  -------- ------ -------- -------- ---- ----- ----
/Program Files/LHMELT/LHMELT.TXT
                   13246      5527  41.7% 98-12-27 01:00:34 a--w -lh5- C966
--------------  --------  -------- ------ -------- -------- ---- ----- ----
     1 files       13246      5527  41.7% 99-02-22 14:52:24
===============================================================================

          　LHA では 'v' 命令で "-x" スイッチを使うことができませんが，UN-
          LHA32.DLL では "v -x0" として 'l' 命令の動作を行わせることが可能
          です。

        x: パス情報を有効にしてファイルを展開

          　この命令は 'e' 命令と同様に書庫から 1 個以上のファイルを展開し
          ますが，その際に格納ファイルのパス情報を使用してディレクトリーの
          再構築を行います。

          　'x' 命令は "e -x1m1" と等価 (省略形) なのであって， "e -x1" の
          意味ではない点に注意してください。上書き確認等は行われません。

          　タイムスタンプの比較については， "-c" スイッチの『参考』の項も
          参照してください。

        y: 新しいスイッチで書庫を変換

          　'y' 命令は指定されたスイッチを反映して書庫ヘッダを変換します。

          例：    y archive -h1     h1 形式書庫に変換
                  y archive          (省略値は  "-x0" なので) 格納ファイル
                                     のパス情報を削除

          　'y' 命令はヘッダの情報を変換するもので，格納ファイルの圧縮形式
          を変更するものではありません。圧縮形式を指定しても形式の変更は行
          われません。


%4 4.  スイッチオプションの一覧

        -:                      レスポンスファイル指定文字の設定   [--@]
        +:                      レジストリーの設定を無視。         [-+0]
        a[0|1|2]:               属性の保存。                       [-a0]
        c[0|1]:                 タイムスタンプ検査を省略           [-c0]
        d[0|1]:                 ディレクトリー (配下) の格納       [-d0]
        e[0|1]:                 スライド辞書サイズを半分にして圧縮 [-e1]
        f[0|1]:                 ディスク容量チェックの中止         [-f0]
        h[0|1|2|3]:             ヘッダの形式を指定                 [-h2]
        i[0|1|2|3|4]:           ファイル検索で大文字と小文字を区別 [-i4]
        j:                      スイッチ文字の意味を交替させる
        l[0|1|2]:               展開ログのファイル名の表示法の変更 [-l0]
        m[0|1|2]:               質問に yes と仮定                  [-m0]
        n[0|1]:                 展開状況ダイアログ表示の抑止       [-n0]
        o[0|1|2|3]:             旧形式で書庫を作成                 [-o0]
        p[0|1|2]:               全パス名で合致                     [-p0]
        r[0|1|2]:               再帰的検索                         [-r0]
        s[0|1]:                 スキップ表示の抑制                 [-s0]
        t[0|1]:                 書庫の更新日時の指定               [-t0]
        u[0|1|2|3]:             ファイルの更新 (不在と新しいもの)  [-u1]
        u2:                     ファイルの更新 (不在と古いもの)
        u3:                     ファイルの更新 (不在と異なるもの)
        w[0|1|<作業ディレクトリー名>]: 作業用ディレクトリーの指定  [-w1]
        x[0|1]:                 ディレクトリー名を有効にする       [-x0]
        y[0|1]:                 すべての質問に yes と仮定          [-y0]
        z[0|1|2|<拡張子>]:      未圧縮ファイルの指定               [-z0]
        ja[0|1]:                書庫の注釈の表示を抑止            [-ja1]
        jb[<パス名>]:           書庫内の基準ディレクトリーを指定
        jc[0|1]:                破損ヘッダを無視                  [-jc0]
        jd[<サイズ>]:           ディスクの空き容量を確認          [-jd0]
        je[<サイズ>]:           Huffman バッファの大きさを指定
                                                              [-je16384]
        jf[0|1|2]:              ルート記号の削除                  [-jf1]
        jh[0|1]:                Windows NT/95 専用のマークを書庫に付加
                                                                  [-jh0]
        ji[0|1]:                短いファイル名で格納・展開        [-ji0]
        jm[0〜8|a|m]:           圧縮形式を指定                    [-jm2]
        jn[0|1]:                新規ファイルのみ                  [-jn0]
        jo[b][<時間指定>]:      指定日時以降のファイルを処理
        jp[0|1]:                進捗バーをプログレス・バーで表示  [-jp0]
        jr[0|1]:                ファイルの置き換え                [-jr0]
        js<フラグ>:             各種フラグの設定
          a -                   書き戻し後に削除                 [-jsa0]
          b -                   メッセージループを回さない       [-jsb0]
          c -                   展開できなかったファイル数を返す [-jsc0]
          d -                   空き容量取得に失敗した場合の処理を指定
                                                                 [-jsd0]
          e -                   展開時の上書きオープン等をエラーとする
                                                                 [-jse0]
          f -                   タイムスタンプの補正を行わない   [-jsf1]
          g -                   書庫の後ろに存在する余剰データを許可しな
                                い                               [-jsg1]
          l -                   圧縮・格納ファイルの重複チェックを行わな
                                い                               [-jsl0]
          m -                   サウンドを使用する               [-jsm0]
          n -                   ヘッダ内のパス長不正の場合にエラー
                                                                 [-jsn0]
          o -                   SH_DENYNO でのオープンを行わない
                                                                 [-jso0]
          p -                   不正なパスを拒否                 [-jsp1]
          s -                   共有エラーの場合に処理を続行     [-jss0]
          t -                   FILETIME 構造体ヘッダの格納を省略
                                                                 [-jst1]
          v -                   書庫操作後に書庫をチェック       [-jsv0]
          z -                   小文字の拡張子を付加             [-jsz0]
        jt<フラグ>:             各種フラグの設定
          b -                   バックアップモードを指定         [-jtb0]
          c -                   指定したファイルのみ格納         [-jtc0]
          l<コードページ> -     ヘッダのコードページを指定
          p[<優先順位>] -       優先順位の指定
          s[0|<文字数>] -       スペース文字の連続数を指定       [-jts]
          u[0|1|2] -            Unicode 名ヘッダの扱いを指定     [-jtu1]
          z[0|1|<拡張子>] -     実行可能ファイルの指定           [-jtz1]
        jw[j|e][0|1|2|3|4]:     WinSFX/WinSFXM を作成             [-jw0]
        jx[<ファイル名>]:       除外するファイル名
        jy[<フラグ>]:           yes と仮定して質問を抑制
          b -                   不正パス警告の処理選択確認を省略
          c -                   ディレクトリー作成の確認を省略
          d -                   ファイル削除の確認を省略
          k -                   使用できるディスク容量の確認の省略
          n -                   新ファイル名の要求の省略
          o -                   既存ファイルへの上書き確認の省略
        jz[<ファイル名>]:       ファイル注釈のファイルを供給
        ga[0|1|2]:              書き込み不可属性を無視            [-ga0]
        gb[<ファイル名>]:       ファイル・モードを指定
        gd[0|1]:                余分なデータの削除                [-gd0]
        ge[0|1]:                最初の拡張子を認識                [-ge0]
        gf[0|1|2|3]:            すでにある新しいファイルの更新    [-gf0]
        gf2:                    すでにあるより古いファイルの更新
        gf3:                    すでにある異なるファイルの更新
        gj[0|1]:                x 命令を e 命令と同様と見なす     [-gj0]
        gl[<ファイル名>]:       ログをファイルに出力
        gm[0|1]:                エラーメッセージ表示の抑止        [-gm0]
        gn[0|1|2]:              展開ファイルの合計サイズを 100% とした進
                                捗グラフの表示                    [-gn0]
        go[0|1]:                ダイアログのオーナーウィンドウの指定
                                                                  [-go0]
        gp[0|1]:                ウィンドウを Disable にしない     [-gp0]
        gq[0|1]:                ダイアログを前面に表示            [-gq0]
        gr[<ファイル名>]:       変更ファイル名を供給
        gs[<サイズ>]:           ヘッダ検索サイズの指定            [-gs-]
        gt[0|1]:                特殊ディレクトリー指定を解析      [-gt0]
        gu[0|1]:                WinSFX，DosSFX にすべてのファイルを格納
                                                                  [-gu0]
        gw[j|e][0|1|2|3|4]:     WinSFX32/WinSFX32M を作成
        gx<フラグ>:             WinSFX(32) の省略値を指定
        gy<サブスイッチ>:       WinSFX(32) の各種パラメータを指定
          a[0|1]:               属性を展開                       [-gya1]
          c[0|1]:               タイムスタンプチェックの省略     [-gyc1]
          d<ディレクトリー>:    展開先ディレクトリーを指定
          e<コマンド文字列>:    実行コマンドを指定
          o[0|1]:               自動上書きを指定(上書き確認を行わない)
                                                                 [-gyo0]
          q[0|1]:               自動実行を指定                   [-gyq0]
          s[0|1]:               改竄チェックを行う               [-gys0]
          t<タイトル文字列>:    展開先ディレクトリー欄タイトルの設定
          w<タイトル文字列>:    ダイアログのタイトルの設定
          x[0|1]:               ディレクトリー情報の復元を行う   [-gyx0]

        以下，予約スイッチ

        k[<フラグ>][:<パスワード>]:
                                プロテクト書庫の作成
          h -                   ヘッダの暗号化
        v[<サイズ>]:            疑似マルチボリューム書庫の作成    [-v-]


%5 5.  スイッチオプションの詳細

  　UNLHA32.DLL では，LHA Ver 2.67 で指定できるスイッチに加え， ARJ 風のス
  イッチを追加してあるために，体系が乱れ複雑怪奇になっています。

  　スイッチのオン・オフは基本的に "-c1"，"-c0" のように数値で指定するよう
  になっていますが，ARJ.EXE 風の "-c+"，"-c-" による指定も可能となっていま
  す。スイッチング(フラグの反転)を行う一部のスイッチを除いて，"-c" は "-c1"
  と等価となります。誤動作を避けるために明示的にオン・オフを指定したほうが
  よいでしょう。

  　本来は  LHA でも明示的なオン・オフの指定が行われていない場合については
  反転動作となるのですが， "e -x" と "x -x" の双方で "-x" の意味が反対とな
  る (前者は "e -x1"，後者は "x -x0" と等価) 点が判りづらいのか， 誤った指
  定を行っている例が多々見受けられたので，UNLHA32.DLL では反転動作を行わず
  "-x" が常に "-x1" を意味する仕様となっています (ARJ 系のスイッチを除く)。

        -[0|1|2|3|<文字>]: レスポンスファイル指定文字の設定  [--@]

          　このスイッチは，レスポンスファイルやスイッチの指定文字を変更す
          るのに使います。引数の文字がないスイッチ "--" は "--1" を意味し，
          レスポンスファイル指定の文字のみを無効とする点に注意が必要です。

          --0     : スイッチ及びレスポンスファイル指定文字を初期値に戻しま
                    す。 "--2" や "--3" でスイッチ文字の無効化を行った後で
                    は  "/-0" とする必要がある点に注意してください。 "--0"
                    ではファイル指定となってしまいます。
          --1     : レスポンスファイル指定文字のみを無効化します。
          --2     : スイッチ及びレスポンスファイル指定文字の双方を無効化し
                    ます。 スイッチ文字の無効化については "--3" の項も参照
                    してください。
          --3     : スイッチ指定文字のみを無効化します。この指定で無効化を
                    行っても， 依然として '/' がスイッチ指定文字として機能
                    する点に注意してください。
          --<文字>: レスポンスファイル指定文字を変更します。
          --      : この指定が "--1" と等価であり， スイッチ指定文字の無効
                    化を意味しない点に注意してください。

              例：  e archive --! !list.fil
                        レスポンスファイル指定文字を '!' に変更
                    e archive -- @.bat
                        @.bat を扱うために指定文字を無効に設定

          (注意)
            　"--" スイッチについては，現バージョンでは LHA との互換性があ
            りません。

        +: レジストリーの設定を無視。  [-+0]

          　通常 UNLHA32.DLL はレジストリーの設定を省略値として使用しま
          すが， "-+" スイッチが指定されるとレジストリーの設定を使わないよ
          うになります。レジストリーの設定をオーバライドさせるには，このス
          イッチを使用するのではなく，明示的にスイッチを指定する方法による
          ほうがよいでしょう。

          　当然ながら，"-+1" を指定した場合には，UnlhaConfigDialog() によ
          るレジストリー設定は無効となります。

        a[0|1|2]: 属性の保存。  [-a0]

          　すべての属性のファイルを格納の対象とします。また，展開時には元
          の属性を再現します。

          [展開時]
            -a0:    隠し属性・システム属性のついたファイルを無視します。
                    また，属性の復元も行われず，アーカイブ属性のみセットさ
                    れます。
            -a1:    すべてのファイルについて属性を復元して展開します。
            -a2:    展開時については "-a1" と同じで特に違いはありません。
                    lhd メンバーは， "-x" スイッチ等によりパス情報が有効と
                    なっていれば常に展開が行われます。

          [格納時]
            -a0:    隠し属性・システム属性のファイルを無視します。読込専用
                    属性のついたファイルについては，読込専用属性が保存され
                    ますので，注意してください。
            -a1:    すべてのファイルが属性を保存して格納されます。
            -a2:    基本的には "-a1" と同じですが， "-x1r2" と同時に指定さ
                    れた ("-x1"，"-r2" が有効となっている) 場合は， ディレ
                    クトリについてもファイルと同様にメンバーとして格納され
                    ます。ディレクトリーが格納されたメンバーは，圧縮法が
                    "-lhd-" として記録されます。"-a2" については，後述の
                    "-d" スイッチの項も参照してください。

          　格納・展開時双方とも，"-a0" については，属性の格納・復元の有無
          だけではなく，取り扱うファイルにも影響を与えることに注意してくだ
          さい。

        c[0|1]: タイムスタンプ検査を省略  [-c0]

          　'u'，'f'，'e'，'x' 等， 通常日時照合が行われる命令・スイッチに
          おいて，日時照合を省略して処理を行うようにします。

              例：  e archive c:\tmp\ -c
                        タイムスタンプに関係なく展開・上書きする

          (参考)
          　API.TXT でも記述していますが， NTFS 上のファイルや UNIX 等が起
          源の 00:00:01 といった奇数秒のタイムスタンプをもつファイルの扱い
          には注意が必要です。 NTFS はともかく，DosDateTime (ftime) でしか
          タイムスタンプを表現できない FAT においては， その仕様から秒に関
          しては偶数秒に切り詰めざるを得ません (ftime は秒を 5  ビットで表
          すので，1/2…つまり 2 秒単位でしか秒を表現できない)。

          　MS-DOS や Windows 3.1，Windows 95 では単純に最下位ビットを切り
          捨てていましたが，起源が奇数秒のファイルについて，タイムスタンプ
          の比較時に必ず『古い』と判断される不具合が発生する結果となってい
          ました。

          　そのため，NTFS の登場とネットワーク重視に伴い，NT 系のプラット
          フォームでは切り上げを行うように改善・仕様変更されています。

          　ところが，Windows 98 においては， 同様の仕様変更が行われるはず
          が，実際にはデバイスに書き込まれる SetFileTime() API 等 (の結果)
          では切り上げが行われるものの， 形式変更を行う FileTimeToDosDate-
          Time() 等では切り捨てのまま (つまりバグ)  という中途半端どころか
          余計な不具合を出すだけの仕様となってしまい， 以降の Windows 98SE
          や Windows Me でも依然として修正が行われていない状況となっていま
          す。

          　アーカイバー関連で言えば，上記の 00:00:01 のタイムスタンプをも
          つファイルを展開した場合， LHA を始めとして MS-DOS や Win16 のア
          プリを始め，FileTimeToDosDateTime() のバグが考慮されていない
          Win32 アプリでも， NT 系と (Windows 95 はともかく) Win 9x 系での
          動作が異なる結果となってしまう点に注意が必要となります。

          　上記のファイルが存在するデバイスをネットワーク経由で h1 形式の
          書庫に格納すると想定した場合， NT 系で実行したものが 00:00:02 と
          なるのに対して， Windows Me で実行したものは 00:00:00 となってし
          まいます。

          　アーカイバーに限らず，タイムスタンプを扱う際には，以上のような
          システムのバグ等も考慮に入れる必要が出てくると思われます。

          (追記)
          　FileTimeToDosDateTime() については，さらに Windows XP にもバグ
          が存在するようです。上述のとおり NT 系では 00:00:01 といったタイ
          ムスタンプは 00:00:02 に切り上げされるわけですが， Windows XP で
          は恐ろしいことに 00:00:00 も 00:00:02 に切り上げされてしまいます。
          どうも DosDateTime  に変換してからインクリメントする…という大ボ
          ケの処理になっているようです。(^^;; NT 系でもバグが登場してしまっ
          たとなると，もはや FileTimeToDosDateTime()  は全面的に使用しない
          のが得策のようです。
          　なお，Windows XP でのバグについては， 常に発生するのかは未確認
          です。複数の環境で確認できたことと，他作者による複数のソフトで同
          様のネタが登場していたことから， 『(システム側の問題が原因となっ
          て) 発生する環境が存在する』ことだけは確かなようです。

        d[0|1]: ディレクトリー (配下) の格納  [-d0]

          　格納時，単独のディレクトリーを含め，すべての属性のファイルを再
          帰的に格納します。

          　"-d1" は "-r2x1a2" の省略形です。 "-r2"，"-x1"，"-a2" のスイッ
          チは展開時にも作用することに注意して下さい。

          　このスイッチを使用して作成されたディレクトリーメンバーを展開し
          た場合は， ディレクトリーの属性とタイムスタンプ (NT で権限が存在
          する場合) が復元されます (Ver 1.49a 以降)。 このことから解るよう
          に，ディレクトリーの情報を格納する点がこのスイッチの存在理由です。
          通常の格納においては，格納ファイルのパス情報としてディレクトリー
          構造が記録されることはあっても，そのディレクトリーに関する情報が
          格納されることはありません。

          　このスイッチを使用する場合には注意が必要です。たとえば，通常よ
          く行われるように，

                    a archive c:\ tmp\*.* -d

          としたのでは， c:\tmp についてのディレクトリーメンバーは作成され
          ません。メンバーを作成するには次のようにする必要があります。

                    a archive c:\ tmp -d

          理由は少し考えれば解りますが，"tmp\*.*" の指定は『C:\TMP 上のファ
          イル』を指定したのであり『C:\TMP  というディレクトリー』を指定し
          たわけではないからです。

        e[0|1]: スライド辞書サイズを半分にして圧縮  [-e1]

          　lh5 や lh6 形式で圧縮を行う場合に， 強制的に辞書サイズを半分に
          して処理を行います。このスイッチにかかわらず，メモリーが足りない
          場合は最高 4KB まで辞書を縮小するようになっていますが，  Windows
          環境では縮小はまず起こらないはずです。
          　UNLHA32.DLL では，通常は LHA Ver 2.6x と同様，辞書サイズが 4KB
          に縮小されても，lh4 形式とはせずに lh5 形式として格納されます。

          -e0:    半分のサイズの辞書で圧縮
          -e1:    通常のサイズの辞書で圧縮

              例：  a -jm2 -e0 archive *.txt
                        lh4 相当のスライド辞書が 4K の書庫を作成
                    a -jm3 -e0 archive *.txt
                        スライド辞書が 16K の書庫を作成

        f[0|1]: ディスク容量チェックの中止  [-f0]

          　通常  UNLHA32.DLL は展開時にディスク容量をチェックして展開を行
          いますが，"-f1" を指定するとチェックをスキップするようになります。
          チェックを省略しているので，当然ながら空きがなかった場合は書き込
          みの失敗でエラー終了することになります。

        h[0|1|2|3]: ヘッダの形式を指定  [-h2]

          　ヘッダの形式を選択します。デフォルトは "-h2" です。ただし，Dos-
          SFX，WinSFX では "-h0" が， WinSFX32 では "-h2" がユーザの指定に
          かかわらず必ず採用されます。現バージョンでは UNIX 及び OS/2 版等
          で使用が可能な h3 形式のヘッダも扱えるようになっていますが，仕様
          変更が予想されますので，テスト目的以外では使わないようにしてくだ
          さい。ヘッダの構造については HEADER.TXT に詳述されています。

          -h0:    LHarc 互換の h0 形式ヘッダを指定
          -h1:    LHA 互換の h1 形式ヘッダを指定
          -h2:    LHA 2.67.32.00β 互換の h2 形式ヘッダを指定。
                  なお，h2 形式ヘッダ自体は LHA の全バージョンで使用が可能
                  です。LHA 2.67.32.00 (LHA32) で標準形式となったことから，
                  『LHA 2.67.32.00  互換』という表記を行っているに過ぎませ
                  ん。
          -h3:    現バージョンでは使用不可 (と思ってください)

        i[0|1|2|3|4]: ファイル検索で大文字と小文字を区別  [-i4]

          　他の OS 版の LHA で作成された書庫では， ファイル名に大文字と小
          文字が混在し，それらを区別しているものがあります。そういった書庫
          で問題が発生するときにこのスイッチを使って下さい。

          a. 書庫内のファイルを検索する命令(f，d，s，e，x，t，p，l，v)
            -i0|4:      大文字・小文字を同一のものとして検索(デフォルト)。
            -i1〜3:     大文字・小文字を区別して検索。

          b. 書庫操作を伴うコマンド(a, u, m，s)
            -i0:        パスを含めてすべて大文字に変換して書庫に記録。
            -i1:        ファイル名のみをすべて大文字に変換。
            -i2:        ファイル名のみをすべて小文字に変換。
            -i3:        パスを含めてすべて小文字に変換。
            -i4:        変換せずに書庫へ記録(デフォルト)。

          　UNLHA32.DLL 既定の動作では，変換を行わずそのままのケースで書庫
          に名前が記録されますが，検索時には大文字・小文字が同一視されます。
          　LHA32 Ver 2.67.32.00  においては大文字・小文字を区別して格納さ
          れる点が UNLHA32.DLL とは異なっています。

          　's' コマンド使用時には注意が必要です。スイッチの仕様から書庫内
          検索，名前変換の双方に影響するため，ファイルの個別指定を行った場
          合には "-i0" のみしか期待どおりの動作とはなりません。

          　なお，いくらスイッチを指定したとしても，ファイルシステム (FAT，
          NTFS) が通常では大文字・小文字を同一視することに変わりのない点に
          注意が必要となります。

        j: スイッチ文字の意味を交替させる

          　このスイッチは，スイッチ文字の意味を交替させます。この交替は，
          スイッチ文字列の区切りに来た時，普通のスイッチ文字の意味に戻るよ
          うにリセットされます。

          　例えば，"-jf" と "-f" は異なりますが，"-jjf" は 2 回交替してい
          るので "-f" と同じです。 また，"-jfjn" は "-jf -n" と，"-jfn" は
          "-jf -jn" と同じです。
          　これに対して "-g" スイッチは意味の交替が行われないので，"-gad"
          は "-ga -d" の意味となります。

          　混乱を避けるためにも， 連続指定せずに "-jf -jn" と個別に指定す
          ることをお勧めします。

        l[0|1|2]: 展開ログのファイル名の表示法の変更  [-l0]

          　展開ログのファイル名の表示法を変更します。

          -l0:    ファイル名だけを表示します。
          -l1:    書庫内に記録されているパス名及び展開先のパス名を表示しま
                  す。
          -l2:    "-l1" と同じですが，'v' 命令と共に使用するとより詳しい一
                  覧を得ることができます。

        m[0|1|2]: 質問に yes と仮定  [-m0]

          　問い合わせを行わず，問い合わせに対して，すべて「Y」が入力され
          たものとして処理を続けます。 問い合わせがスキップされるのは，フ
          ァイルの上書きとディレクトリー作成についてです。デフォルトは
          "-m0" ですが，'x' 命令の場合は 'x' 命令の仕様から "-m1" がデフォ
          ルトとなります。

          　展開時のファイル上書きに関しては "-m1" と "-m2" は異なる意味を
          もちます。

          -m1:  "-c0" なら更新日時の照合を行い，書庫内のファイルが新しけれ
                ばファイルを展開します。"-c1" の場合は常にファイルが展開さ
                れます。本来，このモードにおいてはリードオンリー等特殊属性
                のファイルであっても常に展開されるところですが，単に『パス
                情報を有効にして展開する』目的で安易に 'x'  命令が使われる
                ことが多すぎる…という現状を考慮して，UNLHA32.DLL において
                は，"-gm"，"-ga"  というスイッチで明示的に指定しない限り特
                殊属性のファイルについては確認を行うようになっています。

          -m2:  "-c0"  であっても更新日時の照合を行わず， "000" から "999"
                までの使用されていない拡張子に変更して展開します。この場合，
                たとえファイルが同じものであったとしても別名で展開を行いま
                す。

        n[0|1]: 展開状況ダイアログ表示の抑止  [-n0]

          　通常 UNLHA32.DLL  は処理を行う際にダイアログにより進捗情報を表
          示しますが，"-n"  を指定することによりダイアログの表示を抑止する
          ことができます。このスイッチを指定してもエラーメッセージ等の表示
          は行われますので注意してください。エラーメッセージや確認メッセー
          ジの抑制には "-gm" スイッチを使用します。

          　'l'，'v' コマンド時にこのスイッチを指定すると， ファイル名だけ
          の簡易表示となります。

        o[0|1|2|3]: 旧形式で書庫を作成  [-o0]

          　LHarc Ver 1.xx や LHA Ver 2.13  で展開できる書庫を作成します。
          Ver 2.63 において "-o0" と "-o3" の意味が入れ替わっていることに注
          意してください。Ver 2.63 以降では， LHA.EXE と同様 "-o0" が現行で
          標準の書庫形式を指します。

          -o0:  UNLHA32.DLL 標準の書庫を作成。"-h2 -jm2 -i4 -ji0" と等価。
          -o1:  LHarc v1.13 互換の書庫を作成。ヘッダ形式は h0 となります。
                "-h0 -jm1 -i0 -ji1" (h0，lh1) と等価。
          -o2:  LHA v2.13 互換の書庫を作成。 本来は h1 ですが，UNLHA32.DLL
                では LHA32 と同様 h2 となります。"-h2 -jm2 -i0 -ji1" (h2，
                lh5) と等価。
          -o3:  LHA Ver 2.6x で標準となっている lh6 形式で書庫を作成。ヘッ
                ダ形式は h2 となります。"-h2 -jm3 -i0 -ji1" と等価。
                ちなみに，LHA Ver 2.67.16.00 は "-h1 -jm3 -i0 -ji1" と等価
                の動作 (h1，lh6) がデフォルトですが， LHA32 Ver 2.67.32.00
                は "-h2 -jm2 -i0 -ji1" (h2，lh5)  がデフォルトとなっていま
                す。

          　明示的に "-o1"，"-o2"，"-o3" が指定された場合には，UNLHA32.DLL
          は独自の拡張ヘッダを書き込みません (Ver 2.40b 以降)。 ただし，メ
          ンバが扱えなくなるため，ファイルサイズヘッダ (4GB 以上のメンバー
          で作成) は (必要であれば) 常に書き込まれます。 さらに，Ver 2.40e
          以降では強制的に短い名前で格納されます。

        p[0|1|2]: 全パス名で合致  [-p0]

          　通常 UNLHA32.DLL は， 展開時，パスが付加されていないファイル指
          定については，"-r1" が付加されたがごとくファイル名のみで検索を行
          い，子ディレクトリー以下のファイルについても展開を行いますが，
          "-p" を指定すると， パスの有無を厳密に判定して検索を行うようにな
          ります。

              例：  e archive *.txt -x
                  "-p" が指定されていないことから，ファイル名のみで検索
                  が行われるので tmp/test.txt 等も展開される

              例：  e archive *.txt -x -p
                  "-p"  が指定されていると， パスの有無が判定されること
                  からルート以外の tmp/test.txt 等は展開されなくなる

          　パスが付加されたファイル指定に関しては "-p0"，"-p1" の違いにか
          かわらずパスを含めて判定して検索を行います。

              例：  e archive tmp\*.txt -xr
                  ある意味当然ながら， たとえ "-r1" スイッチが指定されてい
                  ても，(書庫での) ルート上の WORK.TXT  等が展開されること
                  はない。

          　すべてのファイルを合致させる目的で "*.*" 等を指定する場合には，
          "-p" スイッチは使用すべきではありません。"-p" スイッチが指定され
          ていると  "*.*" は『パス名をもたないすべてのファイル』を意味しま
          す。反対に個別にファイルを指定する場合には "-p" スイッチを使用す
          べきです。

          　通常 "-p" スイッチが必要となるのは以下のような場合です。

              例：  e archive c:\tmp\ readme.txt -p
                  archive 内のルート上の readme.txt のみ展開。"-p" を指
                  定しない場合は，たとえば (書庫内の) folder/readme.txt
                  についても展開が行われてしまう。

          　子ディレクトリーをもつディレクトリーパスを合致させるには，"-p2"
          スイッチを使います。このスイッチは，UNLHA32.DLL が，指定されたワ
          イルド名ではなくパス名の最初の部分のみ合致するか調べるようにする
          ものです。例えば，あなたの書庫が TC と言う名前の TURBO C++ のディ
          レクトリを含んでいるとき，INCLUDE サブディレクトリーをサブディレ
          クトリ INCLUDE\SYS と共に展開したいとしたら，次の命令が使えます。

              例：  e archive TC\INCLUDE\*.* -p2

          要は "-p2" スイッチは "-r2" スイッチと等価です。"-r2" スイッチを
          使用したほうが混乱が少ないでしょう。UNARJ32.DLL との互換性を考慮
          して，UNLHA32.DLL についても同じ "-p" スイッチの拡張指定という形
          で指定が可能となっています。 ただし，ARJ と異なり 'a' コマンドの
          ように格納ファイルに対する検索時だけでなく，すべてのコマンドにお
          いて "-p2" スイッチが機能します。

        r[0|1|2]: 再帰的検索  [-r0]

          　ここで言う『再帰的』とは，下位レベルのディレクトリーも含めて
          ファイルを検索することを意味しています。展開時の処理で説明してい
          ますが，格納等他の処理の場合も同様です。

          　ファイルの検索には 3 つのモードがあります。

          -r0: 非再帰モード

            　パス名で指定されたファイルのみを展開します。

              例：  x archive -r0 C:\TMP\ WIN31\readme.txt
                 WIN31/SYSTEM/readme.txt が展開されることはない。

          -r1: ファイル名指定再帰モード

            　パスとファイル名を切り離し，指定されたディレクトリー以下の
            ファイルを再帰的に検索し，ファイル名と一致するものを展開します。
            共通の名前をもったファイルをまとめて選択するときに使います。

              例：  x archive -r1 C:\TMP\ WIN31\readme.txt
                 書庫内の WIN31 ディレクトリー以下のすべての readme.txt
                 を展開。"-r0" の場合と異なり WIN31/SYSTEM/readme.txt
                 も展開される。

          -r2: ディレクトリー指定再帰モード

            　指定されたディレクトリー以下のすべてのファイルを展開します。
            ディレクトリー構造をまとめて操作するときに使うもので，このス
            イッチを使用する場合は，基本的にファイルではなくディレクトリー
            を指定することになります。

              例：  e archive -x -r2 C:\TMP\ WIN31
              　書庫内の WIN31 ディレクトリー以下のファイルをすべて展開。

            　"-r1" と "-r2" の違いに十分留意して使用してください。 よく，
            単純な『ディレクトリー以下を含めて』の動作をさせるのに "-r" と
            指定されていたりしますが， これはたまたまワイルドカードが
            "*.*" となっている関係上期待した動作となっているに過ぎません。
            普通に子ディレクトリーを含めて処理を行わせるのなら "-r2" スイッ
            チを使用すべきです。"-r" は "-r1" の意味です。
                                ~~~~~~~~~~~~~~~~~~~~
        s[0|1]: スキップ表示の抑制  [-s0]

          　"Skipped  FILENAME.EXT : 最新のファイルが存在"  といったスキッ
          プ表示を抑制します。どのログに影響するかの統一的な規則が存在しな
          いため，ここでの説明は不可能です。m(__)m

        t[0|1]: 書庫の更新日時の指定  [-t0]

          　書庫の更新日時を，書庫内の最新の格納ファイルのものに合わせます。

          　書庫を更新する命令 (a，u，m，f，d，etc) で有効です。このスイッ
          チが指定されていない場合は，書庫を更新した時刻そのものが書庫の更
          新日時となります。

        u[0|1|2|3]: ファイルの更新 (不在と新しいもの)   [-u1]

          　このスイッチを指定すると，UNLHA32.DLL はより新しいファイルや存
          在しないファイルを格納・展開するようになります。

          　UNLHA32.DLL (LHA) の仕様が "-u" スイッチが指定されたかのような
          動作を基本としていますので， 少なくとも "-u1" は使われることがほ
          とんどないでしょう。UNARJ32.DLL との互換性のために用意されている
          スイッチです。

        u2: ファイルの更新 (不在と古いもの)

          　'u' スイッチにおいて "-u2" とすると，UNLHA32.DLL はより古いファ
          イルと存在しないファイルのみを扱うようになります。

        u3: ファイルの更新 (不在と異なるもの)

          　'u' スイッチにおいて "-u3" とすると， UNLHA32.DLL は存在しない
          ファイルとタイムスタンプ及びサイズの異なるファイルのみを扱うよう
          になります。

          　'u' スイッチの各モードを整理すると，

                u0 : 存在しないものを含めてすべてのファイル
                u1 : より新しいか存在しないファイル
                u2 : より古いか存在しないファイル
                u3 : 存在しないかタイムスタンプ及びサイズの異なるファイル

          となります。Ver 1.51 で "-u0" の仕様が変更されている点に注意が必
          要です。 現在の版では，暫定措置として，WinFM32，WinFM2K，WinLM32
          から呼ばれた場合には，  強制的に旧仕様の動作を行うようになってい
          ます (Ver 1.52a 以降)。

        w[0|1|<作業ディレクトリー名>]: 作業用ディレクトリーの指定  [-w1]

          　作業用ファイルを作成するディレクトリーを指定します。単にスイッ
          チを ON にした場合は基本的にシステムが認識している作業ディレクト
          リーを使用します。"-w0" を指定すると書庫と同じディレクトリーを使
          用します。

          　"-w1" の場合のディレクトリー決定については『環境変数』の項目を
          参照してください。

              例：  a archive C:\TMP -xr2 -w0
                 書庫と同じディレクトリーに作業ファイルを作成

              例：  a archive C:\TMP -xr2 -w1
                 システムが認識している作業ディレクトリーに作業ファイル
                 を作成

              例：  a archive C:\TMP -xr2 -wC:\WORK
                 明示的に作業ファイルを C:\WORK 上に作成するように指定

        x[0|1]: パス情報を有効にする  [-x0]

          　展開時にこのスイッチが設定されていると，パス情報が記録されてい
          れば，その情報に従いディレクトリーを再構築しながら展開します。ま
          た，'l' コマンドにおいても，記録されているパス名をそのまま出力す
          る 2 行表示モードとなります ('v' 命令の動作)。
          　格納時についても，このスイッチを設定すると，ファイル名だけでな
          くそのファイルのパス情報についても書庫に記録されるようになります。

              例：  e -x archive C:\TMP\ *.*
                 ディレクトリーを再構築しながらファイルを C:\TMP に展開

          　通常このスイッチを指定して格納を行った場合に記録されるパスは，
          あくまでも格納ファイルに関する付帯情報であって，ディレクトリー自
          体の情報が記録されるわけではありません。従って格納するファイルの
          存在しない『空のディレクトリー』に関する情報は記録されないことに
          なります。

          　パス情報としてではなく，ファイルと同様にディレクトリーの情報を
          格納したい場合は "-d" スイッチ (又は "-x1r2a2") を使用してくださ
          い。

        y[0|1]: すべての質問に yes と仮定  [-y0]

          　このスイッチは，UNLHA32.DLL の実行の際の利用者への質問 (上書き
          確認，新ディレクトリー作成確認等) を抑制します。

          　このスイッチを指定すると無確認であらゆる処理を行うので注意して
          ください。ちなみに，"-jn" スイッチはあらゆる上書きを避ける時に使
          えます。

          　少し違うものとして，利用者への確認を個々の型ごとに抑制する "-jy"
          スイッチもあります。"-y" スイッチは "-jybcdkno" に相当します。

        z[0|1|2|<拡張子>]: 未圧縮ファイルの指定  [-z0]

          　圧縮せずに書庫へ格納するファイルを指定します。

          -z0 : すべてのファイルを圧縮して格納 (デフォルト)
          -z1 : すべてのファイルを圧縮せずに格納
          -z2 : LZH，LZS，ZIP，PAK，ARC，ZOO，ARJ の拡張子をもつファイルだ
                けを圧縮せずに格納
          -z<extension> :
                指定した拡張子のファイルを圧縮しないで格納します。同時に，
                "-z2"  スイッチが指定されたものとみなします。先頭に '.' を
                付けても付けなくても構いません。拡張子無しのファイルを指定
                するときには "-z." とします。 また，"-zexe -za??" などと複
                数の指定やワイルドカードの使用が可能です。

        ja[0|1]: 書庫の注釈の表示を抑止  [-ja1]

          　"-ja" スイッチは，書庫の注釈の表示を抑制します。

        jb[<パス名>]: 書庫内の基準ディレクトリーを指定

          　格納時の書庫内での基準ディレクトリーを指定します。深いパス階層
          へ直接格納を行いたい場合に使用します。現バージョンでは試験的に実
          装されている段階なので注意してください。

          　スイッチの性格上，"-jr" スイッチが指定されている場合には，この
          スイッチは無効となります。

              例：  a -xr1 archive -jbDir\Sub C:\WORK\ DATA\*.*
                DATA ディレクトリー下のすべてのファイルを書庫内の
                Dir/Sub 上へ格納

          　上の例で，C:\WORK\DATA\TEST.TXT は  Dir/Sub/DATA/TEST.TXT のパ
          スで書庫に格納されます。 (発生するとしても) DATA/TEST.TXT に対し
          て上書きされるのではないことに注意してください。

          　当然ですが， パスを扱うものであることから，"-x" スイッチが指定
          されていない場合は無効となります。

        jc[0|1]: 破損ヘッダ等を無視  [-jc0]

          　このスイッチは，データ不良などの損傷を受けた書庫にアクセスする
          ために使います。このスイッチを指定すると，UNLHA32.DLL は破損部分
          をスキップして次の有効なヘッダを検索して処理を続けるようになりま
          す。ただし，I/O エラー等の場合には，ファイル自体へのアクセスが続
          行できないことから，エラーを返して処理を中止します。

          　LHA Ver 2.60 以降ではこの処理が機能として組み込まれていますが，
          UNLHA32.DLL   ではスイッチで指定しない限り処理が行われないように
          なっています。

        jd[<サイズ>]: ディスクの空き容量を確認  [-jd0]

          　このスイッチは，展開の際に利用者が指定したディスク空き容量が残
          されているか UNLHA32.DLL に常に確認させるようにします。 UNLHA32.
          DLL は指定されたディスク容量の制限を越えるファイルについては展開
          を行いません。 デフォルトの空き容量は 0 バイト (展開する空きがあ
          れば：展開した後に 0 バイト以上の空きがあれば) です。

              例：  e archive basedir\ -jd100K *.doc

          上の例で，UNLHA32.DLL  はディスクの空き容量を 100,000 バイトより
          少なくさせるようなファイルは展開しません。 "1K" は "1000" と等価
          である点に注意してください。1024 を表すのではありません。

          　'l' や 'v' の一覧モードでは， ファイルの元の大きさの合計がユー
          ザの指定した空き容量を越えると，UNLHA32.DLL は一覧表示の最後にエ
          ラー情報を付加します。

          　このスイッチをオフにしたい場合は "-jd-" としてください。"-jd0"
          は『空きがあれば』という指定になります。

        je[<サイズ>]: Huffman バッファの大きさを指定  [-je16384]

          　UNLHA32.DLL は基本的に静的 Huffman 法を採用していますが， コー
          ドの変化にも追随できるように，ある一定サイズの中間バッファを用意
          し，そのバッファが満杯になる都度 Huffman  法によるエンコードを行
          うようになっています。
          　UNLHA32.DLL  は，lh5〜lh7 形式圧縮等に使用する，この中間バッファ
          の大きさを 16384 バイトとしていますが， このスイッチを使用するこ
          とにより大きさを変更することができます。4096 から 65536 バイトま
          で指定できます。圧縮形式やファイルの形態によっては，サイズを変更
          することにより圧縮率の向上を図れる可能性があります。

          　オリジナルの LHA でも同じ 16384 バイトとなっていましたが，比較
          的成績 (圧縮率) が良かったのか，Ver 2.63 以降では 32768 バイトに
          拡張されているようです。

          　lh3 等，中間バッファのサイズが固定されている形式では，指定が無
          視されます。

        jf[0|1|2]: ルート記号の削除  [-jf1]

          　通常，UNLHA32.DLL は，絶対パスで格納されたファイルの場合は，展
          開時にルートディレクトリーからの絶対パスで展開を行いますが，
          "-jf0" スイッチを指定すると， 指定した基準ディレクトリーからの相
          対パスで展開を行うようになります。

          　反対に， "-jf2" を指定するとドライブ名からの全ての情報が有効と
          なります。 従って，"-jf2" スイッチを指定した場合には，基準ディレ
          クトリの指定は無意味となります。

          　Ver 1.46a 以降では，それまでの版と異なり，展開時以外の場合にも
          "-jf" スイッチが有効となる点に注意してください。

             例：A:/SUB/FILE.TXT というパス情報で格納されたファイルの存
                 在する書庫 archive を次のコマンドにより展開した場合，

                e -x archive C:\TMP\ *.*-jf#

                        # | 実際に展開されるディレクトリー
                      ----+-------------------------------
                        0 | C:\TMP\SUB\FILE.TXT
                        1 | C:\SUB\FILE.TXT
                        2 | A:\SUB\FILE.TXT

             例：A:\SUB\FILE.TXT というファイルを次のコマンドにより格納
                 した場合，

                a -x archive A:\SUB\FILE.TXT -jf#

                        # | 格納時に記録されるパス名
                      ----+-------------------------------
                        0 | SUB/FILE.TXT
                        1 | /SUB/FILE.TXT
                        2 | A:/SUB/FILE.TXT

             例：\\VENUS\C\SUB\FILE.TXT  というネットワーク上のファイル
                 を次のコマンドにより格納した場合，

                a -x archive \\VENUS\C\SUB\FILE.TXT -jf#

                        # | 格納時に記録されるパス名
                      ----+-------------------------------
                        0 | SUB/FILE.TXT
                        1 | /SUB/FILE.TXT
                        2 | //VENUS/C/SUB/FILE.TXT

        jh[0|1]: Windows NT/95 専用のマークを書庫に付加  [-jh0]

          　通常，UNLHA32.DLL は， 書庫に OS マークとして MS-DOS  のものを
          付加しますが，このスイッチを指定すると，Windows NT/9x の場合にそ
          れぞれ専用のマークを付加するようになります。現在ではマークが正式
          決定していないので，使わないようにしてください。

        ji[0|1]: 短いファイル名で格納・展開  [-ji0]

          　通常，UNLHA32.DLL は長いファイル名のファイルについてはそのまま
          の名前で書庫に格納しますが，このスイッチを指定すると MS-DOS 形式
          の短い名前で書庫へ格納するようになります。 MS-DOS や Windows 3.1
          での展開を前提とする書庫を作成する場合は，このスイッチを使用する
          か，元のファイル自体を 8+3  の短いファイル名で作成するかのどちら
          かを行うようにしてください。

          　ただし，短いファイル名の使用には注意が必要です。一例をあげると，
          "long name file.txt" というファイルが，ある時点で "LONGNA~1.TXT"
          という名前で扱われたとしても，それはその時点での話であって，別の
          環境はおろか，同じ環境 (マシン) であっても，時を経るなど状況が変
          われば "LONGNA~1.TXT" で扱われるとは限りません。

          　従って，格納・展開時にかかわらず『ファイルの上書き』が予想され
          る場合には，最初から 8+3 の短い名前でファイルを作成すべきです。

          　UNLHA32.DLL Ver 1.40e 以降では， "-o" スイッチにより LHA/LHarc
          互換が指定された場合には，強制的に短い名前で格納が行われます。

        jm[0〜8|a|m]: 圧縮形式を指定  [-jm2]

          　格納の際に使用する圧縮形式を指定します。ARJ.EXE 等と異なり圧縮
          速度・圧縮率の区分にはなっていません。
          　UNLHA32.DLL では，圧縮アルゴリズムが LHA Ver 2.67 相当のものと
          なっているので，従来の圧縮法を使用した場合でも，圧縮速度・圧縮率
          共に多少向上しています。

          -jm0 : lh0 = 無圧縮保管。
          -jm1 : lh1 = LHarc 互換の圧縮法です。 速度・圧縮率の点で不利なこ
                       とが多いので， 今となっては使用する機会はあまりあり
                       ません。
          -jm2 : lh5 = LHA Ver 2.13 互換の圧縮法で，LH.EXE 2.00 以降で展開
                       が可能です。通常はこの形式で圧縮が行われます。
          -jm3 : lh6 = LHA Ver 2.6x 以降の版と互換の圧縮法です。lh5 より圧
                       縮率の良いことが多い形式です。LHA 2.5x 以降で展開が
                       可能です。
          -jm4 : lh7 = LHA Ver 2.6x，LHA32 で展開可能な圧縮法です。 lh6 よ
                       りさらに圧縮率の良いことが多い形式ですが， オリジナ
                       ルですら展開のみにしか対応していないので， 注意が必
                       要となります。
          -jm5 : lh2 = LH 1.9x 互換の圧縮法です。 lh1 と同じで大きなファイ
                       ルでは速度的に不利となるため， LH 1.9x 同様，サイズ
                       が 8K バイト以上のファイルでは，自動的に lh3 形式へ
                       切り替わります。
                       LH 1.9x で試験実装されただけの形式なので， 注意が必
                       要となります。
          -jm6 : lh3 = LH 1.9x 互換の圧縮法です。比較的 BMP 等との相性が良
                       く，そういったファイルでは lh6 よりも若干小さくなり
                       ますが，基本的には lh5 より若干劣る程度です。
                       LH 1.9x で試験実装されただけの形式なので， 注意が必
                       要となります。
          -jm7 : lzs = LArc 互換の圧縮法です。スライド辞書のみの 1 段ロケッ
                       トである点が災いして，比較的軽い処理である点がメリッ
                       トとなっていないのが実情です。
          -jm8 : lz5 = LArc 互換の圧縮法で，lzs の圧縮速度改善型と言える形
                       式です。 lzs 同様，辞書サイズが小さいため，lh5 等よ
                       りも遅くなってしまっているのですが， 本来は ARJ.EXE
                       のメソッド 4 形式 (高速圧縮・展開) に相当するもので
                       す。
          -jma :     = ファイルサイズ及び圧縮率によって lh0，lh1，lh4〜lh7
                       を選択して圧縮を行います。 ファイルによっては圧縮の
                       再試行が行われるため，処理がかなり遅くなります。LHA
                       の圧縮メソッドそのものがかなり限界に近づいているた
                       め，このスイッチによる改善はほとんど見込めません。
          -jmm :     = lh5 互換のメソッドを辞書サイズ  (ビット) で指定しま
                       す。指定可能な数値は以下のとおり：

                            12 (  4K) : lh4 形式を指定。本来ならば処理速度
                                        重視となりますが，辞書サイズ毎に行
                                        われる処理が増える分，僅かながら遅
                                        くなってしまっています。
                                        通常は  lh5 のメソッド ID が使用さ
                                        れるため，ソフトによっては問題の出
                                        る可能性があるので注意が必要となり
                                        ます。
                            13 (  8K) : lh5 形式を指定。
                            14 ( 16K) : lh6 形式  (ただし辞書サイズが半分)
                                        を指定。lh6 == 32K の決め打ちを行っ
                                        ているようなソフトでは問題の出る可
                                        能性があるので注意が必要となります。
                            15 ( 32K) : lh6 形式を指定。バランスが一番取れ
                                        ているのか，これが最速です。
                            16 ( 64K) : lh7 形式を指定。
                            17 (128K) : lhx 形式を指定。LHA 非互換なので，
                                        独自のメソッド ID となっています。
                                        これを lh8  形式として扱っているソ
                                        フトが存在するようです。
                            18 (256K) : lhx 形式を指定。LHA 非互換なので，
                                        独自のメソッド ID となっています。
                                        通常のファイルでは，この辺りが処理
                                        時間的に許せる範囲でしょう。
                            19 (512K) : lhx 形式を指定。LHA 非互換なので，
                                        独自のメソッド ID となっています。
                                        LHA のアルゴリズムは，圧縮効果の少
                                        ないファイルに対しては処理時間的に
                                        不利なので，mpg のようなファイルに
                                        は使用しないのが得策です。lh7 (16)
                                        以降では指数関数的に処理時間が増大
                                        します。

          　lh6 形式は LHA Ver 2.50 以降でないと展開が行えません。Win 版の
          ものは，最近ではかなり展開できるものが増えてきているようです。そ
          れに対して， lh7 形式は基本的に LHA Ver 2.63 以降か LHA32 でしか
          展開が行えません。LHA Ver 2.67 では仕方がないとはいえ，LHA32 Ver
          2.67.32.00 でさえ lh7 形式については展開のみが可能な状況なので，
          lh7 形式は扱わないようにしたほうが無難です。
          　なお， 公式 (LHA32 のドキュメント等) には lh6/lh7 形式で格納さ
          れた書庫の公開は禁止されています。同様に，lh2/lh3 形式については，
          LH Ver 1.9x で試験実装されただけのものなので，公開用には使用しな
          いようにお願いします。

          (追記)  2006 年現在，プラットフォームにかかわらず，結構 lh7 まで
                圧縮・展開可能なものが増えてきており， Windows XP までもが
                追加モジュールにより対応している状況となっていますが，やっ
                ぱり使用は控えるべきでしょう。

          　圧縮形式については，後述のメソッドの項も参照してください。

        jn[0|1]: 新規ファイルのみ  [-jn0]

          　'e' や 'x' 命令と共に使うと，対象ディレクトリーに存在しないファ
          イルのみを展開します。

          　'a' や 'm' 命令と共に使うと， 対象書庫に存在しないファイルのみ
          を追加します。

          　'd' や 'l' 命令と共に使うと，対象ディレクトリーに存在しないファ
          イルのみが扱われます。

        jo[b][<時間指定>]: 指定日時以降のファイルを処理

          　スイッチ "-jo"  自身は『今日書き換えられたファイル』の選択を意
          味します。 "-jo" に日付，さらに時間を付加すると， UNLHA32.DLL は
          その日付・時間以降に書き換えられたファイルのみを処理します。
          　日時の指定は YYMMDDHHMMSS の形式で行います。

              例：  e test -jo9001021700
                        1990-01-02 17:00 以降に書き換えられたファイルを選ぶ

          "80" より小さい年指定は 2000年 以降とみなします。

              例：  e test -jo01
                        2001 年以降に書き換えられたファイルを選ぶ

          冒頭に 'l' の文字を付加することで，YYYYMMDDHHMMSS の書式での指定
          が可能となります。

              例：  e test -jol19990217
                        1999-02-17 00:00 以降に書き換えられたファイルを選ぶ

          　スイッチ "-job" は『今日より前に書き換えられたファイル』を意味
          します。 "-job" に日付，さらに時間を付加すると，UNLHA32.DLL はそ
          の日付・時間より前に書き換えられたファイルのみを処理します。

          日付の範囲を指定するために　"-jo" と "-job" スイッチを同時に使う
          こともできます。これは特定の日付のファイルを選ぶのに役立ちます。
          ただし複数の組み合わせを指定することはできません。

              例：  e archive *.* -jo910101 -job910102
                1991-01-01 に書き換えられたファイルのみを展開

          "-jo" スイッチは，『ファイルリストに日時の条件を加える』性格のも
          のとなっていますので，ファイルリストで示されるファイルについて日
          時照合が行われます。従って，'a'，'u'，'f'，'m'  命令では格納する
          ファイルについて日時照合を行い，その他の命令時は格納されている
          ファイルについて日時照合を行います。

          [注意] : Ver 2.51a 以降では従来の制限が存在せず 2 秒単位に丸めら
                   れることがありません。が，SystemFileToFileTime() API に
                   ついて，本来なら無視される wDayOfWeek が，Windows NT
                   4.0 SP3/4 など， 整合性の取れていない値が設定されていた
                   場合にエラーを返すことのある環境が存在します。その場合，
                   UNLHA32.DLL は従来の DosDateTimeToFileTime() API による
                   変換を行います。 従って，年指定等の制限は以下のようにな
                   ります。

                        [通常]
                            ・年指定は 1752〜2399 が有効となります。範囲を
                              超えた場合は，  1752-09-14 00:00:00〜2399-12
                              -31 23:59:59 の範囲に丸められます。
                            ・通常，奇数秒が切り捨てられることはありません。

                        [SystemTimeToFileTime() API がエラーを返した場合]
                            ・この場合，DosDateTimeToFileTime() API が使用
                              されるため，指定された値が 1980-01-01 00:00:
                              00〜2107-12-31 23:59:58  の範囲へ追加的に丸
                              められます。
                            ・奇数秒が切り捨てられ 2 秒単位で扱われます。

        jp[0|1]: 進捗バーをプログレス・バーで表示  [-jp0]

          　通常 UNLHA32.DLL は，FV モードの場合のみ進捗バーの表示にプログ
          レス・バーを使用しますが，このスイッチを指定することで常にプログ
          レス・バーを使用するようにできます。反対に "-jp0" を指定すること
          で常に使用しないようにもできます。

        jr[0|1]: ファイルの置き換え  [-jr0]

          　'f' 命令と同じように新しいファイルで格納ファイルを置き換えます
          が，アーカイバーツールなどの『編集』の機能実現に便利なように仕様
          が特化されています。'a'，'u'，'m' 命令時に有効です。

          　次のように，基準ディレクトリーでファイルの場所を示し，ファイル
          指定で書庫内でのエントリ名を指定します。

              例：  u -jr archive C:\TMP\ WIN31\README.TXT
                書庫内の WIN31\README.TXT を  C:\TMP\README.TXT で置き換え
                る。

          　このスイッチを使用するよりも，ディレクトリー構造を復元して展開
          したものを編集するか  "-jb" スイッチを使用したほうが楽…という話
          もあります。(笑)

        js<フラグ>: 各種フラグの設定

          　このスイッチは，DLL の各種動作の設定を行います。

          　<フラグ> には以下のものがあります。

          a - 書き戻し後に削除  [-jsa0]
              通常，UNLHA32.DLL は書庫操作の際にオリジナルの書庫に上書きす
              る形で操作済み作業書庫の書き戻しを行いますが，このスイッチを
              オンにすると，書き戻しを行った後にオリジナルの書庫を削除する
              ようになります。書庫の存在するメディアやパーティションに十分
              な (概ね操作前と操作後の両書庫のサイズを加えた) 空き容量があ
              る場合には，このスイッチをオンにしたほうが安全性が高くなりま
              す。

          b - メッセージループを回さない  [-jsb0]
              通常，UNLHA32.DLL は処理を行っている間もメッセージループを回
              すようになっていますが，このことにより問題が出る，またはルー
              プを明示的に回さないように指定したい場合には，このスイッチを
              オンにすることでメッセージループを回さないようにすることがで
              きます。
              なお，このスイッチをオンにする場合は，処理状況表示ダイアログ
              を表示しないようにする必要があります。表示したとしても，ボタ
              ンを押しての処理中断が行えない等，環境によってはダイアログが
              一切のメッセージを受けつけなくなります (従ってダイアログの表
              示すら更新されない場合もあり得る)。

          c - 展開できなかったファイル数を返す  [-jsc0]
              通常， Unlha() は致命的なエラーが発生しなかった場合は 0 を返
              しますが，このスイッチをオンにすると，マッチしなかったりタイ
              ムスタンプチェックに引っかかったりして展開がスキップされたファ
              イルの数を返すようになります。

          d - 空き容量取得に失敗した場合の処理を指定  [-jsd0]
              API によるメディアの空き容量取得に失敗した場合の処理を指定し
              ます。

                  -jsd0 : 空き容量なしとみなします (省略値)
                  -jsd1 : 空き容量ありとみなします
                  -jsd2 : エラーとして処理を中断します

          e - 展開時の上書きオープン等をエラーとする  [-jse0]
              通常，UNLHA32.DLL は，すでに他のプログラムから使用されている
              ファイル等，展開時の上書きオープンに失敗した場合には，エラー
              とせずそのまま次のファイルの展開に移りますが，このスイッチを
              オンにすると，このような場合にエラーで処理を中断させることが
              できます。
              "-jse2" とするとさらにエラーが強化され，タイムスタンプチェッ
              クや存在チェックに掛かった場合 (ログで skip  表示されるもの)
              についても，処理を中断するようになります。"-jse2" スイッチは，
              単独でファイルを指定した上で，とにかく展開が行われなかった場
              合すべてをエラーとしたい場合に使用できます。反対に，通常行わ
              れる『複数のファイルを展開する』処理の際には， この  "-jse2"
              スイッチは使用しないほうがいいでしょう。

          f - タイムスタンプの補正を行う  [-jsf1]
              通常，UNLHA32.DLL はファイルシステムの仕様やシステムの制限等
              により正常に扱えない恐れのあるタイムスタンプが渡された場合に
              は，正常に扱えるデータへ補正するようになっていますが，このス
              イッチをオフにすると，補正を行わずエラーを返すようになります。
              補正については， NTFS とそれ以外でそれぞれ次のように処理され
              ます。

                [FILETIME メンバーの存在する h2 形式書庫]
                NTFS      : Sep.14,1752 00:00:00〜Dec.31,2099 23:59:58
                            　上限については，Win 9x 系での DosDateTimeTo-
                            FileTime() 等  DosDateTime を扱う API のバグ等
                            を考慮してのものとなっています。 Windows 2K 以
                            降の NT 系 OS では 2399 年までとなります。詳し
                            くは後述の『参考』を参照。
                            下限については，Ver 2.58 以降では， 英国での採
                            用暦切り替えを考慮して日付を連続して遡れる
                            Sep.14,1752 までとなっています。
                FAT       : Jan.1,1980 00:00:00〜Dec.31,2099 23:59:58
                            　上限については NTFS の場合と同じなので。以下，
                            上限についての説明は省略。
                            下限は単純に FAT ファイルシステムでの ftime の
                            下限である Jan.1,1980 00:00:00 を使用。

                [FILETIME メンバーの存在しない h2 形式書庫]
                NTFS      : Jan.1,1970 00:00:00〜Dec.31,2099 23:59:58
                            　書庫の情報が time_t によっているので，下限は
                            単純に time_t での下限を使用。
                FAT       : Jan.1,1980 00:00:00〜Dec.31,2099 23:59:58
                            下限は単純に FAT ファイルシステムでの ftime の
                            下限である Jan.1,1980 00:00:00 を使用。

                [h0/h1 形式書庫]
                NTFS/FAT  : Jan.1,1980 00:00:00〜Dec.31,2099 23:59:58
                            　書庫の情報が ftime によっているので， ファイ
                            ルシステムにかかわらず ftime  での丸めとなって
                            います。

              このスイッチについては， Ver 1.44 までと初期値が反対になって
              いますので，気をつけてください。

              　Ver 1.55c 以降では，このスイッチで ftime 形式の整合性チェッ
              クの有無も変更されます。 Feb.31,2003 26:13:02 といった不正な
              データが渡された場合，"-jsf1" では Feb.28,2003 23:13:02 とい
              う正常な値に補正した上で扱います。元のデータが単純な不正デー
              タであるのか， 時間計算等の結果としての『Feb.28,2003 の 3 日
              後』『時間が経っての深夜 26 時 (午前 2 時) という意味の  26:
              13:02』であるのかは判断できないので， UNLHA32.DLL は単純な補
              正しか行いません。

              (参考)
              　UNLHA32.DLL の行うタイムスタンプの『丸め』については，下限
              はともかく， 上限は Win 95 系での API のバグを考慮してのもの
              となっています。

              　Win 95 系では，今後はともかく現状では FAT ファイルシステム
              しか扱えません。従って，ファイルのタイムスタンプの管理は最終
              的には  FAT/MS-DOS でおなじみの ftime…つまりは  DosDateTime
              で行わざるを得ません。

              　しかし，Win 95 系においては  DosDateTimeToFileTime()  等の
              API が 2100/02/28 23:59:58 を超えると破綻します。

                 [Win 98SE]
                ========================================================
                  ftime : F05C0000 (time: 2100/02/28 00:00:00.000)
                  →FILETIME: 022F9EF713598000 (2100/02/28 00:00:00.000)

                  ftime : F0610000 (time: 2100/03/01 00:00:00.000)
                  →FILETIME: 022FA089682D0000 (2100/03/02 00:00:00.000)

                  ftime : FE210000 (time: 2107/12/31 00:00:00.000)
                  →FILETIME: 019EB43019A6C000 (1970/11/25 17:31:44.000)
                ========================================================

              　この問題は， 化け方はともかく Y2K 問題ならぬ 2100 年問題に
              他なりません。以前の版の Windows における 2000/02/29  問題へ
              の MS の解答は，少なくともこの部分に関しては『4 年毎の通常の
              処理しか行わない』というもののようです。(^^;; それだけなら良
              かったのですが， HISTORY.TXT にも記述のあるとおり， 内部的に
              UNIX 系でおなじみの time_t を使用していることから， その限界
              を超えた 2107/12/31 00:00:00 の変換結果は，ほぼ DWORD でのオー
              バーフローを反映したものとなっています。 わずか 1 年ほどの期
              間での問題といえますが，『詰め』をちゃんとやってもらいたいと
              ころです。その前の段階で転けているわけですが…。(^^;;
              　なお，この DosDateTimeToFileTime()  等の問題は NT には存在
              しません。

              　それとは別に， Win 95/NT 系双方に共通する問題として dir コ
              マンド等の不具合があります。

                 [NT 3.51 SP5]
                ========================================================
                 00/01/01  00:00                      6 21000101.TXT
                 00/02/28  00:00                      6 21000228.TXT
                 01/01/01  09:00                      6 21000301.TXT
                ========================================================

                 [Win 98SE]
                ==========================================================
                 20991231 TXT             6  99-12-31  23:59 20991231.TXT
                 21000101 TXT             6  99-01-01   0:00 21000101.TXT
                 21000228 TXT             6  99-02-28   0:00 21000228.TXT
                 21000301 TXT             6  99-02-29   0:00 21000301.TXT
                ==========================================================

              　このように NT には 2100 年問題が存在し，Win 系ではそもそも
              2099 年を超えるデータが扱えません。(^^;;  『枯れた部分 (要は
              古い)』だからこそ問題が出るのかもしれませんが， あまりにも基
              本的なコマンドであり『部分』でもあるので，非常に不安にさせる
              バグとなっています。

              　以上のようなシステムのバグから，UNLHA32.DLL においては，上
              限については上記の範囲での丸めを行うようになっていますが，
              NT 系では基本的に  (コマンド等での) 表示上の問題だけと思われ
              ることから， Ver 2.58 以降では Windows 2K 以降の NT 系 OS の
              場合のみ 2399 年まで扱えるようになっています。

              　下限については『そもそもそんなタイムスタンプのファイルが，
              (まともな状況において)  この先登場するはずがない』ということ
              で，特に考慮していなかったのですが，Ver 2.58 以降では， 英国
              での暦切り替えを考慮して，連続して日付を遡ることが可能である
              Sep.14,1752 までとなっています。

          g - 書庫の後ろに存在する余剰データを許可しない  [-jsg1]

              　通常， UNLHA32.DLL は他書庫に内包された LZH 書庫であると想
              定された場合は書庫として扱いませんが，そのようなものを正常な
              書庫として扱いたい場合には "-jsg0" を指定してください。

          l - 圧縮・格納ファイルの重複チェックを行わない  [-jsl0]
              　通常，UNLHA32.DLL は格納を行う際には，同じファイルが重複し
              て指定されていないかのチェックを行いますが，その反面，リスト
              指定に合致したファイル数に応じて，現状では指数関数的に検索処
              理に時間がかかるようになります。

              　このスイッチをオンにすると，重複チェックを行わなくなります
              ので，検索時間の増加は発生しなくなりますが，当然ながら同じファ
              イルが指定されれば重複して格納されてしまうことになります。重
              複指定が行われる心配のない場合に指定するとよいでしょう。

              　Ver 1.53f 以降では，検索処理の改善を行ったので，通常はこの
              スイッチを指定する必要はありません。十分な効果がみられた場合
              のみに指定するとよいでしょう。

          m - サウンドを使用する  [-jsm0]
              　このスイッチをオンにすると，エラーを含むメッセージボックス
              表示の際にシステムで設定されたサウンドを流すようになります。

          n - ヘッダ内のパス長不正の場合にエラー  [-jsn0]
              　このスイッチをオンにすると，ヘッダに記録されている格納ファ
              イルのパス及びファイルの長さと，実際の文字列に不整合があった
              場合にエラーを返すようになります。通常は警告ログを出力するの
              みです。

          o - SH_DENYNO でのオープンを行わない  [-jso0]
              通常，UNLHA32.DLL は格納を行う際には，当該ファイルについて読
              み込み許可での共有オープンを試み，不可能だったものについては
              書き込みについても許可した上で再度オープンを試みますが，この
              スイッチをオンにすると，読み込み許可で開けなかったファイルを
              エラーとして処理するようになります。

              (参考)
              　巷の Win32 用アプリは， コンパイラーのランタイムがそうなっ
              ていたことから， WIN386.SWP のようなシステムが常に読み書きを
              行っているようなファイルでさえ，『他プログラムからの読み書き
              を許可したまま』平気で開いてしまうものが意外と多いです  (Win
              95 系)。『開けてしまう』こと自体システムがズタボロなわけで
              すが，それでも適切な共有指定を行えば一応期待どおりの排他処理
              が行われるはずです…。

              　本来，マルチタスクである環境においては，書き込み時は無論，
              読み込み時においても『他プログラムからの書き込み』を禁止して
              開くのが基本  (レコード単位で排他処理を行っている場合を除く)
              のはずであり，UNLHA32.DLL の過去の版もそうなっていたところで
              す (もちろん，複数からの同時書き込みを考慮したプログラムなら
              話は別)。

              　しかし，あまりにも上記の『なんでもあり』の状況が浸透し過ぎ
              てしまったのか，私的なプログラムを作成しようとする日曜プログ
              ラマ，公的な業務プログラムを作成しようとする本職プログラマ，
              etc... という立場の違いにかかわらず『ルート配下のすべてのファ
              イルが扱えないか？』というような要望が多数寄せられました。

              　しばらくは上記の理由をあげて対応を拒否していたのですが，あ
              まりの要望数の多さに屈伏してしまい，はなはだ納得できないとこ
              ろですが，現在では UNLHA32.DLL においても "-jso0" …つまりは
              『なんでもあり』の状態が初期値となってしまっています。

              　しかしながら，このような『排他処理が全くなされていない』状
              況は不安定どころか『事故』の素でしかないはずなので，対応アプ
              リにおいては "-jso1" を指定すべきです。又は "-jso1" を指定す
              る機会をユーザに与えるべきであると考えます。

              　ちなみに，コンパイラーのランタイムは，読み書きを許可したま
              まファイルを開いている一方で，マルチスレッドに関するイベント
              の処理を施していたりします。  身内での同時処理に対応したとこ
              ろで，他人の好き放題を許したままファイルを開いていたのでは全
              く意味のないはずなのですが…。

              　なお，Windows 98SE 辺りでは， 上記の『なんでもあり』で開こ
              うとしても， WIN386.SWP を始めとして開けないファイルが多くなっ
              ています。本来開けるほうがおかしいわけなので，多少は (システ
              ム側の) 排他処理がまともになったということなのでしょう。

          p - 不正なパスを拒否  [-jsp1]
              LZH 書庫では，書庫の仕様として，パス情報に，上位ディレクト
              リーを示す ".." や，絶対パスを示す (パスの先頭の) "/" を含め
              ることが可能であるため，ユーザが想定していない箇所にファイル
              が展開される危険性の高いものとなってしまっています。このス
              イッチを使用することで，そのような危険性を回避することができ
              ます。

              指定は，"-jsp3" のように，拒否するパス情報の種類を表すフラグ
              を組み合わせた数値指定で行います。各フラグについては以下のと
              おり：

                        BPL_NORMAL              (0) :

                                通常モード。従来の仕様と同じで，ルートを越
                                えて遡るようなパス指定のみ不正となります。
                                このフラグを他のフラグと組み合わせることは
                                できません。

                        BPL_DENY_TOO_MANY_PARENTS  (1) :

                                基準ディレクトリーモード。基準ディレクト
                                リーを越えて遡るようなパス指定を不正とみな
                                します。

                                このスイッチを指定した場合は， "-jf2" 指定
                                で格納されたメンバーについても不正扱いとな
                                り，特殊変数が使用されたパスをもつメンバー
                                についても， (結果として) 不正となってしま
                                うので注意が必要です。

                                当然ながら，絶対パスで格納された書庫を展開
                                する際には，展開先としてルートディレクト
                                リーしか指定できなくなるので，この点につい
                                ても注意してください。

                                さらに，Ver 1.99c からは，拡張子の偽造が疑
                                わしい連続したスペース  (初期値は 8 個以上
                                で "-jts" スイッチにより連続数の変更が可能)
                                の挿入されたパスや名前をもつメンバーについ
                                ても不正扱いとなります。

                        BPL_DENY_ABS_PATH       (2) :

                                絶対パス拒否モード。絶対パスで格納されたメ
                                ンバをすべて不正とみなします。ルート記号を
                                取り除いて扱うわけではないので，相対パス扱
                                いとしたい場合には，明示的に "-jf0" の指定
                                を行ってください。

                        BPL_DENY_PARENTS        (4) :

                                親ディレクトリー拒否モード。 ".." のパス指
                                定が含まれるメンバーをすべて不正とみなしま
                                す。たとえ基準ディレクトリーを越えていなく
                                とも，不正となりますので注意してください。

                        BPL_DENY_EXECUTABLE     (8) ：

                                実行ファイル拒否モード。実行可能な (及びユー
                                ザが指定した拡張子をもつ) メンバーを不正と
                                みなします。 "-jtz" スイッチで対象となる拡
                                張子を指定できます。

                        BPL_DENY_CTRLCHARS      (16)：

                                制御文字拒否モード。   Zero Width No-Break
                                Space 等の  Unicode 制御文字が含まれる名前
                                を不正とみなします。Ver 2.40f 以降で指定が
                                可能です。

              Ver 1.90i と同様のレベル指定を行うフラグの組み合わせとして，
              以下のものが (マクロ) 定義されています：

                        BPL_DENY_LEVEL_0        (0) :

                                レベル 0 指定。BPL_NORMAL と同じです。

                        BPL_DENY_LEVEL_1        (1) :

                                レベル 1 指定。 基準ディレクトリーを越えて
                                遡るようなパス指定を不正とみなします。

                        BPL_DENY_LEVEL_2        (3) :

                                レベル 2 指定。BPL_DENY_LEVEL_1 までの
                                チェックに加えて，絶対パスで格納されたメン
                                バについても不正とみなすようになります。

                        BPL_DENY_LEVEL_3        (7) :

                                レベル 3 指定。BPL_DENY_LEVEL_2 までの
                                チェックに加えて， ".." のパスが含まれるメ
                                ンバについても，すべて不正とみなすようにな
                                ります。

              絶対パスで格納されているケースが，かなり多いことから，Ver 1.
              91b 以降では，絶対パスの格納ファイルを展開しようとした際に，
              (以降) 1: 相対パスとして扱う，2: (正常な) 絶対パスとして扱う，
              3: 不正パスとして扱う…の選択を行えるようになっています。

          s - 共有エラーの場合に処理を続行  [-jss0]
              通常，UNLHA32.DLL は共有オープンが認められていないファイルが
              存在すると処理を中断しますが，このスイッチをオンにすると，こ
              のような場合にも警告を表示した後，処理を継続するようになりま
              す。当然ながら，共有エラーとなったファイルについては処理が行
              われません。XCOPY32.EXE の "/C" スイッチみたいなものです。

          t - FILETIME 構造体ヘッダを格納  [-jst1]
              通常，UNLHA32.DLL は書庫に FILETIME 構造体によるタイムスタン
              プ情報を記録しますが，このスイッチをオフにするとこのヘッダを
              作成しないようになります。ただし，このスイッチをオフにした場
              合には，作成日付及び参照日付については書庫に格納されないので，
              それらの情報が失われることになります。(h3 では time_t の情報
              が別に存在する)

          v - 書庫操作後に書庫をチェック  [-jsv0]
              通常， UNLHA32.DLL は書庫操作の際に格納ファイルの CRC チェッ
              クを行いませんが，このスイッチをオンにすると，作業ファイルを
              書き戻す前に，作業ファイルに対して書庫のチェックを行うように
              なります。実際には，作業ファイルに対して UnlhaCheckArchive()
              を CHECKARCHIVE_FULLCRC で呼び出しています (もちろん，直接
              API を呼んでいるわけではなく，同様の処理という意味)。

          z - 小文字の拡張子を付加  [-jsz0]
              通常，UNLHA32.DLL は書庫の拡張子指定が省略された場合に，大文
              字の拡張子を付加しますが，このスイッチを指定すると小文字の拡
              張子が付加されるようになります。
              Windows 95 等の場合， 一旦指定された小文字の名前がシステムに
              よって保存されるために，大文字指定を行っても大文字とならない
              場合があるので注意してください。

          　スイッチの指定方法は，後述する "jy" スイッチと同じ方法 (反転動
          作) となっていますので注意してください。"-jsv1" のように，明示的
          にオン・オフの指定を行ったほうがよいでしょう。

        jt<フラグ>: 各種フラグの設定

          　このスイッチは，DLL の各種動作の設定を行います。"-js" スイッチ
          が破綻したため追加されたものです。

          　<フラグ> には以下のものがあります。

          b - バックアップモードを指定  [-jtb0]
              通常 UNLHA32.DLL は， ディレクトリーの情報取得等，最低限必要
              な箇所のみで FILE_FLAG_BACKUP_SEMANTICS フラグを指定してアク
              セスを行いますが，このスイッチをオンにすると，全ての箇所で当
              該フラグを指定してアクセスを行うようになります。バックアップ
              用途等の場合には指定しておいたほうがよいかもしれません。
              当然ですが，適切な権限等を取得した上で使用しないと意味があり
              ません。

              ARJ.EXE のような『バックアップメンバー』を作成するスイッチで
              はないので，注意してください。

          c - 指定したファイルのみ格納  [-jtc0]
              通常 UNLHA32.DLL は，'a' や 'u' 命令では，ファイル指定とマッ
              チしないものが書庫に格納されていた場合に，当該メンバーを書庫
              に残しますが，このスイッチをオンにすると，そのようなメンバー
              を書庫に残さないようになります。

              このスイッチは次のような操作に利用できます。

                例：  a -jtc archive C:\TMP\ *.TXT
                  (結果として) 書庫が存在していても上書きして新規作成し
                  た場合と同等になる。

                例：  u -jtc archive C:\TMP\ *.TXT
                  'f' 命令とは反対に， 指定ファイルを基準として書庫の更
                  新を行う。

          l<コードページ> - ヘッダのコードページを指定
              ヘッダに記録されているパス名やファイル名を，どのコードページ
              を基準として読み込み・記録するかを指定します。ここでの指定に
              かかわらず，コードページヘッダが存在すれば そのコードを，
              (ヘッダのものを含めて)  指定されたコードページが使用できない
              場合は  CP_ACP (0) が使用されます。 Windows 2000  等では CP_
              THREAD_ACP となります。

              UNLHA32.DLL 自体が指定されたコードページを基準として動作する
              ようになるわけではありませんので注意してください。ここで指定
              したコードページが適用されるのは，マルチバイト文字で記録され
              ているヘッダ上の情報を内部表現である Unicode  へ変換，もしく
              は内部表現からマルチバイト文字へ変換してヘッダに記録する際の
              MultiByteToWideChar() 等の API 使用時のみです。

                例：  e -jtl932 archive C:\TMP\ *.*
                  日本語環境で作成された書庫を正しく扱うためにコードページ
                  として 932 (ANSI/OEM - Japanese, Shift-JIS) を指定。

          p[<優先順位>] - 優先順位の指定
              優先順位を指定するものとして UnlhaSetPriority() API が存在し
              ますが， 全ての API の実行時ではなく，Unlha() API の実行時の
              みで事が足りる，Unlha() だけで指定を行いたい，Unlha() だけは
              他の API と異なる優先順位を指定したい， といった場合には，こ
              のスイッチを使用して優先順位の指定を行えます。

              UnlhaSetPriority() と基本的に同じ値の指定が可能で， 以下のも
              のとなります：

                THREAD_PRIORITY_HIGHEST         スレッド標準の相対優先順位
                        (2)                     より  2 ポイント高い優先順
                                                位を指定します。
                THREAD_PRIORITY_ABOVE_NORMAL    スレッド標準の相対優先順位
                        (1)                     より  1 ポイント高い優先順
                                                位を指定します。
                THREAD_PRIORITY_NORMAL          スレッド標準の相対優先順位
                        (0)                     を指定します。
                THREAD_PRIORITY_BELOW_NORMAL    スレッド標準の相対優先順位
                        (-1)                    より  1 ポイント低い優先順
                                                位を指定します。
                THREAD_PRIORITY_LOWEST          スレッド標準の相対優先順位
                        (-2)                    より  2 ポイント低い優先順
                                                位を指定します。
                THREAD_PRIORITY_IDLE            基本優先順位として  1 を指
                        (-15)                   定します。

          s[0|<文字数>] - スペース文字の連続数を指定  [-jts8]
              "-jsp" スイッチで BPL_DENY_TOO_MANY_PATH が指定された場合に，
              拡張子偽造と判断する基準となるスペース文字の連続数を指定しま
              す。 既定値は 8 文字 (8 文字以上スペースが連続していると偽造
              と判定) です。

                -jts0 : 連続数チェックを行わないように指定します。
                -jts  : 既定の連続数 (8 文字) を指定します。
                -jts<文字数>
                        指定した文字数以上が連続していた場合に，偽造と判断
                        するよう指定します。

          u[0|1|2] - Unicode 名ヘッダの扱いを指定  [-jtu1]
              UNLHA32.DLL Ver 2.39 以降で作成される， Unicode 名ヘッダの扱
              いを指定します。

                -jtu0 : Unicode 名ヘッダの作成を行わず，読み込みに際しても
                        無視します。
                -jtu1 : 当該コードページで表現できない文字を含んだ名前の場
                        合など， 必要な場合のみ Unicode 名ヘッダが作成され
                        ます。読み込みは常に行われます。この動作が既定とな
                        ります。
                -jtu2 : 常に Unicode 名ヘッダが作成され， 読み込みについて
                        も常に行われます。
                -jtu3 : 当該コードページで表現できない文字を含んだ名前の場
                        合など， 必要な場合のみ CP_UTF8 コードで基本ヘッダ
                        に記録します。Unicode 名ヘッダは作成されません。
                -jtu4 : 常に CP_UTF8 コードで基本ヘッダに記録されます。
                        -jtl スイッチを指定した場合とは， コードページヘッ
                        ダが存在しない際に動作が異なってきますので，注意が
                        必要となります：

                              -jtl65001 : CTF-8 と仮定してヘッダを読込
                              -jtu4     : 特に仮定は行われず CP_THREAD
                                          _ACP (CP_ACP) が使用される

              -jtu3，-jtu4 を指定した場合， コードページヘッダに対応してい
              ない環境では読み込めない書庫が作成される点に注意が必要となり
              ます。また，CP_UTF8 を使用できない Windows 95 等の環境では，
              それぞれ -jtu1，-jtu2 の指定と見なされます。

          z[0|1|<拡張子>] - 実行可能ファイルの指定  [-jtz1]
              "-jsp" スイッチで BPL_DENY_EXECUTABLE が指定された場合に，実
              行可能ファイルとして扱いたい拡張子を指定します。

                -jtz0 : すべてのファイルを通常ファイルとして扱います。
                -jtz1 : 既定の拡張子を指定します。実行可能ファイルとして扱
                        われる拡張子は以下のとおり：

                          AWK，BAT，COM，CPL，EXE，
                          INF，JS， MSC，MSI，PHP，
                          PL， REG，SCR，VBE，VBS

                -jtz<extension> :
                        "-jtz1" によらず，ユーザが実行可能として扱いたい拡
                        張子を直接指定します。既定の拡張子についてクリアさ
                        れる点に注意してください。
                        先頭に '.' を付けても付けなくても構いません。 拡張
                        子無しのファイルを指定するときには  "-jtz." としま
                        す。 "-z" スイッチと異なりワイルドカードは使用でき
                        ません。

          　スイッチの指定方法は，後述する "jy" スイッチと同じ方法 (反転動
          作) となっていますので注意してください。"-jsv1" のように，明示的
          にオン・オフの指定を行ったほうがよいでしょう。

        jw[j|e][0|1|2|3|4]: WinSFX/WinSFXM を作成  [-jw0]

          　このスイッチを  's' 命令や 'a'，'u' 等の書庫操作を伴う命令と共
          に使用することにより，Win 版自己解凍書庫を作成することができます。
          "-jw2"  を指定すると SFX 設定ダイアログが省略されます。 "-jw3"，
          "-jw4" を指定すると， WinSFXM が作成されます。

                -jw0 : DosSFX を作成
                -jw1 : WinSFX を作成。設定ダイアログによる設定が可能
                -jw2 : 設定ダイアログによる設定を省略して WinSFX を作成
                -jw3 : 設定ダイアログでの設定を行った上で WinSFXM を作
                       成
                -jw4 : 設定ダイアログによる設定を省略して WinSFXM を作
                       成

          　'j' 及び 'e' のサブスイッチを付加することで， 日本語・英語版の
          指定が行えます。付加されていない場合は，実行環境に従います (日本
          語環境以外では英語版を作成) 。

              例：  s archive -jwe3
                    英語版 WinSFXM を作成。

          　自己解凍書庫については後述の別項を参照してください。

        jx[<ファイル名>]: 除外するファイル名

          　このスイッチは，処理するファイル名の一覧から，除外するファイル
          名やワイルド名を指定するのに使います。

              例：  e archive soft\*.* -jx*.exe -jx*.obj -jxtest

          この例では，soft ディレクトリーの全ファイルの内，"test" の名前の
          ファイルと ".exe" と ".obj" の拡張子をもつファイルを除いたファイ
          ルを展開します。

          　"-jx" スイッチは，ファイル指定されたものから，子ディレクトリー
          を含む完全パスを除外することもできます。

              例：  a -xr1 archive C:\DIR\ SUBDIR\*.* -jxSUBDIR\WORK
                        SUBDIR\WORK 下のファイル等を除外

              例：  x -r1 archive C:\WORK\ *.* -jx\TMP\

          　圧縮時と異なり，展開時など格納ファイルが検索対象となる場合は，
          この例のように '\' 付きで指定するようにしてください。 そうしない
          と，"TMP/" 等セパレータが付加された名前をもつ lhd メンバーが除外
          されません。

          　除外ファイルの指定は，基本的にファイル指定で使っているものと同
          じレベルでの相対パスで指定する必要があることに気をつけて下さい。

              例：  e archive \tmp\*.* -jxC:\tmp\firstdir
                "C:" が付加されているために，この指定は無効

              例：  e archive \tmp\*.* -jx\tmp\firstdir
                あくまでもファイル指定と同じレベルで指定する必要がある

        jy[<フラグ>]: yes と仮定して質問を抑制

          　このスイッチは， 個々の UNLHA32.DLL の利用者への確認を抑制する
          のに使われます。

              例：  e archive -jy<flags>

          　<フラグ> は b,c,d,k,n,o を１つ以上含んだものです。各フラグが選
          ばれると，UNLHA32.DLL は抑制された質問に  yes と答えたが如く動作
          します。

          b - 不正パス警告の処理選択確認を省略
          c - ディレクトリー作成の確認を省略
          d - ファイル削除の確認を省略
          k - 使用できるディスク容量の確認の省略
          n - 新ファイル名の要求の省略
          o - 既存ファイルへの上書き確認の省略

          　個々の "jy" スイッチは，"-jyc -jyo" の様に分けて指定できます。
          "-jyc0" のようにスイッチを切る事もできます。

          　また，"jy" スイッチは "-jyc -jyc" とするとスイッチが交互に切り
          替わりますが，UNLHA32.DLL においてはスイッチの位置を考慮しないの
          で，実際問題として指定は意味をなしません。

        jz[<ファイル名>]: ファイル注釈のファイルを供給

          　"-jz" スイッチは，LZH 書庫の１つ以上のファイルに注釈を容易につ
          けるために用意されています。１つの注釈ファイルだけが指定できます。
          ファイルは，コマンドラインで指定された各格納ファイルの注釈に使わ
          れます。現在の仕様では， 0 byte のファイルを使用することでのみ，
          注釈の削除を行えます。

              例：  c archive file1 -jzcomment.txt

        ga[0|1|2]: 書き込み不可属性を無視  [-ga0]

          　通常 UNLHA32.DLL  は上書きするファイルがリードオンリーファイル
          の場合には確認の後展開を行いますが， "-ga1" を指定すると書き込み
          不可属性を無視して展開を行うようになります。 "-ga2" を指定すると
          展開をスキップするようになります。

                ga0 : 確認の上上書き展開
                ga1 : 無条件で展開
                ga2 : 展開をスキップ

          　このスイッチに関しては，本来なら "-ga2" が初期値となっていなけ
          ればならないのですが，UNLHA32.DLL のバグで "-ga0" が初期値となっ
          ています。互換性の関係で変更できず，そのままとなっています。

        gb[<ファイル名>]: ファイル・モードを指定

          　このスイッチを指定することで，通常指定できない名前をファイル名
          として指定できます。

              例：  a archive -gb-Test.txt
                "-Test.txt" を格納する。
              例：  n archive -gbd\
                lhd メンバーである "d/" を指定。通常 LHA では lhd メンバー
                のみの指定は不可。

          　上の lhd メンバー指定の例で解るように， 見方を変えれば『基準
          ディレクトリーの指定に "-gb" スイッチは使えない』ことになります。
          常にこの点に注意した上でこのスイッチを使用するようにしてください。

        gd[0|1]: 余分なデータの削除  [-gd0]

          　通常 UNLHA32.DLL は， 自己解凍書庫を始めとする，前後に余分なデー
          タが存在する書庫に対して書庫操作を行った場合，それらのデータを保
          存しますが，このスイッチを指定すると，それらのデータが削除される
          ようになります。

          　このスイッチを使用した場合，自己解凍書庫の展開ルーチンが削除さ
          れてしまうことに注意してください。反対に，このスイッチを利用して
          'j' 命令同様『自己解凍書庫→通常の書庫』の変換を行えます。

        ge[0|1]: 最初の拡張子を認識  [-ge0]

          　通常 UNLHA32.DLL は， 複数の拡張子をもつファイルの場合は最後の
          拡張子を認識しますが，このスイッチを指定すると最初の拡張子を認識
          するようになります。

        gf[0|1|2|3]: すでにある新しいファイルの更新  [-gf0]

          　このスイッチを指定すると，UNLHA32.DLL はより新しいファイルのみ
          を処理するようになります。

        gf2: すでにあるより古いファイルの更新

          　"gf" スイッチにおいて "-gf2" を指定すると， UNLHA32.DLL はより
          古いファイルのみを扱うようになります。

        gf3: すでにある異なるファイルの更新

          　"gf" スイッチにおいて "-gf3" を指定すると， UNLHA32.DLL はサイ
          ズやタイムスタンプの異なるファイルのみを扱うようになります。

          　"gf" スイッチは展開時に指定されるもので， 'f' 命令の逆の操作を
          行うためのスイッチです。各モードを整理すると，

                gf0 : 存在しないものを除くすべてのファイル
                gf1 : より新しいファイルのみ
                gf2 : より古いファイルのみ
                gf3 : タイムスタンプ及びサイズの異なるファイルのみ

          となります。 Ver 1.51 で "-gf0" の仕様が変更されている点に注意が
          必要です。現在の版では，暫定措置として，WinFM32，WinFM2K，WinLM-
          32 から呼ばれた場合には， 強制的に旧仕様の動作を行うようになって
          います (Ver 1.52a 以降)。

        gj[0|1]: x 命令を e 命令と同様と見なす  [-gj0]

          　通常 UNLHA32.DLL は 'x' 命令では書庫のディレクトリー情報に従っ
          てディレクトリーを再構築しますが，"-gj" スイッチを指定するとディ
          レクトリーの再構築を行わず単一ディレクトリーに展開するようになり
          ます。例えば "x -gj" は "e -m1" と等価になります。
          　このスイッチは指定が可能となっているだけで，あまり意味はありま
          せん。通常は "-x0" を指定することになるでしょう。

        gl[<ファイル名>]: ログをファイルに出力

          　このスイッチを指定することで，ログをファイルにも出力させること
          ができます。 Unicode 版の場合は冒頭に BOM (Byte Order Mark) が記
          入されます。

              例：  v archive -glLog.txt
                ログを Log.txt の名前でファイル出力。

        gm[0|1]: エラーメッセージ表示の抑止  [-gm0]

          　通常 UNLHA32.DLL  はエラーが発生するとエラーメッセージを表示し
          ますが，"-gm" スイッチを指定する事によりそれらのメッセージを抑止
          する事ができます。
          　このスイッチを指定した場合，各種確認メッセージも抑止されますの
          で，十分に注意して使用するようにしてください。

        gn[0|1|2]: 展開ファイルの合計サイズを 100% とした進捗グラフの表示
                   [-gn0]

          　通常，UNLHA32.DLL は個別のファイルごとに進捗グラフを表示します
          が，このスイッチを指定することにより展開及び格納するファイルの合
          計を 100% とした進捗グラフを表示することができます。 ただし，LZH
          形式書庫にインデックスの概念がないことから， 書庫を 2 度読みする
          ことになりますので，FDD 上の書庫や巨大な書庫においては処理に時間
          がかかります。そのため， 初期設定では FDD 上の書庫の場合はこのフ
          ラグに関係なく通常表示を行うようになっています。

          　"-gn2" とすると展開ファイル名とグラフだけの簡易表示となります。

        go[0|1]: ダイアログのオーナーウィンドウの指定  [-go0]

          　通常 UNLHA32.DLL は Unlha() 等で指定したウィンドウを親ウィンド
          ウとしてダイアログを表示しますが，このスイッチを指定すると，
          UnlhaSetOwnerWindow() で指定したウィンドウを親ウィンドウとしてダ
          イアログを表示するようになります。
          　ここでの指定にかかわらず，UNLHA32.DLL は Unlha() で指定したウィ
          ンドウを Disable とします。
          　Unlha() で指定したものとは別のウィンドウを特別に指定したい場合
          に使用してください。

        gp[0|1]: ウィンドウを Disable にしない  [-gp0]

          　通常 UNLHA32.DLL は  Unlha() で指定されたウィンドウを  Disable
          にしますが，"-gp0" スイッチを指定すると Disable されなくなります。
          アプリ側で明示的に処理したい場合に使用してください。

        gq[0|1]: ダイアログを前面に表示  [-gq0]

          　通常 UNLHA32.DLL は展開表示等のダイアログの表示の際に Z オーダ
          等を操作しませんが，このスイッチを指定すると SetForegroundWindow()
          を使用して前面に表示するようになります。これは Windows 95 等での
          ウィンドウが後ろに回り込んでしまう現象のために用意されたスイッチ
          なので，注意して使用するようにしてください。

        gr[<ファイル名>]: 変更ファイル名を供給

          　通常，'n' 命令時には UNLHA32.DLL  が変更するファイル名を聞いて
          きますが，このスイッチを指定することにより，コマンドラインから直
          接ファイル名を指定できます。格納ファイルの指定にワイルドカードを
          使った場合，マッチしたすべてのファイルが同じ名前に変更されてしま
          うので，注意を要します。 個別に変名を行いたい場合には  UnlhaSet-
          EnumMembersProc() を使用してください。

              例：  n archive file1 -grChangeName.TXT
                "file1" を "ChangeName.TXT" に変更する。

          　また，'s' 命令の際にこのスイッチを指定すると，ここで指定した名
          前で自己解凍書庫が作成されます。ただし，このスイッチで指定したパ
          スは無効で，あくまでも名前のみが使用されます。

              例：  s archive file1 C:\TMP\ -grMySFX
                C:\TMP\ に MySFX の名前で自己解凍書庫を作成する。

        gs[<サイズ>]: ヘッダ検索サイズの指定  [-gs-]

          　通常 UNLHA32.DLL  は書庫のヘッダが見つからない場合にはファイル
          の終わりまで検索を行いますが，このスイッチを指定すると，指定され
          たサイズでヘッダの検索を打ち切ります。

        gt[0|1]: 特殊ディレクトリー指定を解析  [-gt0]

          　通常，UNLHA32.DLL は WinSFX(32)M で使用される特殊ディレクトリー
          指定については無視して展開を行いますが，このスイッチを指定すると
          ディレクトリー指定を解析するようになります。特殊ディレクトリー指
          定については，自己解凍書庫の項目や INFCOM.TXT を参照してください。

        gu[0|1]: WinSFX，DosSFX にすべてのファイルを格納  [-gu0]

          　通常，WinSFX，DosSFX 作成時には， UNLHA32.DLL は MS-DOS で扱え
          ない名前をもつファイルについては自己解凍書庫への格納を行いません
          が，このスイッチを指定すると，すべてのファイルが格納されるように
          なります。

          　このスイッチを使用して作成された自己解凍書庫を実行して展開を行っ
          た場合，MS-DOS や Windows 3.1 上では削除できないファイルが作成さ
          れることがあるので，使用には十分注意してください。

        gw[j|e][0|1|2|3|4]: WinSFX32/WinSFX32M を作成

          　このスイッチを 's' 命令や 'a'， 'u' 等の書庫操作を伴う命令と共
          に使用することにより， NT 版自己解凍凍書庫を作成することができま
          す。"-gw2" を指定すると SFX 設定ダイアログが省略されます。"-gw3"，
          "-gw4" を指定すると， WinSFX32M が作成されます。

                -gw0 : DosSFX を作成
                -gw1 : WinSFX32 を作成。設定ダイアログによる設定が可能
                -gw2 : 設定ダイアログによる設定を省略して  WinSFX32 を
                       作成
                -gw3 : 設定ダイアログでの設定を行った上で WinSFX32M を
                       作成
                -gw4 : 設定ダイアログによる設定を省略して WinSFX32M を
                       作成

          　'j' 及び 'e' のサブスイッチを付加することで， 日本語・英語版の
          指定が行えます。付加されていない場合は，実行環境に従います (日本
          語環境以外では英語版を作成) 。
          　なお， Ver 1.54b 以降では WinSFX32(M) がバイリンガル化されてい
          るため，どちらの言語を指定しても同じものが作成されます。

              例：  s archive -gwe2
                    英語版 WinSFX32 を設定ダイアログを使用せずに作成

          　Ver 2.63 以降では Unicode 対応版である  WinSFX32U が作成されま
          すが，下位互換性を保つため (実行ファイルの情報を直接読み取ってい
          るアプリが存在します) ダイアログで入力した内容を ANSI へ変換した
          情報が WinSFX32U に書き込まれます。 Unicode 文字が必要な場合は，
          UTF-16LE (BOM 付き) で記述された $ ファイルを使用してください。

        gx<フラグ>: WinSFX(32) の省略値を指定

          　WinSFX 作成時の各種フラグを指定します。 ダイアログを表示する場
          合は，その初期値の指定となります。既存 SFX のデータよりも， この
          スイッチによる指定が優先されます。
          　UNLHA32.DLL Ver 1.87.2 以降では "-gy" スイッチを使用したほうが
          よいでしょう。

          　フラグは以下の値の組み合わせです。 後述の SFX の項目も参照して
          ください。

                SFXFLAG_AUTO             (1) : 自動実行する
                SFXFLAG_OVERWRITE        (2) : 上書き確認の抑制
                SFXFLAG_CHECKCRC         (4) : 改竄チェック
                SFXFLAG_CHECKTIME        (8) : タイムスタンプを無視
                SFXFLAG_ATTRIBUTE       (16) : 属性を展開
                SFXFLAG_NO_AUTO        (256) : 自動実行しない
                SFXFLAG_NO_OVERWRITE   (512) : 上書き確認する
                SFXFLAG_NO_CHECKCRC   (1024) : 改竄チェックしない
                SFXFLAG_NO_CHECKTIME  (2048) : タイムスタンプをチェック
                SFXFLAG_NO_ATTRIBUTE  (4096) : 属性を展開しない

        gy<サブスイッチ>: WinSFX(32) の各種パラメータを指定

          　WinSFX 作成時の各種パラメータを指定します。 ダイアログを表示す
          る場合は，その初期値。 表示しない場合は， ここで指定した値が SFX
          に設定されます。 既存の SFX のデータよりも，このスイッチによる指
          定が優先されます。

          　<サブスイッチ> には以下のものがあります。後述の SFX の項目も参
          照してください。

          a[0|1]: 属性を展開  [-gya1]

              通常 SFX は (ダイアログ等で設定されていなければ)，展開時に属
              性の設定を行いますが，"-gya0" を指定することで，属性の設定を
              行わないようになります。設定ダイアログの『属性を展開』に相当
              します。

          c[0|1]: タイムスタンプチェックの省略  [-gyc1]

              通常 SFX は (ダイアログ等で設定されていなければ)，タイムスタ
              ンプのチェックを行いますが，"-gyc0" を指定するとチェックを行
              わず古いタイムスタンプのファイルを展開するようになります。設
              定ダイアログの『古いファイルも更新』に相当します。

          d<ディレクトリー>: 展開先ディレクトリーを指定

              展開先を指定します。設定ダイアログの『初期表示展開先ディレク
              トリー』に相当します。

          e<コマンド文字列>: 実行コマンドを指定

              展開処理後に実行するコマンドを指定します。  設定ダイアログの
              『展開後実行コマンド』に相当します。

          o[0|1]: 自動上書きを指定(上書き確認を行わない)  [-gyo0]

              通常 SFX  は (ダイアログ等で設定されていなければ) 既存のファ
              イルが存在した場合に上書き確認を行いますが，"-gyo1" を指定す
              ると確認を行わずに自動上書きするようになります。設定ダイアロ
              グの『自動上書き』に相当します。

          q[0|1]: 自動実行を指定  [-gyq0]

              SFX を自動実行するかどうかを指定します。 "-gyq1" で SFX が自
              動実行されます。設定ダイアログの『自動実行』に相当します。

          s[0|1]: 改竄チェックを行う  [-gys0]

              書庫の改竄チェックを行うかどうかを指定します。"-gys1" でチェッ
              クを行います。設定ダイアログの『改竄チェック付き』に相当しま
              す。

          t<タイトル文字列>: 展開先ディレクトリー欄タイトルの設定

              SFX ダイアログの展開先ディレクトリー欄タイトルを設定します。
              設定ダイアログの『展開先ディレクトリー欄タイトル』に相当しま
              す。

          w<タイトル文字列>: ダイアログのタイトルの設定

              SFX ダイアログのウィンドウタイトルを設定します。設定ダイアロ
              グの『ウィンドウタイトル』に相当します。

          x[0|1]: パス情報によりディレクトリーを再構築  [-gyx0]

              展開時にパス情報によるディレクトリーの再構築を行うかどうかを
              指定します。"-gyx1" でディレクトリーが再構築されます。設定ダ
              イアログの『ディレクトリー付き』に相当します。 "-x" スイッチ
              でも指定が可能ですが，こちらの指定が優先されます。


%6 6.　基準ディレクトリーについて

  　UNLHA32.DLL Ver 0.37 からは LHA と同様に複数のディレクトリーに展開する
  ことが可能となっています。

  　基準ディレクトリーは，格納・展開するファイルのディレクトリーの取り扱い
  を，あたかもカレントディレクトリーを基準ディレクトリーで指定したものに変
  更してから処理を行ったかのような扱いとします。複数指定が可能で，新たな基
  準ディレクトリーが指定されるまで有効です。

     例：  e emelt017.exe c:\windows\system\ *.dll "c:\Program Files\" *.*
       DLL のみシステム・ディレクトリーに展開し，残りは c:\Program files
       に展開する

     例：  a archiver "c:\Program Files\" Plus!\*.* -x -r2
       c:\Program Files を基準ディレクトリーとして Plus! ディレクトリー
       以下のファイルを格納する。この場合，格納ファイルは
       "Plus!/SYSAGENT.EXE" のような名前となる。

  　基準ディレクトリーの有無に関らず，絶対パスで指定されたものについてはそ
  のまま絶対パスで扱われます。

     例：  a archiver "c:\Program Files\Plus!\*.*" -x -r2
       絶対パスで Plus! ディレクトリー以下のファイルを格納。格納ファイル
       は "/Program Files/Plus!/SYSAGENT.EXE" のようになる。

     格納例 : 次のディレクトリー構造を前提とする。属性については考慮してい
              ない。必要により "-a" スイッチを付加すること。

        c:\ +-  Root.TXT
            |   Root2.TXT
            +-  Dir1 -  File1.TXT
            |    +----  SubDir1 -  File2.TXT
            |    +----  SubDir2 -  File3.DOC
            |    |                 File1.TXT
            |    +----  SubDir3
            +-  Dir2 -  File4.TXT

        File2.TXT をパス無しで格納
                : a ARC.LZH C:\Dir1\SubDir1\File2.TXT
                  　絶対・相対，どちらの指定方法も可能。

        File2.TXT を Dir1 からの相対パスで格納
                : a ARC.LZH C:\Dir1\ SubDir1\File2.TXT -x
                  　相対パスで格納する場合は，パス情報としてのルートに当た
                  るディレクトリーを基準ディレクトリーとして指定。この場合
                  は SubDir1/File2.TXT として格納される。

        File2.TXT を絶対パスで格納
                : a ARC.LZH C:\Dir1\SubDir1\File2.TXT -x
                  　絶対パスの場合は基準ディレクトリーを指定しないで必ず
                  ルートからの全パスで指定を行う。

        Dir1 下のファイルをすべて格納
                : a ARC.LZH C:\Dir1\*.* -xr2
                  　この場合は『すべてのファイル』なので  C:\Dir1 でも可。
                  …というか，"-r2" を指定する以上そちらを使用すべき。(^^;)
                  指定方法から絶対パスでの格納であることが解る。絶対・相対
                  指定は上記のファイルの場合と同じなので省略する。
                  　『〜下のすべてのファイル』を指定する場合には基本的には
                  "-r2" スイッチで指定を行うこと。"-r1" スイッチでも結果は
                  同じであるが，指定の意味が異なっていることをしっかり認識
                  した上で使用すること。

        Dir1 下のすべてのテキストファイル (.TXT) を格納
                : a ARC.LZH C:\ Dir1\*.TXT -xr1
                  　『すべてのファイル』でない場合は，上記の場合とは反対に
                  必ず "-r1" スイッチを使用すること。"-r2" 指定では File1.
                  TXT  しかマッチしないことに注意。 この指定方法では Dir1/
                  File1.TXT のように格納される。

        Dir1 下のすべてのディレクトリー及びファイルを格納
                : a ARC.LZH C:\Dir1 -d
                  　Dir1 のディレクトリー情報を格納させるには  Dir1\*.* の
                  指定は不可。Dir1\*.* は『Dir1 上のファイル等』を表すので
                  あり，検索自体に Dir1 は含まれない。この指定では絶対パス
                  でパスが格納される。


%7 7.  レスポンスファイル

  　UNLHA32.DLL に渡せる文字列には限界がありますので，たくさんのファイルを
  一度に指定することができません。そのため，LHA と同様にレスポンスファイル
  が使えるようになっています。

  　UNLHA32.DLL はレスポンスファイルが指定された部分について，そのファイル
  内で指定された文字列と置き換えて認識します。ただし，レスポンスファイル内
  で別のレスポンスファイルを指定する『レスポンスファイルのネスト』は行えま
  せん。

  　レスポンスファイルの書式はコマンドラインと同じです。複数行に分けて書い
  ても構いません。その場合，改行文字はパラメータのセパレータとして機能しま
  す。1 行に書けるのは 2048 バイトまでです。

  　単純に置き換えが行われることから，ファイルのリストだけでなく，命令やス
  イッチを記述することもできます。

      例 :    a archive.lzh @response.tmp -x

                response.tmp が次の内容とした場合，
                ========================
                c:\tmp\
                "Test Data Dir"
                -r2
                ========================

        上記は以下の指定と等価になります。

              a archive.lzh c:\tmp\ "Test Data Dir" -r2 -x

  　レスポンスファイルに記入する際の文字コードは API に従う必要があります。
  Unicode 版 API であれば Unicode を，ANSI 版 API であれば UnlhaSetUnicode-
  Mode() API で指定したコード (CP_UTF8 又は ANSI) を使用してください。

  　Unicode 版の場合，通常はリトルエンディアン (UTF-16LE) で扱われますが，
  ファイルの冒頭に  BOM (Byte Order Mark) を記入することでバイトオーダを指
  定することも可能です。BOM が使用できるのは Ver 2.50 以降です。


%8 8.　ワイルドカードについて

  　LHA Ver 2.54  以降では拡張されたワイルドカードを使用してファイル名等を
  指定できますが，UNLHA32.DLL では拡張ワイルドカードは使用できませんのでご
  注意下さい。 Ver 1.04 からは '*' が '.' の文字にもマッチするようになって
  います。


%9 9.　ファイル数等の制限

    UNLHA32.DLL は，

           2048 レスポンスファイルでの 1 行の文字数
           2048 コメント(注釈)の文字数
            ※1 パラメータ数
            ※1 ワイルド名から得られるファイル名
            ※1 除外できるファイル名とワイルド名
            ※1 "-z" スイッチの拡張子名
                ※1 malloc() の限界，またはメモリーの限界まで

    　一つの書庫に格納できるファイル数には制限がありません。ただし，一度に
    書庫に追加できるファイル数は，上記の制限までとなります。また書庫，格納
    ファイル共に，通常最大 4GB (2GB) までのサイズ制限があります(LZH 書庫が
    32 ビットでサイズを扱っているため)。

    　格納の際には， UNLHA32.DLL はべらぼうにメモリーを消費します。 という
    のも，格納時には実際に格納対象となるファイルのリストを作成することにな
    るわけですが， このリストには (当然ながら)  そのファイルのパスとファイ
    ル名，格納時の名前，(パスとファイルの) 短い名前， etc といった情報が伴
    うこととなり，これが馬鹿にならないほどの領域を使用します。

    　例えば， 私が実験でよく使うのは『ローカルに再構築した WEB ページをま
    るごと絶対パスで格納する』というものですが， これはファイル数が 60,000
    個弱で，平均のパス長 (及びファイル名長) は 80 バイトほどになります。

    　これを格納すると，上記のリストだけでも 1 件が 300 バイトくらいの勘定
    となり，それが 60,000 個ですから，なんと 18MB 弱もメモリーを消費するこ
    とになります。ちなみに，この辺りはオリジナルの LHA でも同じで， 同じ処
    理を行わせると 5MB  ほど消費する勘定となり，メモリー不足でエラーとなっ
    たりします。

    　これらの情報の中には，実際に必要となる時点で情報を得ることが可能なも
    のもありますが，その都度得る方法では処理時間の増加が激しいことから，メ
    モリを犠牲にして事前に情報を作成する現在の方法を採っています。

    　リスト作成時の消費量は置いておいて，圧縮の際には lh5〜lh7 メソッドの
    場合で 320K〜400K バイトほど消費します。例えば，'f' 命令でファイルの更
    新・格納が行われると 325K バイトほどになります。もちろん，その都度解放
    が行われるわけですが，トータルにするとパッと見では大きな数字になってし
    まいます。 例えば，UNLHA32.DLL の必要最低限のソースを保存した書庫 (181
    個でトータル 5MB。書庫サイズは 1.7MB)  に対して 'f' 命令を実行して，す
    べてのファイルを更新すると，書庫チェックも有効にした場合，トータルだけ
    なら 75MB ほど使った勘定になります。 malloc() の実装がまずいと実害が出
    そうです。

    　これを上記の実験に当てはめて総トータルを計算すると計算したくもない数
    値が…。 もっとも，昨今の環境では  GB 単位のメモリーが実装されています
    ので，影響は少ないと思いますが…。


%a 10.　環境変数

  　a. LHA と LHARC

    　オリジナルの LHA が使用している環境変数ですが， UNLHA32.DLL では使用
    していません。設定ダイアログで多少の設定は可能です。

    b. TMP と TEMP

    　"-w" スイッチ (-w1 を除く)  で明示的に作業ディレクトリーが指定されて
    いない場合は，この環境変数で指定されたディレクトリーを作業ディレクト
    リーとして使用します。Ver 1.10 からはシステムに従わず UNLHA32.DLL 独自
    の仕様となっていて，次の順序で作業ディレクトリーを決定します。

      1 : -w<ディレクトリー> 又は -w0 が指定されていれば，そのディレクト
          リー。
      2 : TEMP が設定されていれば，そのディレクトリー。
      3 : TMP が設定されていれば，そのディレクトリー。
      4 : GetWindowsDirectory() で得たディレクトリー下に TEMP ディレクト
          リーを (なければ) 作成し，そのディレクトリーを使用。
      5 : ディレクトリーの作成が行えない場合は，4 で得たパスのルートを使
          用。
      6 : GetWindowsDirectory() がエラーだった場合はカレントディレクト
          リーを使用。

    上記でお分かりのように，カレントディレクトリーが使用されることがあるた
    め，CD-ROM 等読み込み専用デバイス上のファイルを扱った場合に， 作業ファ
    イルが作成できずにエラーとなることがあります。

    c. TZ

    　"-h2" スイッチを指定して作成された h2 形式の書庫を展開する場合には，
    この環境変数が設定されていないとタイムスタンプが狂います。 UNLHA32.DLL
    では，通常このヘッダ形式が使われますので必ず設定を行ってください。日本
    国内では，"set TZ=JST-9" を設定します。 本来は，この変数は Win32s の場
    合のみ必要で， Windows NT 及び Windows 95 ではシステムで設定されている
    タイムゾーンが使われるのですが，自己解凍書庫 (DosSFX，WinSFX) はこの環
    境変数を使いますし， そもそも (コマンドプロンプトを含む) MS-DOS 環境や
    Windows 3.1 のアプリでも同様ですから，必ず設定を行うようにしてください。
    　なお，"TZ=JST-09" としないとダメな環境もあるので注意してください。


%b 11.　作業ファイル名

  　Ver 1.90a から，GetTempFileName() API を使用するように変更されたことか
  ら，作業ファイルの命名規則についても変更されている点に注意してください。
  以前の LHTMPxxx.LZH というものにはなっていません。

  　LHTx.TMP  (x は GetTempFileName() API が作成するもので 1〜4 文字) の一
  意名のファイルが作成されます。以前と異なり x の部分が昇順とは限りません。
  このファイルが残骸として残っている場合は，内容の確認を行ってから削除した
  ほうが良いでしょう。

  　『作業ファイル』とはなっていますが，書庫そのものです。基本的には，本来
  削除されるはずのものが残骸として残っているわけですから，破損している可能
  性を考慮する必要があります。ただし，UNLHA32.DLL が事故により書庫を失わな
  いよう安全策として作業ファイルを残すことがあります。


%c 12.  UNLHA32.DLL が扱える書庫ヘッダ形式

    　UNLHA32.DLL は以下の書庫ヘッダ形式を扱えます。標準は h2 形式です。
    ヘッダの仕様については HEADER.TXT を参照してください。

      h0        Level 0 ヘッダ  (LHarc 互換)
      h1        Level 1 ヘッダ  (LHA 互換)
      h2        Level 2 ヘッダ  (LHA32 互換)
     (h3        Level 3 ヘッダ)

    　h0 (Level 0) ヘッダは LHarc で扱われていたヘッダ形式です。LHarc より
    少し前の LArc で使われていた形式に準拠しているため，パスを含めたファイ
    ル名が最大 64 文字までしか扱えないなど， 現在の Windows 等の環境用とし
    ては制限が大きい形式となってしまっています。 しかし， LHA で作成される
    DosSFX，それに WinSFX(M) がこの h0 形式を採用している関係上， 今でも現
    役の形式となっています。
    　海外起源のソフトでは，LHA を使用するものを除いて，この h0 形式しか扱
    えないものが意外と多いので注意が必要です。

    　h1 ヘッダは  h0→h2 移行への過渡的措置として用意されたヘッダ形式です
    が，LHA Ver 2.13 が長期間に渡って広く普及しているために， 事実上の標準
    ヘッダとなってしまっています。 Win32 環境が普通となり，次に説明する h2
    形式の書庫が増えてきたとはいえ，まだまだこの形式が多くを占めていますし，
    h0 と h1 のみに対応したものが意外と多く存在しています。
    　もともと過渡期用として h0 との互換性がある程度考慮されているのが幸い
    して，海外起源のソフトでも意外と問題なく (たまたま) 扱えるようです。

    　h2 ヘッダは本来なら LHA の標準形式となるはずだったヘッダ形式です。
    いえ，「なるはずだった」ではなくて， 昔も今も本当は こちらが標準なので
    す。h0/h1 形式との互換性が全くない代わりに，かなりの自由が許されている
    ものとなっています。
    　一番の違いはタイムスタンプの扱いです。 h0/h1 では MS-DOS  形式による
    ローカル時間となっているのに対して，h2 では UNIX 形式による UTC で扱わ
    れ，タイムゾーンが設定されていれば UTC←→ローカル時間の変換を行うよう
    になっています。反対に，その点が災いして差分ソフト等で問題の出ることも
    あるのですが…。
    　とは言うものの， ネットワーク等では UTC で扱われるほうが都合も良く，
    また， 長大なファイル名やパス名も扱えることなどから， 本家の LHA32 Ver
    2.67.32.00 を始め， Win32 環境用のものでは，多くが，この h2 形式ヘッダ
    で書庫を作成するようになっています。
    　上で言及したように， この形式は基本的に h0/h1 形式との互換性がありま
    せん。そのため海外起源のソフトでは，まともに扱えないのが実情です。たま
    たまヘッダの最初の部分が h0/h1 と同じようになっているのと， 比較的ヘッ
    ダ関係に対するチェックの緩いものが多いことから，辛うじて，それらしきも
    のが表示されているに過ぎません。 タイムスタンプが 0 表示されていたりす
    るのは これです。

    　h3 ヘッダは LHA Ver 3.0 が公開されれば採用されたであろうヘッダ形式で
    す。基本的に h2 ヘッダと同じ構成なのですが，ヘッダ自体のものを含め，サ
    イズがすべて 32 ビットで管理されることから， h2 ヘッダ用のルーチンでは
    全く読むことができなくなってしまっています (それどころか一般保護エラー
    となってしまうものが多い)。
    　h2 形式よりもさらに自由なヘッダの拡張が行え， 環境による差の吸収を図
    れるような仕様が予定されていたのですが，結果としては正式決定に至りませ
    んでした。マルチボリューム書庫も対応される予定だったのですが…。残念な
    がら格納ファイル等に関する情報が依然として 32 ビットで管理されているこ
    とから，4GB (2GB) 以上のサイズのファイルを格納することができない点は変
    わっていません。提案された時期を考えれば仕方のないところでしょう。
    　LHA OS/2 等， 一部のツールでは (試験的に) このヘッダ形式の書庫の作成
    が可能となっています。

    　ヘッダの仕様等，詳細については HEADER.TXT を参照してください。


%d 13.　UNLHA32.DLL が扱える圧縮形式

    　UNLHA32.DLL は以下の圧縮形式の格納・展開が可能です。圧縮アルゴリズム
    は基本的に LHA Ver 2.67 と同様のものとなっています。詳しくは，LHA のド
    キュメント， 公開されている LHA 2.11b/2.01 のソース，AR.EXE (AR950528)
    のソース等を参照してください。 NIFTYSERVE においては FLABO (ソフトウェ
    ア工房) で公開されていました。圧縮メソッドの技術情報としては，これらの
    中ではすべて  C で書かれている 2.01 のソースが，マクロ使用による条件コ
    ンパイル等も少なく参照しやすいのですが，現在では入手できません。実際に
    は LHa for UNIX や LHA OS/2 のソースを参照することになると思います。
    AR.EXE では LHA Ver 2.60  以降の新しいアルゴリズムについての情報が得ら
    れますが，こちらも入手が難しいと思われます。

    　実は，UNLHA32.DLL は LHx Ver 2.02a の下位ルーチンにそのまま AR950528
    のアルゴリズムを適用しているので，LHA 等とは異なったアルゴリズムになっ
    てしまっていたりします。(^^;;

        * は作成可能な圧縮形式

      lh0 *     no compression
      lh1 *     4k sliding dictionary(max 60 bytes) + dynamic Huffman
                  + fixed encoding of position
      lh2 *     8k sliding dictionary(max 256 bytes) + dynamic Huffman
      lh3 *     8k sliding dictionary(max 256 bytes) + static Huffman
      lh4 (*)   4k sliding dictionary(max 256 bytes) + static Huffman
                  + improved encoding of position and trees
      lh5 *     8k sliding dictionary(max 256 bytes) + static Huffman
                  + improved encoding of position and trees
      lh6 *     32k sliding dictionary(max 256 bytes) + static Huffman
                  + improved encoding of position and trees
      lh7 *     64k sliding dictionary(max 256 bytes) + static Huffman
                  + improved encoding of position and trees
      lzs *     2k sliding dictionary(max 17 bytes)
      lz4       no compression
      lz5 *     4k sliding dictionary(max 17 bytes)

    　lzs，lz4，lz5 形式は LArc で扱われていた圧縮形式です。lh1 以降と異な
    りスライド辞書 (LZSS 法) による圧縮のみの 1 段ロケット方式となっている
    のが特徴です。2 段目 (ハフマン法) が存在しない分軽い処理となっているわ
    けですが， (lh1 以降と比べて) 圧縮率が低いため出力される圧縮結果のサイ
    ズが大きく，その出力にかかるコストが高くつき， 却って lh5 辺りよりも時
    間の掛かるものとなってしまっているのが実情です。 lz5 は lzs をバイト単
    位で出力が可能なように高速化を図ったもので， LArc の標準形式となってい
    ます。辞書が 2K から 4K に拡張されていますが，むしろバイト単位で出力を
    行うためのもので (無駄なビット出力をなくすと，ちょうど 4K の辞書サイズ
    となる)，圧縮率に大きな違いはありません。 この lz5 では 8 バイト毎とい
    う小さなものではありますがブロック単位での出力が行われていて，以降常用
    されていくことになります (lh1/lh2 は適応型ハフマンなので例外)。 lz4 形
    式は無圧縮指定で lh0 と何ら変わりません。lzs/lz5 は 1 段ロケットである
    ことから，ある程度圧縮済みのファイルに対しては めっぽう弱く， 簡単に圧
    縮を失敗 (サイズが大きくなってしまう) してしまいますが，テキストファイ
    ルなどでは そこそこ圧縮してくれます。

    　lh1 形式は LHarc で扱われていた圧縮形式です。 その後のアーカイバーに
    大きく影響を与えたソフトであることから，比較的多くの (LHA 系) ソフトで
    扱えるようになっているもので，UNLHA32.DLL においても初期の頃から圧縮を
    行うことが可能となっています。 lh1 では lz5 と同様の 4K バイトの辞書を
    使った LZSS 法による圧縮結果 (ただし出力形式は異なります) に  2 段目の
    ハフマン法を適用する形態を採っていて，これが以後の形式の基礎となってい
    ます。LZSS  法の出力結果の内『文字・一致長』『一致位置』について別々に
    ハフマン法を適用していますが，lh1 では前者に適応型ハフマン (動的ハフマ
    ン) を使っているのが特徴です。符号表の出力を要しない分圧縮率は向上する
    のですが，展開時にもハフマンツリーの構築・更新を必要とし，相当時間を要
    してしまうのが難点です。そのため，後者の一致位置については事前に用意し
    た固定の符号表  (たった 7 バイト) による静的ハフマンを適用しているので
    すが，一致位置の情報全体について適用するのではなく，上位ビットだけにハ
    フマン法を適用し， 下位 6 ビットはそのまま出力するという工夫を行ってい
    ます。 この一致位置の出力方法は以降の lh2/lh3 形式に受け継がれていきま
    す。 lh1 は符号表を必要としない分圧縮効果は高いはずなのですが， 辞書が
    4K と小さいため，実際には圧縮率が比較的低くなってしまっています。 展開
    時にも処理時間を要することから，今となっては小さいファイルにしか適用す
    る機会がないかもしれません。

    　lh2 形式は LH 1.9x で試験的に実装された圧縮形式です。 lz5 等以上にお
    目に掛かる機会は少なく， 皆無といっても良い状況なのですが， LHA を含め
    LHA 系ソフトでは展開できるものが意外と多いです (lh3 も同様)。 lh1 の拡
    張版と言えるもので，辞書サイズを倍の 8K に拡張し，最大一致文字数も 256
    バイトへ大幅に引き上げられています。最大の特徴は『一致位置』についても
    適応型ハフマンを行っている点です。固定の符号表では却って圧縮率が下がる
    場合も多々あることから，圧縮率向上のために速度的なデメリットを押して採
    用されているわけですが，辞書サイズ拡張に伴う圧縮率の改善によるファイル
    出力処理のコスト低減効果が高く，ある程度圧縮が見込めるファイルでは，む
    しろ lh1 よりも速くなっています。lh2 では lh1 のルーチンをそのまま使用
    していることや，実験結果等から採用されたのか，一致長の出力が少々変則的
    なものとなっていたりするのですが，符号表を全く必要としない効果は高く，
    mpg のようなファイルでは lh5 と同程度に止まるものの， 通常のファイルで
    は lh7 と同等の圧縮が可能なものとなっています。 しかし，適応型ハフマン
    採用による処理時間の増大が避けられないため，オリジナルの LH 1.9x では，
    8K バイト未満のファイルのみに適用されるようになっています (UNLHA32.DLL
    も同様)。

    　lh3 形式も LH 1.9x で試験的に実装された圧縮形式です。 lh2 では適応型
    ハフマン採用による処理時間の増大がネックとなっていたため，lh3 では静的
    ハフマンに変更されています。ただ，ファイル全体について一律にハフマン法
    を適用するのではなく，LZSS 法の出力結果を 64K バイトの中間バッファへ蓄
    積し，バッファが満杯になったところでハフマン法を適用する方法を採ってい
    て，こうすることで，ファイルの内容の変化にも，ある程度追随できるように
    工夫されています。静的ハフマンを採用していることから，符号表の出力が必
    要となるわけですが， lh5 と異なり lh3 では符号表を直接出力しています。
    この内『文字・一致長』については lh2 を静的ハフマンに変更したものとなっ
    ていますが，『一致位置』については，符号表を作成した場合よりもサイズが
    小さくなる場合には，lh1 と同様の固定符号表 (の 8K 辞書対応版) を使用す
    るといった工夫が行われています。lh3 は符号表を直接出力しているにも拘わ
    らず意外と圧縮率が高く，展開ルーチンから逆算しただけの一捻りの足りない
    UNLHA32.DLL の圧縮ルーチンではオリジナルよりも圧縮率が少々低いのですが，
    それでも lh2 に近い圧縮率を叩き出しています。圧縮速度も lh5/lh6 よりも
    僅かながら高いので，lh5 よりも有用なくらいです。

    　lh4 形式は  lh4 のメソッド ID をもった格納ファイルとしては通常作成さ
    れませんが，辞書サイズが縮小された場合，または辞書サイズを明示的に指定
    した場合には，lh5 の ID で作成されます。これは LHA Ver 2.50 以降と同じ
    仕様です。LH Ver 2.00〜LHA Ver 2.14 では，空きメモリーが少なく 4K まで
    辞書サイズが縮小された場合に， この lh4 の ID で格納が行われ，UNLHA32.
    DLL でも "-o" スイッチにより Ver 2.13 互換を指定した場合には lh4 の ID
    が使われます。lh4 は 4K の辞書であることから比較的圧縮率が低く，さらに，
    lh5 の ID が使用された場合には， ID によりバッファ等のサイズを決め打ち
    している一部のソフトで正しく扱われなくなる恐れがあります。従って，わざ
    わざ lh4 形式を指定することは避けたほうが得策です。

    　lh5〜lh7 形式は LHA で扱われている現在主流の圧縮形式です。lh4 を含め，
    これらの形式はスライド辞書のサイズの違いだけで圧縮メソッド自体は基本的
    に同じです。 が，ハフマン符号表作成時のパラメータが異なるため，lh4/lh5
    と lh6/lh7 を全く同じルーチンで扱うことは出来ません。 lh5 は LH Ver 2.
    00〜LHA Ver 2.55 及び  LHA32 Ver 2.67.32.00 での標準形式です。 LHA Ver
    2.60 以降では lh6 が標準となっています。 lh7 は本家である LHA では作成
    が行えません。lh6 は LHA Ver 2.50 以降，lh7 は LHA Ver 2.60 以降で展開
    が行えます。lh3 では lh2 の仕様を引きずった部分が存在していましたので，
    そういった点を含めて lh5 では再設計が行われています。 まず，『文字・一
    致長』については，『文字 (0〜255) + 一致長 (3〜256)』の 510 のコードに
    対してハフマン法を適用する，本来の素直な仕様に変更されています。次に，
    『一致位置』については，一致位置のビット長 (256 なら 8) についての情報
    をハフマン圧縮し，最上位ビットを除いた残りのビットを，そのまま出力する
    …といったものに変更されています。ちなみに，この方法は比較的一致位置が
    近くなる小さい辞書の場合には効果が高いので，lh5 形式等で採用されたわけ
    ですが，辞書サイズが大きくなると反対にネックとなってしまうため，辞書サ
    イズを増やすことによる圧縮率の向上が図り辛いものとなってしまっています。
    lh5 ではハフマン法で必要となる符号表の出力についても改良が行われ， lh3
    で直接出力していた符号表を，簡易圧縮した上でさらに再度ハフマン圧縮を行っ
    てから出力を行うようになっています。これにより固定符号表への切り替えを
    行う必要が無くなっています。lh5 では 16K と， lh3 に比べて縮小された中
    間バッファを使用していたのですが，LHA Ver 2.63 で 32K に拡張されていま
    す。UNLHA32.DLL では変更も可能となっていることから， 既定値は 16K のま
    まとなっています。

    　LZSS 法 (スライド辞書) での最長一致文字列の検索については， 当初は二
    分探索木を使用していましたが， LH Ver 2.0 において Trie を使用すること
    により高速化が行われ，さらに LHA Ver 2.60 以降ではハッシュを使用するこ
    とにより，かなりの高速化が図られています。UNLHA32.DLL もハッシュを使用
    しています。

    　LHA では，空きメモリー状況に応じて辞書のサイズをコントロールすること
    から，ID と辞書サイズが一致するとは限りません。それぞれ lh5 では 4K <=
    x <= 8K，lh6 では 8K < x <= 32K， lh7 では 32K < x <= 64K といった範囲
    の辞書が使用されます。メソッド ID からの圧縮形式 (辞書サイズ) の決め打
    ちは行わないほうが得策です。


%e  A. lh6/lh7/lh2/lh3/lhx 形式について

    　UNLHA32.DLL で扱える (圧縮可能な) 圧縮形式の中には，LHA で正式対応し
    ていないものや UNLHA32.DLL 独自の形式が存在しますので， 使用に注意が必
    要となります。

    lh6/lh7 : 　Windows 用以外のソフトを含めて， 近年では lh6 形式を扱える
              ものが随分増えてきており，環境的には比較的気軽に使用が可能な
              状況となっています。また，lh7 形式についても日本語版 Windows
              XP が拡張モジュールで対応するなど， 以前に比べて使用しやすく
              なっています。が，オリジナルである LHA においては，(LHA32 の
              ドキュメント等で) 公開用の書庫への lh6/lh7  形式の使用が実質
              禁止 (使用自粛依頼) されたままとなっています。

              　ちなみに，オリジナルである LHA では，lh6 について Ver 2.5x
              で展開に対応し Ver 2.6x で圧縮ルーチンが試験的に実装されてい
              ます。これに対して lh7 については (LHA でさえ) Ver 2.6x で展
              開ルーチンが実装されただけに留まっています。両形式とも正式対
              応には至っていません。 さらに，一般的には lh6/lh7 形式が，そ
              れぞれ 32K/64K のスライド辞書を使用すると解釈されていますが，
              展開ルーチンが実装された Ver 2.5x の頃には区別されていず，ま
              た，圧縮ルーチンが実装された Ver 2.6x でも明確に規定されるに
              は至っていません。そのため，DJLHA の配布書庫のように『lh6 の
              ID で lh7 形式による圧縮が行われている』といった書庫が若干な
              がら存在し，今でも混乱のみられるのが実情です。

              　従って，公開目的の書庫では，lh6 形式については (SFX ルーチ
              ンのテスト目的と推察されるもののオリジナルが  lh6 形式で配布
              されていることから) 自己解凍書庫のみへの使用に止め，lh7 形式
              については使用を控えるようにしたほうが良いと思われます。

    lh2/lh3 : 　これらの形式は LH.EXE Ver 1.9x で試験的に採用されたもので，
              公開されていた (LHx Ver 2.02a 等) オリジナルのソースを流用し
              た極一部のソフトで展開が行えるだけで，気軽に使用できる形式で
              はありません。また，公開用の書庫への使用が明確に禁止されてい
              ます。

    lhx     : 　この形式は UNLHA32.DLL 独自の形式です。 メソッド的には lh4
              〜lh7 形式と同じもので，スライド辞書のサイズが異なるだけのも
              のですが，実験用に実装を行ったもので，他のソフトでは一切扱え
              ません。 実装から 5 年程度経過しており個人的に使用している方
              もあるようなので，ルーチンの削除は行いませんが，公開用の書庫
              への使用は行わないでください。


%f  B. 圧縮アルゴリズムとスライド辞書サイズの関係についての考察

    　LHA のソースを見ると解ると思いますが，lh1〜lh7 については  LZ77 の一
    形式である LZH 法 (LZSS + Huffman) のバリエーションとなっています。lh1
    /lh2 が適応型ハフマンを利用しているのに対して， lh3 以降では静的ハフマ
    ン (ただし，一定サイズ毎で分けることによりコードの変化にも対応できるよ
    うになっている) を利用することにより，処理速度の重視を図っていますが，
    現在主流となっている  lh4/lh5 では各種の改良を施し圧縮率についても向上
    が図られ，lh6/lh7 形式 (LHA Ver 2.6x) では gzip 等でも利用されているハッ
    シュを利用した検索法を適用することで，高速化とスライド辞書のサイズ増加
    に伴う検索速度低下の抑制に成功しています。

    　基本的に，lh6/lh7 形式に対応したプログラムにおいては，参考資料となっ
    ているであろう AR950528 を反映して，lh4/lh5 を含めて，このハッシュ法を
    利用したアルゴリズムを採用しているものと思われます。が，一部のプログラ
    ムでは，以前からのトライを利用したアルゴリズムをそのまま利用しているよ
    うです。

    　さて，LHA を含めて多くのアーカイバー関係のプログラム (ただし，比較的
    古典的なもの ^^;) においては，この LZH 法の基底のアルゴリズムである
    LZSS 法におけるスライド辞書のサイズを変化させることにより， 圧縮率及び
    圧縮速度の基本設定を行っています。

    　UNLHA32.DLL (LHA) においてもサイズの変更を行っているわけですが，最小
    の lh4 (4K) から最大の lh7 (64K) まで， 総じて比較的小さいものとなって
    いるために，圧縮率の変化が少なく，速度においても，特にハッシュを利用し
    たアルゴリズムを採用したプログラムにおいては，殆ど差が表面化しない状況
    となっています。

    　LZ77 においては， 基本的にスライド辞書が大きいほど圧縮率の向上が見込
    まれることから，辞書のサイズを大きくすることは，圧縮速度とメモリーの問
    題さえクリアできるのであれば，有効な手段となります。

    　が，lh4〜lh7 形式のアルゴリズムを採用する限り， これ以上スライド辞書
    を大きくしても，多くの場合において圧縮率の向上はおろか低下を招くだけと
    なります。

    　先に書いたとおり，lh4〜lh7 では LZH 法を採っているわけですが，オリジ
    ナル (LZH 法) のように LZSS 法の結果得られたコードに対して一律にハフマ
    ン法を適用しているわけではありません。

    　lh4〜lh7 においては，LZSS 法の結果のうち，『文字，一致長』と『一致位
    置』に対して，別々にハフマン法を適用しています。が，後者については，実
    際には一致位置の 2  進数表現のビット長についてのみハフマン法を適用し，
    一致位置の残りのビット列については，そのまま出力を行っています。スライ
    ド辞書が小さい場合は，当然ながら比較的近い位置ばかりとなり，結果，一致
    位置の情報量が非常に少なく済むわけです。例えば，一致位置が 0x0007 なら，
    ハフマンコードであれば下手をすると 30 ビット以上になる可能性があるのに
    対して，lh5 等であれば最悪でも 10 ビット程度で済むわけです。

    　これにより lh4/lh5  形式では確かに圧縮効果が上がっていたわけですが，
    少し考えれば判るように，スライド辞書が大きくなると，この効果が全くなく
    なってしまいます。例として，とある 1400x1050x256 の BMP を圧縮した場合
    を上げると，

          オリジナル              : 1,471,078
          lh7 (64K の辞書) で圧縮 :   635,721  (43.2%)
          512K の辞書で圧縮       :   638,251  (43.4%)
          CAB (lzx 21 で圧縮)     :   575,524  (39.1%)

    と，圧縮効率が下がってしまっています。 この例では， 一致回数は約 20 万
    回となっています。そのうち一致位置が 16 ビットを超えるのは 75,000 回程
    度であり，この 16 ビットを超えるものだけで一致位置の情報として 150K バ
    イト程度を占めてしまっていることになります。ここまでくると，ハフマン法
    なり何らかの方法を素直に適用したほうが圧縮率が向上します (ちなみにハフ
    マン法を適用すると 40.7%。これは，たまたま好結果をもたらしたもの。通常
    は成績がもっと悪い)。

    　しかし，比較的近い一致位置の頻度が高いファイル (NIFTY のログ) だと，

          オリジナル              :   566,955
          lh7 (64K の辞書) で圧縮 :   193,756  (34.2%)
          512K の辞書で圧縮       :   187,102  (33.0%)
          CAB (lzx 21 で圧縮)     :   183,336  (32.3%)

    と，それなりにスライド辞書のサイズを反映した結果が得られます。が，圧縮
    率が改善されることは少ないのが事実です。

    　実行ファイル (LHUT.EXE) だと，

          オリジナル              : 1,343,488
          lh7 (64K の辞書) で圧縮 :   434,812  (32.4%)
          512K の辞書で圧縮       :   432,766  (32.2%)
          CAB (lzx 21 で圧縮)     :   350,297  (26.1%)

    と，殆ど変わりがなく，無理をして互換性のない圧縮形式を採る理由がありま
    せん。

    　以上の例では 512K のスライド辞書との比較となっていますが，lh4 (4K の
    辞書) と lh7 (64K の辞書) 等でも状況は同じで，一致位置のビット長の増加
    による圧縮効率低下が表面化していないだけの話であり，反対に，だからこそ
    LHA が先に説明した方法を採用しているわけです。

    　この辺りの事情を反映して，UNLHA32.DLL においては，全般的に辞書が小さ
    い点を抜きにしても， lh4→lh7 において期待したほどの圧縮率の向上が見ら
    れない結果となっており，さらなるスライド辞書の拡大による圧縮率の向上も，
    あまり見込めません。

    　lh4〜lh7 のアルゴリズムを採用する限り， スライド辞書のサイズとしては
    lh7 の 64K が限度です。実験では 128K では，すでに低下することが多くなっ
    ています。 基本的には 128K 以上のスライド辞書を採用するのであれば， 別
    のアルゴリズムを採用するのが得策です。


%g 12.　自己解凍書庫(SFX)

  　自己解凍書庫(SFX) とは，自分自身を実行することによって書庫内のファイル
  を展開・再現する機能をもった書庫のことです。LHA の配付ファイルや UNLHA32.
  DLL の配付ファイルも SFX となっています。 UNLHA32.DLL では "-x" や "-jw"
  スイッチ等により，5 種類の SFX を選択することができます。

  　UNLHA32.DLL Ver 1.96a 以降では， "-jw"，"-gw" スイッチを使用して，直接
  自己解凍書庫を作成することが可能となっています。 (本家を含めて) それより
  前の版においては， 直接自己解凍書庫を作成することはできません。 作成は適
  切な書庫を 's' 命令によって自己解凍書庫に変換することで行います。

  　後述する WinSFX32U 以外の自己解凍書庫が Unicode 名に対応していない点に
  注意してください。Unicode 名をもつメンバーについては，当該メンバーの
  ANSI 名情報に従います。


%h  A. "-x0" で作成した SMALL 版 DosSFX

    　SMALL 版 DosSFX はもっとも基本的な SFX です。 機能は制限されています
    が，展開ルーチンが数百バイトと大変小さいものとなっています。 DosSFX で
    は以下の機能が使用できます。

    (1) テロップ機能

    　ファイル名が「!」であるファイルを自己解凍書庫内に見つけると， そのフ
    ァイルの展開した内容を画面に表示します。表示終了後，[Y/N] と表示して一
    旦停止しますので， ここでキーボードから「Y」を入力すると以降の動作を継
    続します。ここで「N」を入力すると，そこで処理を中止します。 なお，「!」
    のファイルを見つけるまでは展開作業が行われてしまうので， 「!」のファイ
    ルが書庫の最初に格納されるようにして下さい。LHA のドキュメントには書い
    てありませんが，LHA で作成された SFX でも同じ仕様のようです。

    (2) 展開先ディレクトリーの指定

    　SFX 実行時，コマンドラインに展開したいディレクトリーを直接入力するこ
    とによって指定します。 例えば，LHA Ver 2.13 の配付ファイルの場合には，
    LHA213 C:\USR とすることにより  C:\USR\ というディレクトリー上にファイ
    ルを展開します。DosSFX と WinSFXM/WinSFX32M のみで使用できます。
    　これとは別に，DosSFX 以外では SFX 作成時に展開先ディレクトリーの初期
    値の設定が行えます。

    　SMALL 版においてはディレクトリーの復元機能がありません。従って，元の
    書庫にパス情報が含まれていたとしても，SFX の変換の際にパス情報が失われ
    ます。

%i  B. "-x1" で作成した LARGE 版 DosSFX

    　SMALL 版 DosSFX のものも含めて DosSFX でのすべての機能が使えます。そ
    の分ルーチンは大きいものとなっていますが，気にするほどの増加ではないた
    め，通常はこちらの SFX が作成されます。

    　SMALL 版と異なり，元になる書庫がパス情報を含んでいれば，SFX 展開時に
    ディレクトリー構造を復元されます。パス情報を無視させたい場合は，SFX 実
    行時に "-x" スイッチを指定します。

    　SMALL 版に加わった機能は次のとおりです。

    (1) 起動時コマンドラインスイッチ

    　SMALL 版と異なり，LARGE 版ではコマンドラインスイッチを指定することが
    できます。書式は次のとおりです。

        SFX.EXE [-x] [-!] [-a] [DIR]

          -x  : ディレクトリー展開の抑制
          -!  : 自動実行
          -a  : 属性の復元
          DIR : 展開先ディレクトリーの指定

    　"-!" や "-a" スイッチについては， 指定しない限り SFX が !.BAT を実行
    したり属性の復元を行ったりしない点に注意してください。

    (2) 自動実行機能

    　コマンドラインに "-!" スイッチを指定すると，展開終了後，書庫から展開
    した「!.BAT」を実行します。「!.BAT」は展開先ディレクトリーが指定されて
    いても，常にカレントディレクトリーに展開されます。また，既にカレント
    ディレクトリーに「!.BAT」がが存在する場合には上書きされます。また，
    「!.BAT」が書庫内にないときには，既に「!.BAT」というファイルがカレント
    ディレクトリーに存在していても自動実行機能は働きません。

    　.BAT のファイルであることから， 記述内容は MS-DOS のバッチファイルの
    ものとなります。

    　これら MS-DOS 版 SFX は基本的に  LHA Ver 2.67 で作成されるものと同等
    のものです (LHA Ver 2.67 付属の SFX ソースを  OPTASM 1.60 でアセンブル
    したもの)。

%j  C. "-jw" で作成した Windows 3.1 版 WinSFX

    　Windows 版 の SFXです。MS-DOS 上では実行できません。基本的に LARGE版
    SFX と同じで，すべての機能が使用できます。 ただし，機能の設定は SFX 実
    行時に行うのではなく， SFX の作成時に行います。 テロップ機能については
    MS-DOS 版と同じく「!」のファイルを使います。なお，作成される SFX は
    ｍＨ氏の「ファイルマネージャ拡張メニュー Ver 2.45」で作成される SFX と
    同等のものです。作成時に "-x" スイッチでディレクトリー情報を保存するか
    否かを指定できます。

    　作成時における設定ダイアログで指定できる項目は次のとおりです。

    (1) ウィンドウタイトル

      　SFX 実行時に表示される展開先ディレクトリー指定ダイアログのタイトル
      を設定します。'\0' を含めて 41 バイトまで指定できます。

    (2) 展開先ディレクトリータイトル

      　展開先ディレクトリー指定ダイアログのエディトボックスの項目タイトル
      を指定します。'\0' を含めて 41 バイトまで指定できます。

    (3) 初期表示展開先ディレクトリー

      　展開先ディレクトリーの初期値を指定したい場合に設定します。設定され
      ていない場合は，SFX のあるディレクトリー (SFX にとってのカレント) が
      初期値として表示されます。64 バイトまで指定できます。

    (4) 展開後実行コマンド

      　展開後に自動的に実行したいプログラム等がある場合には，ここで設定し
      ます。DosSFX の !.BAT の機能に相当します。実際の実行は ShellExecute
      () により行われるので，関連づけがされていれば直接ファイル名を指定す
      ることも可能です。'\0' を含めて 128 バイトまで指定できます。

    (5) 属性の復元

      　システム及び隠し属性の復元を行うかどうかを設定します。

%k  D. "-jw3" で作成した Windows 3.1 版 WinSFXM

    　基本的に上で説明した WinSFX と同じですが，次の起動時コマンドライン・
    スイッチ指定が行えるようになっています。 また，後述する WinSFX32M でも
    そうですが， WinSFX と異なり展開時にはタイムスタンプのチェックが行われ
    ます。

        WINSFXM.EXE [-n] [-c] [DIR]

          -c  : タイムスタンプチェックの抑制
          -n  : 展開先ディレクトリー入力の省略
          DIR : 展開先ディレクトリーの指定

    　さらに，WinSFXM では，WinSFX のものに加えて以下の設定が SFX 作成時に
    行えます。

    (1) 自動実行指定

      　この項目を設定することにより， "-n" が指定された状態での作成が行え
      ます。実行時に "-n-" を指定すれば自動実行を抑止できます。

    (2) 上書き確認の抑制

      　この項目を設定することにより，上書き確認メッセージの表示を抑制する
      ことができます。

    (3) 展開先としてワークディレクトリーを設定

      　初期表示展開先ディレクトリーとして "%WORK%" の文字列を入力すること
      により， 環境変数 "TMP" 及び "TEMP" で指定されているディレクトリーを
      指定することができます。
      　"%WORK%" の他にも，後述されている "%WinDir%"，"%SystemDir%" の変数
      が使えます。

    (4) ウィンドウズ・ディレクトリー，システム・ディレクトリーへの展開

      　格納ファイルのパス情報として以下の文字列を指定することにより，特定
      のディレクトリーへの展開が行えます。上記の "%WORK%" は使えないのでご
      注意ください。 また，これらの変数が WinSFX(32)M 以外では認識されない
      点にも留意する必要があります。

          %WinDir%      GetWindowsDirectory() で取得されるウィンドウズ・ディ
                        レクトリ。
          %SystemDir%   GetSystemDirectory()  で取得されるウィンドウズ・シス
                        テム・ディレクトリー

    (5) 展開後実行コマンド

      　WinSFX と異なり，'\0' を含めて 127 バイトまで指定できます。

    　Ver 0.95 以降で作成される WinSFX については， WinSFXM のサブセットと
    なっており，lh7，lhd の展開も行え， また，短い名前への変換も行われるよ
    うになっています。

%l  E. "-gw" で作成した NT/Win 9x 版 WinSFX32

    　Windows NT 及び Windows 95 版の SFX です。MS-DOS 上や Win32s  のイン
    ストールされていない Windows 3.1 では実行できません。 対象とするシステ
    ムが違うだけで，Windows 版 WinSFX と同じものです。 ただし，NTFS に対応
    する必要から長いファイル名が扱え，またヘッダ形式が h2 となります。

    　WinSFX32 は ANSI 版プログラムとなっていますので Unicode を扱うことは
    できません。扱う必要がある場合は，Ver 2.63 以降の UNLHA32.DLL を使用し
    た上で WinSFX32M を作成して下さい。

    　Ver 1.55 以降の UNLHA32.DLL で作成される WinSFX32 は，バイリンガル化
    されている関係上日本語・英語版の指定にかかわらず同じ  SFX が作成されま
    す。従って，表示は当該環境の地域設定に従って行われますし，$ ファイルに
    ついても日本語・英語の双方に専用のコマンドが用意されています。過去の版
    と仕様変更されているので，注意してください。

    　Ver 1.36e 以降の UNLHA32.DLL で作成される WinSFX32 は， それまでのも
    のと異なり WinSFX32M のサブセットとなっています。また，Ver 1.50 以降で
    作成されるものでは UNC も指定可能となっています。ただし，"-jf2" スイッ
    チによるドライブレター付きパスには対応していないので注意してください。

    　起動スイッチは以下のとおりです。

        WINSFX32.EXE [-n] [-c] [DIR]

          -c  : タイムスタンプチェックの抑制
          -n  : 展開先ディレクトリー入力の省略
          DIR : 展開先ディレクトリーの指定

    　WinSFX32(M) での "%WORK%" 指定は，WinSFXM と異なり，環境変数ではなく
    システムの認識しているワーク・ディレクトリーが使用されます。

    　WinSFX のものに加えて，さらに以下の項目の指定が可能となっています。

    (1) "$" ファイルによる設定

      　WinSFX32(M) では "$"  というファイルが書庫に格納されている場合，そ
      れを設定ファイルとみなして処理を行います。"$" ファイルの仕様について
      は，INFCOM.TXT を参照してください。

    (2) 改竄チェック

      　WinSFX32(M) の作成時に改竄チェックの有無を指定することができます。
      改竄チェックが有効になっている自己解凍書庫の場合は，自己解凍を行う前
      に改竄チェックを行い，書庫が改竄されている場合はエラーを表示して展開
      を中止します。

      　現在のバージョンでは， UnlhaCheckArchive() や 't' コマンドでの改竄
      チェックは行えません。

    (3) 展開後実行コマンド

      　WinSFX(M) と異なり '\0' を含めて 255 バイトまで指定できます。

    (4) 自動実行指定

      　この項目を設定することにより，展開先の入力を求めずにそのまま展開処
      理を行わせることができます。

    (5) 上書き確認の抑制

      　この項目を設定することにより，上書き確認メッセージの表示を抑制する
      ことができます。

%m  F. "-gw3" で作成した NT/Win 9x 版 WinSFX32M (WinSFX32U を含む)

    　WinSFXM の NT/Win 95 版です。 基本的に WinSFXM と同じで， さらに lh7
    形式の展開やスタートメニューへの登録，関連付け等が行えるようになってい
    ます。ただし，展開ルーチンがかなり大きくなってしまっています。(T_T)

    　Ver 2.63 以降の UNLHA32.DLL で作成される  Unicode 対応版の WinSFX32M
    (WinSFX32U) では，Unicode に対応しており，UNLHA32.DLL 独自の機能である
    Unicode ヘッダについても正常に扱われ， また Unicode を含んだ名前のフォ
    ルダへの展開も行えます。

    　Ver 1.60a 以降の UNLHA32.DLL で作成される WinSFX32M では，$ ファイル
    が使われている場合， Vista 等 UAC が有効となっている環境において，管理
    者権限による実行が要求されますので，注意が必要となります。

    　Ver 1.54b 以降の UNLHA32.DLL で作成される WinSFX32M は，バイリンガル
    化されている関係上， 日本語・英語版の指定にかかわらず同じ SFX が作成さ
    れます。従って，表示は当該環境の地域設定に従って行われますし，$ ファイ
    ルについても日本語・英語の双方に専用のコマンドが用意されています。過去
    の版と仕様変更されているので，注意してください。

    　SFX 作成ダイアログで設定できる項目については， WinSFX32 と同じですが，
    さらに以下の指定が可能となっています。

    (1) 「Program Files」ディレクトリーへの展開

      　展開先や，格納ファイルのパスとして "%ProgramFiles%" を使用すること
      により， システムが認識している「Program Files」ディレクトリーを指定
      することができます。 Win32s 等では，システムがインストールされている
      ドライブのルートディレクトリーと解釈されます。 詳しくは， INFCOM.TXT
      を参照してください。

  　WinSFXM/WinSFX32(M) では， WinSFX(32)， LZHSFX，LZHAUTO と異なり，Win-
  dows (MS-DOS) の認識している環境変数を使った展開先ディレクトリー指定
  ("%TEMP%" など) は行えません。プラットフォームによっては使用できないなど，
  混乱のもととなるので使用できないようになっています。 例えば， Windows 95
  の場合，DOS 窓から WinSFX を起動した場合には "%TEMP%" 等が有効になります
  が，Win32 アプリから起動した場合は無効です(Explorer ももちろんダメ)。

  　Dos/WinSFX では， スペースを含むファイル名や長いファイル名をもったファ
  イルを展開しようとした場合に，  そのままの名前で展開されてしまうために，
  MS-DOS や Windows 3.1 では通常の方法でファイルの削除が行えなくなってしま
  います。このようなことが発生しないように，UNLHA32.DLL では，そのような名
  前をもった格納ファイルについては，自己解凍書庫に格納しないようになってい
  ます。
  　長いファイル名等のファイルも含めたい場合は WinSFX32 を作成するようにし
  てください。
  　WinSFXM では MS-DOS で扱える名前に SFX が変換を行うので， 格納されてい
  るファイルについての名前の制限はありません。

  　WinSFX32U では ! や $ ファイルに BOM を埋め込むことにより，UTF-16LE で
  の記述が可能となっています。

%n  G. 自己解凍書庫の種類と扱えるヘッダ等について

  　自己解凍書庫では，展開ルーチンをなるべく小さくするために，特定のヘッ
  ダのみに対応しています。また，扱える圧縮方式にも違いがあります。対応し
  ていない形式の場合は自己解凍が行えないので，自己解凍書庫に対して書庫操
  作を行う際には注意してください。

  　また，WinSFX/DosSFX の作成時にはファイル名のチェックが行われますが，
  これらの自己解凍書庫に直接ファイルの圧縮・格納を行った場合にはチェック
  が行われないので，この点にも注意してください。

  　UNLHA32.DLL では，自己解凍書庫が扱えないヘッダや圧縮形式が指定された
  としても，その書庫が扱える形式を使用して圧縮・格納を行います。ただし，
  'S' 命令を使って書庫を変換した場合は，圧縮形式については変換が行われず，
  扱えない圧縮形式で格納されているファイルについては，単純に削除されます。

  　Ver 0.84 から実装が行われている  WinSFX32M 2.60 はヘッダ等の扱いに変
  更がないので，SFX_WIN32_250_6 として認識されます。実際問題として，区別
  する必要性はないでしょう。

    ・自己解凍書庫が対応しているヘッダ
        SFX_DOS_LARC_S          h0
        SFX_DOS_LHARC_S         h0
        SFX_DOS_LHARC_L         h0
        SFX_DOS_204S            h0
        SFX_DOS_250S            h0
        SFX_DOS_260S            h0
        SFX_DOS_204L            h0
        SFX_DOS_250L            h0
        SFX_DOS_260L            h0
        SFX_WIN16_213_1         h0
        SFX_WIN16_213_2         h0
        SFX_WIN16_213_3         h0
        SFX_WIN16_250_1         h0
        SFX_WIN16_255_1         h0
        SFX_WIN32_213_1         h2
        SFX_WIN32_213_3         h2
        SFX_WIN32_250_1         h2
        SFX_WIN32_250_6         h2
        SFX_WIN32_300_1         h2
        SFX_LZHSFX_1000         h2
        SFX_LZHSFX_1100         h2
        SFX_LZHAUTO_0002        h2
        SFX_LZHAUTO_1000        h2
        SFX_LZHAUTO_1100        h2
        SFX_WIN32_LHASA         h1

    ・自己解凍書庫が対応している圧縮形式
        SFX_DOS_LARC_S          lz4，lz5
        SFX_DOS_LHARC_S         lh0，lh1
        SFX_DOS_LHARC_L         lh0，lh1
        SFX_DOS_204S            lh0，lh4，lh5
        SFX_DOS_250S            lh0，lh4〜lh6
        SFX_DOS_260S            lh0，lh4〜lh7
        SFX_DOS_204L            lh0，lh4，lh5
        SFX_DOS_250L            lh0，lh4〜lh6
        SFX_DOS_260L            lh0，lh4〜lh7
        SFX_WIN16_213_1         lh0，lh4，lh5
        SFX_WIN16_213_2         lh0，lh4〜lh6
        SFX_WIN16_213_3         lh0，lh4〜lh7，lhd
        SFX_WIN16_250_1         lh0，lh4〜lh6，lhd
        SFX_WIN16_255_1         lh0，lh4〜lh7，lhd
        SFX_WIN32_213_1         lh0，lh4〜lh6
        SFX_WIN32_213_3         lh0，lh4〜lh7，lhd
        SFX_WIN32_214_1         lh0，lh4〜lh7，lhd
        SFX_WIN32_250_1         lh0，lh4〜lh7
        SFX_WIN32_250_6         lh0，lh4〜lh7，lhd
        SFX_WIN32_300_1         lh0, lh4〜lh7, lhd
        SFX_LZHSFX_1000         lh0，lh4〜lh6，lhd
        SFX_LZHSFX_1100         lh0，lh4〜lh7，lhd
        SFX_LZHAUTO_0002        lh0，lh4〜lh6
        SFX_LZHAUTO_1000        lh0，lh4〜lh6，lhd
        SFX_LZHAUTO_1100        lh0，lh4〜lh7，lhd
        SFX_WIN32_LHASA         lh0，lh4〜lh6

    ・ディレクトリー構築
        SFX_DOS_LARC_S          不可
        SFX_DOS_LHARC_S         不可
        SFX_DOS_LHARC_L         可
        SFX_DOS_204S            不可
        SFX_DOS_250S            不可
        SFX_DOS_260S            不可
        SFX_DOS_204L            可
        SFX_DOS_250L            可
        SFX_DOS_260L            可
        SFX_WIN16_213_1         可
        SFX_WIN16_213_2         可
        SFX_WIN16_213_3         可
        SFX_WIN16_250_1         可
        SFX_WIN16_255_1         可
        SFX_WIN32_213_1         可
        SFX_WIN32_213_3         可
        SFX_WIN32_214_1         可
        SFX_WIN32_250_1         可
        SFX_WIN32_250_6         可
        SFX_WIN32_300_1         可
        SFX_LZHSFX_1000         可
        SFX_LZHSFX_1100         可
        SFX_LZHAUTO_0002        可
        SFX_LZHAUTO_1000        可
        SFX_LZHAUTO_1100        可
        SFX_WIN32_LHASA         可

%o  H. SFX の機能一覧

　UNLHA32.DLL で作成される自己解凍書庫の機能一覧です。あくまでも『この版
の  UNLHA32.DLL で作成されるもの』に関するものであることに注意してくださ
い。また，各 SFX によって細部に違いがありますので， 必ず詳細を確認してく
ださい。

               | SFX      | WinSFX   | WinSFXM  | WinSFX32 | WinSFX32M
---------------+----------+----------+----------+----------+-----------
スイッチ指定   | ○       | ×       | ○       | ○       | ○
パラメータ指定 | ○       | ×       | ○       | ○       | ○
自動実行       | ×       | ×       | ○       | ○       | ○
特殊パス指定   | ×       | ×       | ○       | ○       | ○
$ ファイル     | ×       | ×       | ×       | ○       | ○
改竄チェック   | ×       | ×       | ○       | ○       | ○
ヘッダ形式     | h0       | h0       | h0       | h2       | h2
Unicode 名     | ×       | ×       | ×       | ×       | ×
4GB 超過サイズ | ×       | ×       | ×       | ×       | ○
lh0 メソッド   | ○       | ○       | ○       | ○       | ○
lh1 メソッド   | ×       | ×       | ×       | ×       | ×
lh5 メソッド   | ○       | ○       | ○       | ○       | ○
lh6 メソッド   | ○       | ○       | ○       | ○       | ○
lh7 メソッド   | ○       | ○       | ○       | ○       | ○
lhd メソッド   | ×       | ○       | ○       | ○       | ○

               | WinSFX32U |
---------------+-----------+
スイッチ指定   | ○        |
パラメータ指定 | ○        |
自動実行       | ○        |
特殊パス指定   | ○        |
$ ファイル     | ○        |
改竄チェック   | ○        |
ヘッダ形式     | h2        |
Unicode 名     | ○        |
4GB 超過サイズ | ○        |
lh0 メソッド   | ○        |
lh1 メソッド   | ×        |
lh5 メソッド   | ○        |
lh6 メソッド   | ○        |
lh7 メソッド   | ○        |
lhd メソッド   | ○        |

　ここでの『パラメータ指定』とは，コマンドラインによる展開先指定のことで
す。

==========================================================================
