=======================================================================
              UNLHA32.DLL Ver 2.67a  書庫ヘッダ説明ファイル
=======================================================================

                                               Ｍｉｃｃｏ (Sep.12,2010)


はじめに

　UNLHA32.DLL のドキュメント構成は以下のようになっています。

    API.TXT      : 基幹を成す Unlha() 系及び OpenArchive() 系 API の説明
    NOTE2.TXT    : API.TXT の補足説明
    COMMAND.TXT  : Unlha() に渡すコマンド文字列についての説明
    NOTE.TXT     : COMMAND.TXT の補足説明
    WINMES.TXT   : SetOwnerWindow() 系 API の説明
    ENUMAPI.TXT  : SetEnumMembersProc() 系 API の説明
    STRTABLE.TXT : ストリングテーブルと言語設定用 API についての説明
    HEADER.TXT   : LZH 書庫ヘッダ仕様の説明
    INFCOM.TXT   : Win32SFXM で使用される $ ファイルコマンドの説明
    QandA.TXT    : 過去にあった主な質問集
    HISTORY.TXT  : 修正履歴

　このドキュメントでは LZH 書庫のヘッダ仕様について説明されています。

　ヘッダの概要については，COMMAND.TXT の『UNLHA32.DLL が扱える書庫ヘッダ形
式』の項目を参照してください。ここでは，ヘッダの仕様について記述されていま
す。

-----------------------------------------------------------------------
%0. ヘッダの構造
%1. 書庫の基本ヘッダ
  %a. Level 0 ヘッダ (h0)
  %b. Level 1 ヘッダ (h1)
  %c. Level 2 ヘッダ (h2)
  %d. Level 3 ヘッダ (h3)
  %e. OS の識別文字
%2. 書庫の拡張ヘッダ
  %e. OS 非依存のもの
    %A  1) 共通ヘッダ
    %B  2) ファイル名ヘッダ
    %C  3) パス名ヘッダ
    %D  4) コメントヘッダ
    %E  5) 新属性ヘッダ
  %f. MS-DOS 依存のもの
    %F  1) 属性ヘッダ
  %g. UNLHA32.DLL 依存のもの
    %G  1) タイムスタンプヘッダ
    %H  2) ファイルサイズヘッダ
    %I  3) タイムゾーンヘッダ
    %J  4) Unicode ファイル名ヘッダ
    %K  5) Unicode パス名ヘッダ
    %L  6) コードページヘッダ
    %M  7) プロテクト情報ヘッダ
  %h. LHa for UNIX 依存のもの
    %N  1) ファイル許可属性ヘッダ
    %O  2) 更新日時ヘッダ
  %i. LHA OS/2 依存のもの
    %P  1) 新属性ヘッダ
  %j. 拡張ヘッダ識別子一覧
%3. 暗号化ヘッダ
-----------------------------------------------------------------------


-----------------------------------------------------------------------
%0. ヘッダの構造
-----------------------------------------------------------------------

　LZH 書庫のヘッダは，基本的に次のような構造となっています。

        ------------------
        n, n, "-lhm-", ...      最初の (基本) ヘッダ
        ------------------
         hhhhhhhhhhhhhhhh       h1/h2 では，存在すれば拡張ヘッダ
        ------------------
         iiiiiiiiiiiiiiii       格納ファイルの圧縮イメージ
        ------------------
        n, n, "-lhm-", ...      次の (基本) ヘッダ
        ------------------
         iiiiiiiiiiiiiiii       格納ファイルの圧縮イメージ
        ------------------
        00h                     終了を表すエンド・マーク '0x00' が入りま
                                す。[*1]

        [*1] C マガ 91 年 1 月号での吉崎氏の記事で『書庫の終端には終わりを
             示すための1バイトの0x00が記録されています』と言及されているも
             ので，LArc，LHarc，LHA と一連の互換ヘッダで使われ続けている経
             緯と， これが存在しないことによる書庫破損等の発生例  (の報告)
             があったことから，UNLHA32.DLL においては， 不正扱いとして存在
             しない場合には警告するようになっています。

　UNLHA32.DLL は， 拡張ヘッダを含めた全体の大きさ (圧縮イメージは含まない)
が 4K (4096) バイトまでのヘッダを扱えます。本来は，サイズ制限の存在する h2
形式においても 64K バイトまで扱えるべきなのですが，4K を超えるヘッダをもつ
メンバーの検疫を行えないウィルス対策ソフト等が多数存在するため， 4K バイト
を超すヘッダについては，無条件で拒否する仕様としています。

　書庫の前後に何らかのデータが付加されていても構いません。従って，基本的に
は書庫のヘッダを検索する場合には，『ファイルの先頭からヘッダが存在』といっ
たような前提条件を考慮してはいけないことになります。

　LZH 書庫においては，1 ワードが複数バイトからなるデータについては全てリト
ルエンディアンで格納されています。ビッグエンディアンの環境で書庫を扱う場合
には注意してください。

　後述のヘッダの詳細仕様を見れば解りますが，LZH 書庫にはインデックス的なも
のは存在しません。従って，格納ファイルの情報を得るには，一旦書庫すべてを読
む必要があります。このため，LZH 書庫は，『一部の格納ファイルの操作』につい
て，かなり不利な仕様となってしまっています。


-----------------------------------------------------------------------
%1. 書庫の基本ヘッダ
-----------------------------------------------------------------------

-----------------------------------------------------------------------
  %a. Level 0 ヘッダ (h0)
-----------------------------------------------------------------------

  　Level 0 (h0) ヘッダは LArc，LHarc で扱われていたヘッダ形式です。当時の
  MS-DOS 環境を反映しているため，現在の Windows 等の環境としては制限が大き
  いものとなっています。現在では Level 1，2 ヘッダが主流となっていますが，
  DosSFX，WinSFX(M) では，この Level 0 形式ヘッダが使用されています。

           --------------------------
         1:ヘッダの大きさ               1 バイト (BYTE)
         2:ヘッダのチェックサム         1 バイト (BYTE)
         3:圧縮法の種類                 5 バイト (char[5])      [*1]
         4:圧縮後のサイズ               4 バイト (DWORD)
         5:元のファイルサイズ           4 バイト (DWORD)
         6:ファイルの更新日時           4 バイト (struct ftime) [*2]
         7:ファイルの属性               1 バイト (BYTE)         [*3]
         8:ヘッダのレベル (0x00)        1 バイト (BYTE)         [*4]
         9:ファイル名の長さ             1 バイト (BYTE)
        10:ファイル名(パス含む)         n バイト (char[n])      [*5][*6]
        11:ファイルの CRC16             2 バイト (WORD)

        12:拡張可能部分                 n バイト (BYTE)         [*7]

           --------------------------

  [*1]  "-lh1-" 等 5 バイトの文字で表されます。
  [*2]  MS-DOS 形式 (struct ftime) でのローカルタイム。

<<重要>>
        NTFS 上のファイルや UNIX 等が起源のファイルの場合，00:00:01 等，秒
        が奇数である場合が当然ありますが，そのようなデータの扱いがプラット
        フォームにより異なっていることに注意してください。 Win32s，Windows
        95 では丸めの際に切り捨てが行われますが， その他では切り上げが行わ
        れます。 特に注意が必要なのは，Windows 98 であり，API のバグから，
        SetFileTime() 等では切り上げが行われるにもかかわらず FileTimeToDos-
        DateTime() では切り捨てられてしまいます。
        UNLHA32.DLL においては， Win32 API を使用しないことにより，Windows
        98 においても切り上げた数値が返されるようになっています。 (Ver 1.32
        以降)
  [*3]  MS-DOS 形式でのファイル属性。
  [*4]  LHarc までは属性項目の上位バイトとして使われていた領域で，LHA で仕
        様変更が行われ，書庫のレベルを示す項目となったものです。LHarc 等で
        は，この部分に対するチェックが行われず，属性の一部として読み込みが
        行われるので注意してください。
  [*5]  ファイル名長項目で示された長さとなり，ディレクトリーセパレータは
        '\' で表されます。h1/h2 ヘッダと異なり，パス情報についてもすべてこ
        の項目に格納されている点に注意が必要です。LHarc ではヘッダ読み込み
        用のバッファには 79 バイト分確保されているのですが，ヘッダ書き込み
        時を含めて，ファイルを扱う各種ルーチンのバッファが ('\0' を含めて)
        65 バイトとなっていることから， LHarc での使用を想定していない場合
        でも 64 バイトに抑えておいたほうが良いと思われます。
  [*6]  書庫作成時の ANSI/OEM コードページに従ったマルチバイト文字で記録さ
        れている点に注意が必要です。言語環境等コードページが異なる場合は正
        しく扱えないので，作成時と同じコードページの環境で書庫を扱う必要が
        あります。
  [*7]  LHarc までは未対応。LHA 以降では存在可能となっていますが，実際には
        少なくとも MS-DOS 系では使われていないようです。 LHa for UNIX では
        UNIX  形式のタイムスタンプやパーミッション情報等を書き込んでいます
        が，今のところ UNLHA32.DLL では読み込んでいません。

-----------------------------------------------------------------------
  %b. Level 1 ヘッダ (h1)
-----------------------------------------------------------------------

  　Level 1 (h1) ヘッダは，Level 0 から Level 2 移行への過渡的措置として用
  意されたヘッダ形式です。Level 0 と互換性をもたせながらも部分的に拡張ヘッ
  ダを利用して情報を格納する仕様となっています。

  　LHA が広く普及したことから，このヘッダが事実上の標準となっています。
  MS-DOS や Windows 3.1 での利用を考慮する場合は，このヘッダ形式にしておく
  と問題の発生する確率が最少に抑えられますが， 次に説明する Level 2 ヘッダ
  の使用が推奨されます。

           --------------------------
         1:基本ヘッダの大きさ           1 バイト (BYTE)
         2:基本ヘッダのチェックサム     1 バイト (BYTE)
         3:圧縮法の種類                 5 バイト (char[5])
         4:スキップサイズ               4 バイト (DWORD)        [*1]
         5:元のファイルサイズ           4 バイト (DWORD)
         6:ファイルの更新日時           4 バイト (struct ftime) [*2]
         7:0x20 固定                    1 バイト (BYTE)         [*3]
         8:ヘッダのレベル (0x01)        1 バイト (BYTE)
         9:ファイル名の長さ             1 バイト (BYTE)         [*4]
        10:ファイル名                   n バイト (char[n])      [*5][*6]
        11:ファイルの CRC16             2 バイト (WORD)
        12:このメンバーを作成した OS    1 バイト (char)         [*7]

        13:拡張可能部分                 n バイト (BYTE)         [*8]

        14:最初の拡張ヘッダのサイズ     2 バイト (WORD)
           --------------------------
        15:拡張ヘッダの識別子           1 バイト (BYTE)
        16:実際の内容                   n バイト                [*9]
        17:次の拡張ヘッダのサイズ       2 バイト (WORD)
           --------------------------
           以下繰り返し
           --------------------------

  [*1]  h1 では， 圧縮後サイズではなく，次のヘッダへのオフセットが格納され
        ています。この項目の値から (拡張ヘッダを含む) ヘッダ全体のサイズを
        減ずることで，格納ファイルの圧縮後サイズを得ることが出来ます。
  [*2]  MS-DOS 形式 (struct ftime) でのローカルタイム。

<<重要>>
        NTFS 上のファイルや UNIX 等が起源のファイルの場合，00:00:01 等，秒
        が奇数である場合が当然ありますが，そのようなデータの扱いがプラット
        フォームにより異なっていることに注意してください。 Win32s，Windows
        95 では丸めの際に切り捨てが行われますが， その他では切り上げが行わ
        れます。 特に注意が必要なのは，Windows 98 であり，API のバグから，
        SetFileTime() 等では切り上げが行われるにもかかわらず FileTimeToDos-
        DateTime() では切り捨てられてしまいます。
        UNLHA32.DLL においては， Win32 API を使用しないことにより，Windows
        98 においても切り上げた数値が返されるようになっています。 (Ver 1.32
        以降)
  [*3]  ファイル属性項目ですが，この項目は FA_ARCH (アーカイブ属性) で固定
        されているので注意してください。これ以外の属性の場合は，拡張ヘッダ
        の属性項目ヘッダに書き込まれます。
  [*4]  基本ヘッダの拡張可能部分や拡張ヘッダが存在しなければ，230 バイトま
        で可能ですが，LHA では 128 バイトを超えた場合に (拡張ヘッダの) ファ
        イル名ヘッダへ書き込む仕様となっていますので，(それに合わせて) 128
        バイトに抑えておいたほうが良いかもしれません。
  [*5]  h0 形式と異なりファイル名だけが格納されています。 パス名が存在する
        場合はパス部分は拡張ヘッダに格納されます。
        長さにかかわらず， ファイル名長項目に 0 をセットした上でファイル名
        を拡張ヘッダに書き込むことも可能です。
  [*6]  書庫作成時の ANSI/OEM コードページに従ったマルチバイト文字で記録さ
        れている点に注意が必要です。言語環境等コードページが異なる場合は正
        しく扱えないので，作成時と同じコードページの環境で書庫を扱う必要が
        あります。
  [*7]  後述の「OS の識別文字」の項目を参照。
  [*8]  暗号化ヘッダの場合，ここに全ヘッダの大きさ (WORD) が格納されます。
  [*9]  後述の「拡張ヘッダ」の項目を参照。

-----------------------------------------------------------------------
  %c. Level 2 ヘッダ (h2)
-----------------------------------------------------------------------

  　Level 2 (h2) ヘッダは，UNLHA32.DLL を含め Win32 環境で標準となっている
  ヘッダ形式です。Level 1 までのヘッダとは基本的に互換性がありません。

  　ファイル名・パス名が共に拡張ヘッダに移されていることから，長さの制限が
  (書庫の仕様としては) 事実上なくなっています。 また，他環境やネット上での
  利用を考慮して，タイムスタンプの管理がローカルタイムから UTC  に変更され
  ているのが最大の相違点です。

  　Win32 環境ではこのヘッダ形式を採用することをお薦めします。海外ソフトで
  問題の発生することがありますが， 国内では MS-DOS，Windows 3.1 上でも基本
  的に問題なく利用できます。ただし，このヘッダ形式を利用するにはタイムゾー
  ンの設定が正しく行われている必要があります。

           --------------------------
         1:全ヘッダの大きさ             2 バイト (WORD)         [*1]
         2:圧縮法の種類                 5 バイト (char[5])      [*2]
         3:圧縮後のサイズ               4 バイト (DWORD)        [*3]
         4:元のファイルサイズ           4 バイト (DWORD)        [*3]
         5:ファイルの更新日時           4 バイト (time_t)       [*4]
         6:予約済み (0x20 固定)         1 バイト (BYTE)         [*5]
         7:ヘッダのレベル (0x02)        1 バイト (BYTE)
         8:ファイルの CRC16             2 バイト (WORD)
         9:このメンバーを作成した OS    1 バイト (char)         後述

        10:最初の拡張ヘッダのサイズ     2 バイト (WORD)
           --------------------------
        11:拡張ヘッダの識別子           1 バイト (BYTE)
        12:実際の内容                   n バイト
        13:次の拡張ヘッダのサイズ       2 バイト (WORD)
           --------------------------
           以下繰り返し
           --------------------------

  [*1]  下位バイトが 0x00 となるようなサイズの場合には，書庫作成時にダミー
        データを付加するので，下位バイトが 0x00 となることはありません。
        UNLHA32.DLL では  4K (4096) バイトまでを正常値として扱うようになっ
        ています。
        間違って下位バイトとして 0x00 が書き込まれてしまった場合には，それ
        以降ヘッダが読み込まれなくなるので注意してください (0x00  が書庫の
        終端を意味するため)。
  [*2]  "-lh5-" といったように 5 文字でメソッドを示します。 LZH 書庫には他
        の書庫にみられるヘッダ ID のようなものが存在しないので，オリジナル
        を含めて，この圧縮法項目を ID 代わりに使用しています。そのために，
        一見無駄と思える '-' の文字で括る仕様となっています。 圧縮メソッド
        については COMMAND.TXT を参照してください。
        圧縮法ではありませんが， "-d" スイッチ等により作成されたディレクト
        リメンバーについては "-lhd-" で示されます。
        この項目のみを使用して LZH  書庫の認識を行うことは避けてください。
        高確率で誤認識が発生します。
  [*3]  DWORD であることから解るように， 扱えるファイルは 4,294,967,295 バ
        イトのものまでとなります。が，多くのプログラムが 32 ビット符号付き
        整数として扱っていることから，2,147,483,647 バイトまでのものを扱う
        ようにしたほうが無難です。
        UNLHA32.DLL では， ファイルサイズ項目ヘッダを作成することで 4GB を
        超えるファイルについても対応しています (Ver 1.61 以降)。
  [*4]  h1 形式までと異なり，UNIX 形式 (time_t) での UTC（協定世界時）によ
        るタイムスタンプとなっています。ローカルタイムではないので注意して
        ください。このため，タイムゾーンの設定が正常でないか行われていない
        環境では，格納・展開時にタイムスタンプが狂ってしまいます。 (DOS 窓
        を含む) MS-DOS，Windows 3.1 環境では必ず環境変数 "TZ" の設定を行っ
        てください。time_t であることから予想がつくかと思いますが，2038 年
        以降ではタイムスタンプが正常に扱われなくなる可能性があります。
        UNLHA32.DLL では，タイムスタンプ項目ヘッダを作成し FILETIME でタイ
        ムスタンプを管理するようになっています (Ver 0.98 以降)。ただし，対
        応アプリ側でヘッダの作成を抑止する場合があることに注意が必要です。
  [*5]  ファイル属性項目ですが  FA_ARCH で固定されていますので注意してくだ
        さい。これ以外の属性の場合は，拡張ヘッダの属性項目ヘッダに書き込ま
        れます。

-----------------------------------------------------------------------
  %d. Level 3 ヘッダ (h3)
-----------------------------------------------------------------------

  　Level 3 (h3) ヘッダは，LHA Ver 3.0 が公開されれば採用されたであろうヘッ
  ダ形式です。旧 NIFTYSERVE の FLABO で仕様が提案され， 一部のツールでは試
  験的に作成が可能となっています。

  　基本的に Level 2 ヘッダと同じ構造なのですが，ヘッダサイズが DWORD 単位
  で記録されることから，専用の処理が必要となります。Level 3 ヘッダの場合は
  『書庫の拡張ヘッダ』の項目で説明されている "次の拡張ヘッダのサイズ" を，
  すべて DWORD に読み替えてください。

           --------------------------
         1:予約済み (0x04, 0x00 固定)   2 バイト (WORD)         [*1]
         2:圧縮法の種類                 5 バイト (char[5])      [*2]
         3:圧縮後のサイズ               4 バイト (DWORD)        [*3]
         4:元のファイルサイズ           4 バイト (DWORD)        [*3]
         5:ファイルの更新日時           4 バイト (time_t)       [*4]
         6:予約済み (0x20 固定)         1 バイト (BYTE)         [*5]
         7:ヘッダのレベル (0x03)        1 バイト (BYTE)
         8:ファイルの CRC16             2 バイト (WORD)
         9:このメンバーを作成した OS    1 バイト (char)         後述
        10:全ヘッダのサイズ             4 バイト (DWORD)        [*6]

        11:最初の拡張ヘッダの大きさ     4 バイト (DWORD)
           --------------------------
        12:拡張ヘッダの識別子           1 バイト (BYTE)
        13:実際の内容                   n バイト
        14:次の拡張ヘッダのサイズ       4 バイト (DWORD)
           --------------------------
           以下繰り返し
           --------------------------

  [*1]  予約済みとなっていますが，各種サイズ情報の大きさを示すものとして扱
        われる予定だったようです (h3 形式ではサイズ情報が DWORD で扱われる
        ことから，そのサイズである 4 が格納されています)。8 が記録されてい
        た場合に QWORD で扱うソフトが存在するのかどうかは判りません。
  [*2]  "-lh5-" といったように 5 文字でメソッドを示します。 LZH 書庫には他
        の書庫にみられるヘッダ ID のようなものが存在しないので，オリジナル
        を含めて，この圧縮法項目を ID 代わりに使用しています。そのために，
        一見無駄と思える '-' の文字で括る仕様となっています。 圧縮メソッド
        については COMMAND.TXT を参照してください。
        圧縮法ではありませんが， "-d" スイッチ等により作成されたディレクト
        リメンバーについては "-lhd-" で示されます。
        この項目のみを使用して LZH  書庫の認識を行うことは避けてください。
        高確率で誤認識が発生します。
  [*3]  DWORD であることから解るように， 扱えるファイルは 4,294,967,295 バ
        イトのものまでとなります。が，多くのプログラムが 32 ビット符号付き
        整数として扱っていることから，2,147,483,647 バイトまでのものを扱う
        ようにしたほうが無難です。
        UNLHA32.DLL では， ファイルサイズ項目ヘッダを作成することで 4GB を
        超えるファイルについても対応しています (Ver 1.61 以降)。
  [*4]  h1 形式までと異なり，UNIX 形式 (time_t) での UTC（協定世界時）によ
        るタイムスタンプとなっています。ローカルタイムではないので注意して
        ください。このため，タイムゾーンの設定が正常でないか行われていない
        環境では，格納・展開時にタイムスタンプが狂ってしまいます。 (DOS 窓
        を含む) MS-DOS，Windows 3.1 環境では必ず環境変数 "TZ" の設定を行っ
        てください。time_t であることから予想がつくかと思いますが，2038 年
        以降ではタイムスタンプが正常に扱われなくなる可能性があります。
        UNLHA32.DLL では，タイムスタンプ項目ヘッダを作成し FILETIME でタイ
        ムスタンプを管理するようになっています (Ver 0.98 以降)。ただし，対
        応アプリ側でヘッダの作成を抑止する場合があることに注意が必要です。
  [*5]  ファイル属性項目ですが  FA_ARCH で固定されていますので注意してくだ
        さい。これ以外の属性の場合は，拡張ヘッダの属性項目ヘッダに書き込ま
        れます。
  [*6]  h3 形式では，こちらに全ヘッダのサイズが格納されます。

-----------------------------------------------------------------------
  %e. OS の識別文字
-----------------------------------------------------------------------

      ----------------
        generic  '0x00'         一部の h0 形式書庫で便宜上使用される。
        MS-DOS   'M'            通常はこのマークが付加される。
        OS/2     '2'
        OS9      '9'            MAC の新型ではない。
        OS/68K   'K'
        OS/386   '3'
        HUMAN    'H'
        UNIX     'U'
        CP/M     'C'
        FLEX     'F'
        Mac-OS   'm'
        Runser   'R'
        Java     'J'            UNLHA32.DLL では現状『その他』扱いです。
        Win 95   'w'            UNLHA32.DLL 固有。通常は設定されない。
        NT       'W'            UNLHA32.DLL 固有。通常は設定されない。
      ----------------


-----------------------------------------------------------------------
%2. 書庫の拡張ヘッダ
-----------------------------------------------------------------------

　拡張ヘッダには，各プラットフォームに依存する情報や，h1/h2 形式以降の書庫
で追加・拡張された情報，などが記録されます。基本ヘッダと重複した情報につい
ては，UNLHA32.DLL においては，常に拡張ヘッダの情報が有効となります。

-----------------------------------------------------------------------
  %e. OS 非依存のもの (0x00〜0x3f，0xf0〜0xff)
-----------------------------------------------------------------------

    %A  1) 共通ヘッダ                   : 　このヘッダは， 事実上 CRC ヘッ
                                          ダとして利用されています。[*1]

        ----------------------
         識別子 0x00                    1 バイト (BYTE)
         ヘッダのCRC                    2 バイト (WORD)
        (付加情報)                      1 バイト (BYTE)         [*2]
         次の拡張ヘッダのサイズ         2|4 バイト (WORD|DWORD)
        ----------------------

    [*1]  h1 形式では， パス情報の記録等，拡張ヘッダが存在する場合のみ作成
          されます。
    [*2]  現在未定義ですが LHA において規定予定だったものです。LHA 系のツー
          ルで今後採用される可能性があります。情報を書き込まない場合 (既定
          値の 0x00) は省略することが可能です。 UNLHA32.DLL では，試験的に
          Ver 1.88a よりデータを書き込むようになっています。
       ---------------------------------------------------------------
       bit 7 (MSB)      行末文字変換。テキスト(1)／バイナリ(0)  [*3]
       bit 6            時間格納形式。ローカル(1)／UTC (0)      [*4]
       bit 5            暗号化フラグ。                          [*5]
       bit 4-0          格納時に使用した環境のタイムゾーン。    [*6]
                          0             : 展開時の環境と同じとみなします。
                          その他        : 格納時の時間帯 + 16。
       ---------------------------------------------------------------
    [*3]  UNLHA32.DLL では常に 0 扱いで変換は行われません。
    [*4]  h0/h1 については 1 が，h2 以降の場合は 0 が書き込まれます。
    [*5]  常に 0 扱い (暗号化なし) となります。
    [*6]  h0/h1 では 0 が，h2 以降ではタイムゾーンが書き込まれます。日本時
          間では -9 ("JST-09") なので，7 が書き込まれることになります。

          現在の UNLHA32.DLL では，次の場合を想定していない点に注意：
          -------------------------------------------------------
          ・h0/h1 形式書庫：bit 6 が 0 で bit 4-0 が 0 以外のもの
          ・h2 形式書庫   ：bit 6 が 1 で bit 4-0 が 0 のもの
          ・全形式        ：bit 6 が 0 で bit 4-0 が 0 のもの
                          ・bit 6 が 1 で bit 4-0 が 0 以外のもの
          -------------------------------------------------------

          格納ファイルの更新を行った場合，更新を行った環境のタイムゾーンへ
          変更されてしまう点に注意してください。

    %B  2) ファイル名ヘッダ [*1][*2]    : 　ファイル名が格納されます。
        ----------------------
         識別子 0x01                    1 バイト (BYTE)
         ファイル名                     (ヘッダのサイズ) - 3|5 バイト (char)
         次の拡張ヘッダのサイズ         2|4 バイト (WORD|DWORD)
        ----------------------

    [*1]  基本的には Level 2 以上のヘッダで作成されます。 ヘッダのサイズ情
          報で長さが定義されることから，論理上は WORD の範囲 (- ヘッダのサ
          イズ) までの長さの名前をもてますが，実際には全ヘッダの合計サイズ
          に 4K (UNLHA32.DLL の場合) の制限があり， システムで扱えるファイ
          ル名の長さにも制限があることから，その範囲内での話となります。
          Level 1 ヘッダの場合は， 基本ヘッダにファイル名の長さとして 0 が
          書き込まれている場合のみ，こちらの拡張ヘッダを使用するのが本来の
          仕様ですが，オリジナルを含めて，拡張ヘッダが存在すれば常にそれを
          使用するものが大多数と思われます。
    [*2]  書庫作成時の ANSI/OEM コードページに従ったマルチバイト文字で記録
          されている点に注意が必要です。言語環境等コードページが異なる場合
          は正しく扱えないので，基本的に作成時と同じコードページの環境で書
          庫を扱う必要があります。コードページヘッダの存在する h2 形式書庫
          を Ver 2.39 以降の UNLHA32.DLL で扱った場合については， 当該コー
          ドページをシステムがサポートしていれば正常に扱われます。

      　このファイル名ヘッダの存在しない書庫が存在するようですが，それは不
      正な書庫以外の何物でもありません。 たとえ lhd 形式でもファイル名ヘッ
      ダが必要となります。 参考までに，C マガ 91 年 1 月号での吉崎氏の記事
      では，以下のように言及されています：

            ファイル名ヘッダはレベル2ヘッダでは必須です。また,レベル1
            ヘッダでも,「ファイル名の長さ」に0が書き込まれているとき
            には使用できます。

    %C  3) パス名ヘッダ [*1][*2]        : 　格納時に指定された基準ディレク
                                          トリからのパスが格納されます。
        ----------------------
         識別子 0x02                    1 バイト (BYTE)
         パス名                         (ヘッダのサイズ) - 3|5 バイト (char)
         次の拡張ヘッダのサイズ         2|4 バイト (WORD|DWORD)
        ----------------------

    [*1]  ディレクトリー・セパレータは '0xFF' で表されます。
    [*2]  書庫作成時の ANSI/OEM コードページに従ったマルチバイト文字で記録
          されている点に注意が必要です。言語環境等コードページが異なる場合
          は正しく扱えないので，基本的に作成時と同じコードページの環境で書
          庫を扱う必要があります。コードページヘッダの存在する h2 形式書庫
          を Ver 2.39 以降の UNLHA32.DLL で扱った場合については， 当該コー
          ドページをシステムがサポートしていれば正常に扱われます。

      　パス名ヘッダにおいては，lhd 形式であっても必ず "dir/" といった '/'
      (実際には 0xFF) 付きの名前である必要があります。'/' が付加されていな
      い書庫もあるようですが，それは不正です。参考までに C マガ 91 年 1 月
      号での吉崎氏の記事では，以下のように言及されています：

            ディレクトリ名ヘッダにはディレクトリ名が格納されますが,
            区切り文字はOS依存性を避けるため,"\xff"としました。なお,
            ディレクトリ名の最後には必ず区切り文字をつけておくものと
            します。

    %D  4) コメントヘッダ [*1]          : 　'c' 命令で作成されます。
        ----------------------
         識別子 0x3f                    1 バイト (BYTE)
         コメント                       (ヘッダのサイズ) - 3|5 バイト (char)
         次の拡張ヘッダのサイズ         2|4 バイト (WORD|DWORD)
        ----------------------

    [*1]  UNLHA32.DLL では 2000 バイトまでの制限が存在します。このヘッダは
          正式にはまだ未対応です。

    %E  5) 新属性ヘッダ [*1]            : 　UNLHA32.DLL においてはあまり意
                                          味をなしていません。
        ----------------------
         識別子 0xff                    1 バイト (BYTE)
         ファイル許可属性               4 バイト (DWORD)        [*2]
         GID                            4 バイト (DWORD)        [*3]
         UID                            4 バイト (DWORD)        [*3]
         CTIME (作成日時)               4 バイト (time_t)       [*4]
         ATIME (参照日時)               4 バイト (time_t)       [*4]
         次の拡張ヘッダのサイズ         2|4 バイト (WORD|DWORD)
        ----------------------

    [*1]  UNLHA32.DLL では Level 3 ヘッダの場合に作成されますが， 読み込み
          はすべてのレベルで行われます。 基本的に Level 3 形式の拡張ヘッダ
          として FLABO 上で提案されたものなので，使用は暫定的なものです。
    [*2]  LHa for UNIX のパーミッション項目ヘッダ (識別子 0x50) と同様の値
          が書き込まれます。UNLHA32.DLL では，ディレクトリー属性とオーナー
          書き込み許可属性のみ意味をもちます。
          実際に扱われるのは WORD データとなっていて，上位・下位の規定が行
          われていなかったことから，UNLHA32.DLL では下位ワードに書き込んで
          います。

       ---------------------------------------------------------------
       bit 15           ファイル属性
       bit 14           ディレクトリー属性
       bit 13           シンボリックリンク属性
       bit 11           UID 有効属性
       bit 10           GID 有効属性
       bit  8           オーナー読込許可属性。1 で許可。
       bit  7           オーナー書込許可属性。1 で許可。以下同じ。
       bit  6           オーナー実行許可属性。
       bit  5           グループ読込許可属性。
       bit  4           グループ書込許可属性。
       bit  3           グループ実行許可属性。
       bit  2           その他読込許可属性。
       bit  1           その他書込許可属性。
       bit  0           その他実行許可属性。
       ---------------------------------------------------------------

    [*3]  現バージョンでは無視されます。
    [*4]  h2 の基本ヘッダと同じで UNIX 形式での UTC によるタイムスタンプ。

-----------------------------------------------------------------------
  %f. (Win を含む) MS-DOS 系依存のもの (0x40〜0x7f)
-----------------------------------------------------------------------

    %F  1) 属性ヘッダ                   : 　ファイル等の属性が格納されます。
                                          ただし，属性がアーカイブ属性だけ
                                          (0x20) の場合には作成されません。
        ----------------------
         識別子 0x40                    1 バイト (BYTE)
         ファイルの属性値               2 バイト (WORD)         [*1]
         次の拡張ヘッダのサイズ         2|4 バイト (WORD|DWORD)
        ----------------------

    [*1]  h1 等の基本ヘッダのものとは異なり，こちらは WORD。実際には，Get-
          FileAttributes() の返却値の下位ワードとなります。 ただし，展開時
          に使われるのは，最下位バイトの情報だけです：

                FILE_ATTRIBUTE_READONLY         0x00000001
                FILE_ATTRIBUTE_HIDDEN           0x00000002
                FILE_ATTRIBUTE_SYSTEM           0x00000004
                FILE_ATTRIBUTE_DIRECTORY        0x00000010
                FILE_ATTRIBUTE_ARCHIVE          0x00000020

-----------------------------------------------------------------------
  %g. UNLHA32.DLL 依存のもの (0x40〜0x4f)
-----------------------------------------------------------------------

    %G  1) タイムスタンプヘッダ [*1]    : 　現在では，通常はこのヘッダが作
                                          成されます。
        ----------------------
         識別子 0x41                    1 バイト (BYTE)
         作成日時                       8 バイト (FILETIME)
         更新日時                       8 バイト (FILETIME)
         参照日時                       8 バイト (FILETIME)
         次の拡張ヘッダのサイズ         2|4 バイト (WORD|DWORD)
        ----------------------

    [*1]  Level 2 以上のヘッダの場合に作成されます。UNLHA32.DLL 固有のヘッ
          ダであることから解るように，h0/h1 形式の書庫や h2 以降の書庫であっ
          ても UNLHA32.DLL 以外で作成された書庫の場合は， 基本的に更新日時
          以外が復元されないことになります。

    %H  2) ファイルサイズヘッダ [*1]    : 　4GB を超えるファイルの場合に作
                                          成されます。
        ----------------------
         識別子 0x42                    1 バイト (BYTE)
         圧縮後のサイズ                 8 バイト (LONGLONG or __int64)
         元のファイルサイズ             8 バイト (LONGLONG or __int64)
         次の拡張ヘッダのサイズ         2|4 バイト (WORD|DWORD)
        ----------------------

    [*1]  ファイルサイズが  4GB を超える場合に作成されます。当然ながら UN-
          LHA32.DLL の旧版を含めて， このヘッダ及び 2GB (4GB) 超のファイル
          操作を行えないツールで当該メンバーを扱うことはできません。

    %I  3) タイムゾーンヘッダ [*1]      : 　タイムゾーンが特殊な場合に作成
                                          されます。
        ----------------------
         識別子 0x43                    1 バイト (BYTE)
         バイアス値                     2 バイト (short int) [*2]
         次の拡張ヘッダのサイズ         2|4 バイト (WORD|DWORD)
        ----------------------

    [*1]  中東の一部など，タイムゾーンが 1 時間単位以外の地域で， かつ共通
          ヘッダにタイムゾーンが設定されている場合に作成されます。UNLHA32.
          DLL Ver 1.88a 以降で有効です。
    [*2]  バイアス値は Win32 API の TIME_ZONE_INFORMATION 構造体の Bias 項
          目と同じで，分単位。夏・冬時間の補正を行った結果が書き込まれます。
          格納ファイルの更新を行った場合，更新を行った環境のタイムゾーンへ
          変更されてしまう点に注意してください。

    %J  4) Unicode ファイル名ヘッダ     : 　ファイル名が Unicode  で格納さ
           [*1]                           れます。
        ----------------------
         識別子 0x44                    1 バイト (BYTE)
         ファイル名                     (ヘッダのサイズ) - 3|5 バイト (WCHAR)
         次の拡張ヘッダのサイズ         2|4 バイト (WORD|DWORD)
        ----------------------

    [*1]  Level 2 以上のヘッダで，メンバーの名前が当該コードページで表現で
          きない文字を含んでいる場合のみ作成されます。ヘッダのサイズ情報で
          長さが定義される点は (識別子 0x01 の) ファイル名ヘッダと同じです
          が，WCHAR で表現されていることから， 文字列の長さとしては 1/2
          (sizeof(WCHAR) で割ったもの) となる点に注意が必要です。 UNLHA32.
          DLL Ver 2.39 以降で有効です。

      　このヘッダの存在するメンバーについては，Unicode に対応したソフトが，
      さらに UNLHA32.DLL の Unicode 版 API  を使用した場合しか正常に扱えな
      い点に注意して下さい。既存のソフトについては，"*" ("*.*") 等のワイル
      ドカードを使用し一括して扱った場合のみ，正常に扱うことが可能です。

    %K  5) Unicode パス名ヘッダ [*1]    : 　格納時に指定された基準ディレク
                                [*2]      トリからのパスが  Unicode で格納
                                          されます。
        ----------------------
         識別子 0x45                    1 バイト (BYTE)
         パス名                         (ヘッダのサイズ) - 3|5 バイト (WCHAR)
         次の拡張ヘッダのサイズ         2|4 バイト (WORD|DWORD)
        ----------------------

    [*1]  Level 2 以上のヘッダで，メンバーの名前が当該コードページで表現で
          きない文字を含んでいる場合のみ作成されます。ヘッダのサイズ情報で
          長さが定義される点は (識別子 0x01 の) ファイル名ヘッダと同じです
          が，WCHAR で表現されていることから， 文字列の長さとしては 1/2
          (sizeof(WCHAR) で割ったもの) となる点に注意が必要です。 UNLHA32.
          DLL Ver 2.39 以降で有効です。
    [*2]  ディレクトリー・セパレータは L'0xFFFF' で表されます。 単純にマル
          チバイト文字への変換を行った場合，エラーとなるか既定文字へ変換さ
          れてしまうので注意が必要です。

      　このヘッダの存在するメンバーについては，Unicode に対応したソフトが，
      さらに UNLHA32.DLL の Unicode 版 API  を使用した場合しか正常に扱えな
      い点に注意して下さい。既存のソフトについては，"*" ("*.*") 等のワイル
      ドカードを使用し一括して扱った場合のみ，正常に扱うことが可能です。

    %L  6) コードページヘッダ [*1]      : 　パス名・ファイル名の書き込みに
                                          使われているコードページが格納さ
                                          れます。
        ----------------------
         識別子 0x46                    1 バイト (BYTE)
         コードページ                   (DWORD)
         次の拡張ヘッダのサイズ         2|4 バイト (WORD|DWORD)
        ----------------------

    [*1]  Level 2 以上のヘッダの場合に作成されます。書庫が作成された言語環
          境 (コードページ) と異なる環境で当該書庫を扱う場合には，このヘッ
          ダを参照して適切なコードページで名前を扱う必要がある点に注意が必
          要です。このヘッダを参照しない，又はヘッダが書き込まれていない書
          庫を扱う場合には，当該書庫の作成時と同じ言語環境を使用するか，
          "-jtl" スイッチで適切なコードページを指定してください。 UNLHA32.
          DLL Ver 2.39 以降で有効です。

          コードは GetCP() API 等で得られる値と同じで， 次のようなものとな
          ります：

                コード  コード体系
                   37   IBM EBCDIC - U.S./Canada
                  437   OEM - United States
                  500   IBM EBCDIC - International
                  708   Arabic - ASMO 708
                  709   Arabic - ASMO 449+, BCON V4
                  710   Arabic - Transparent Arabic
                  720   Arabic - Transparent ASMO
                  737   OEM - Greek (formerly 437G)
                  775   OEM - Baltic
                  850   OEM - Multilingual Latin I
                  852   OEM - Latin II
                  855   OEM - Cyrillic (primarily Russian)
                  857   OEM - Turkish
                  858   OEM - Multlingual Latin I + Euro symbol
                  860   OEM - Portuguese
                  861   OEM - Icelandic
                  862   OEM - Hebrew
                  863   OEM - Canadian-French
                  864   OEM - Arabic
                  865   OEM - Nordic
                  866   OEM - Russian
                  869   OEM - Modern Greek
                  870   IBM EBCDIC - Multilingual/ROECE (Latin-2)
                  874   ANSI/OEM - Thai (same as 28605, ISO 8859-15)
                  875   IBM EBCDIC - Modern Greek
                  932   ANSI/OEM - Japanese, Shift-JIS
                  936   ANSI/OEM - Simplified Chinese (PRC, Singapore)
                  949   ANSI/OEM - Korean (Unified Hangeul Code)
                  950   ANSI/OEM - Traditional Chinese (Taiwan; Hong Kong
                                   SAR, PRC)
                 1026   IBM EBCDIC - Turkish (Latin-5)
                 1047   IBM EBCDIC - Latin 1/Open System
                 1140   IBM EBCDIC - U.S./Canada (037 + Euro symbol)
                 1141   IBM EBCDIC - Germany (20273 + Euro symbol)
                 1142   IBM EBCDIC - Denmark/Norway (20277 + Euro symbol)
                 1143   IBM EBCDIC - Finland/Sweden (20278 + Euro symbol)
                 1144   IBM EBCDIC - Italy (20280 + Euro symbol)
                 1145   IBM EBCDIC - Latin America/Spain (20284 +
                                     Euro symbol)
                 1146   IBM EBCDIC - United Kingdom (20285 + Euro symbol)
                 1147   IBM EBCDIC - France (20297 + Euro symbol)
                 1148   IBM EBCDIC - International (500 + Euro symbol)
                 1149   IBM EBCDIC - Icelandic (20871 + Euro symbol)
                 1200   Unicode UCS-2 Little-Endian (BMP of ISO 10646)
                 1201   Unicode UCS-2 Big-Endian
                 1250   ANSI - Central European
                 1251   ANSI - Cyrillic
                 1252   ANSI - Latin I
                 1253   ANSI - Greek
                 1254   ANSI - Turkish
                 1255   ANSI - Hebrew
                 1256   ANSI - Arabic
                 1257   ANSI - Baltic
                 1258   ANSI/OEM - Vietnamese
                 1361   Korean (Johab)
                10000   MAC - Roman
                10001   MAC - Japanese
                10002   MAC - Traditional Chinese (Big5)
                10003   MAC - Korean
                10004   MAC - Arabic
                10005   MAC - Hebrew
                10006   MAC - Greek I
                10007   MAC - Cyrillic
                10008   MAC - Simplified Chinese (GB 2312)
                10010   MAC - Romania
                10017   MAC - Ukraine
                10021   MAC - Thai
                10029   MAC - Latin II
                10079   MAC - Icelandic
                10081   MAC - Turkish
                10082   MAC - Croatia
                12000   Unicode UCS-4 Little-Endian
                12001   Unicode UCS-4 Big-Endian
                20000   CNS - Taiwan
                20001   TCA - Taiwan
                20002   Eten - Taiwan
                20003   IBM5550 - Taiwan
                20004   TeleText - Taiwan
                20005   Wang - Taiwan
                20105   IA5 IRV International Alphabet No. 5 (7-bit)
                20106   IA5 German (7-bit)
                20107   IA5 Swedish (7-bit)
                20108   IA5 Norwegian (7-bit)
                20127   US-ASCII (7-bit)
                20261   T.61
                20269   ISO 6937 Non-Spacing Accent
                20273   IBM EBCDIC - Germany
                20277   IBM EBCDIC - Denmark/Norway
                20278   IBM EBCDIC - Finland/Sweden
                20280   IBM EBCDIC - Italy
                20284   IBM EBCDIC - Latin America/Spain
                20285   IBM EBCDIC - United Kingdom
                20290   IBM EBCDIC - Japanese Katakana Extended
                20297   IBM EBCDIC - France
                20420   IBM EBCDIC - Arabic
                20423   IBM EBCDIC - Greek
                20424   IBM EBCDIC - Hebrew
                20833   IBM EBCDIC - Korean Extended
                20838   IBM EBCDIC - Thai
                20866   Russian - KOI8-R
                20871   IBM EBCDIC - Icelandic
                20880   IBM EBCDIC - Cyrillic (Russian)
                20905   IBM EBCDIC - Turkish
                20924   IBM EBCDIC - Latin-1/Open System (1047 +
                                     Euro symbol)
                20932   JIS X 0208-1990 & 0121-1990
                20936   Simplified Chinese (GB2312)
                21025   IBM EBCDIC - Cyrillic (Serbian, Bulgarian)
                21027   Extended Alpha Lowercase
                21866   Ukrainian (KOI8-U)
                28591   ISO 8859-1 Latin I
                28592   ISO 8859-2 Central Europe
                28593   ISO 8859-3 Latin 3
                28594   ISO 8859-4 Baltic
                28595   ISO 8859-5 Cyrillic
                28596   ISO 8859-6 Arabic
                28597   ISO 8859-7 Greek
                28598   ISO 8859-8 Hebrew
                28599   ISO 8859-9 Latin 5
                28605   ISO 8859-15 Latin 9
                29001   Europa 3
                38598   ISO 8859-8 Hebrew
                50220   ISO 2022 Japanese with no halfwidth Katakana
                50221   ISO 2022 Japanese with halfwidth Katakana
                50222   ISO 2022 Japanese JIS X 0201-1989
                50225   ISO 2022 Korean
                50227   ISO 2022 Simplified Chinese
                50229   ISO 2022 Traditional Chinese
                50930   Japanese (Katakana) Extended
                50931   US/Canada and Japanese
                50933   Korean Extended and Korean
                50935   Simplified Chinese Extended and Simplified Chinese
                50936   Simplified Chinese
                50937   US/Canada and Traditional Chinese
                50939   Japanese (Latin) Extended and Japanese
                51932   EUC - Japanese
                51936   EUC - Simplified Chinese
                51949   EUC - Korean
                51950   EUC - Traditional Chinese
                52936   HZ-GB2312 Simplified Chinese
                54936   GB18030 Simplified Chinese (4 Byte)
                57002   ISCII Devanagari
                57003   ISCII Bengali
                57004   ISCII Tamil
                57005   ISCII Telugu
                57006   ISCII Assamese
                57007   ISCII Oriya
                57008   ISCII Kannada
                57009   ISCII Malayalam
                57010   ISCII Gujarati
                57011   ISCII Punjabi
                65000   Unicode UTF-7 (CP_UTF7)
                65001   Unicode UTF-8 (CP_UTF8)

    %M  7) プロテクト情報ヘッダ [*1]    : 　プロテクト書庫の場合に作成され
                                            ます。予約項目です。
        ----------------------
         識別子 0x47                    1 バイト (BYTE)
         サブ ID (暗号化の種類)         1 バイト (BYTE) [*2]
         情報フラグ (マスク)            2 バイト (WORD) [*3]
         パスワード検証データ           2 バイト (WORD) [*4]
         IV 情報                        8 バイト (BYTE) [*5]
         圧縮形式                       3 バイト (char) [*6]
         次の拡張ヘッダのサイズ         2 バイト (WORD)
        ----------------------

    [*1]  プロテクト書庫の場合に作成されます。当該メンバーが暗号化されてい
          ない場合は無視されます。
    [*2]  サブ ID (暗号化の種類) を指定します。ID に従って以降の情報が変化
          します。現バージョンでは必ず 0x01 となります。

               ID     暗号化の種類
               0x01   AES-256

    [*3]  各付加情報の有無を指定します。 ビットが 1 の場合のみ対応する付加
          情報が記録されます。

       ---------------------------------------------------------------
       bit  3-16 (MSB)  現バージョンでは未使用。
       bit  2           圧縮形式。
       bit  1           IV 情報。
       bit  0           パスワード検証データ。
       ---------------------------------------------------------------

    [*4]  パスワード検証に使用するデータが記録されます。現バージョンでは未
          使用。
    [*5]  AES の CBC モードで使用する IV の前半 64 ビットが記録されます。
          現バージョンでは未使用。
    [*6]  簡易暗号化ヘッダの場合に記録されます。本来基本ヘッダに記録される
          べき圧縮法を示す ID (例えば "lh5") が，ここに記録されます。
          現バージョンでは未使用。

-----------------------------------------------------------------------
  %h. LHa for UNIX 依存のもの <UNLHA32.DLL が解釈するもの>  (0x50〜0x5f)
-----------------------------------------------------------------------

    %N  1) ファイル許可属性ヘッダ

        ----------------------
         識別子 0x50                    1 バイト (BYTE)
         ファイル許可属性               2 バイト (WORD)         [*1]
         次の拡張ヘッダのサイズ         2|4 バイト (WORD|DWORD)
        ----------------------

    [*1]  新属性ヘッダに書き込まれるものと同じです。UNLHA32.DLL が使用する
          のはディレクトリー属性と書き込み許可属性のみとなります。

    %O  2) 更新日時ヘッダ [*1]

        ----------------------
         識別子 0x54                    1 バイト (BYTE)
         WTIME (参照日時)               4 バイト (time_t)       [*2]
         次の拡張ヘッダのサイズ         2|4 バイト (WORD|DWORD)
        ----------------------

    [*1]  h1 形式ではタイムスタンプが MS-DOS 形式のため，LHa for UNIX が別
          途書き込むものです。
    [*2]  h2 の基本ヘッダと同じで UNIX 形式での UTC によるタイムスタンプと
          なります。

-----------------------------------------------------------------------
  %i. LHA OS/2 依存のもの <UNLHA32.DLL が解釈するもの>  (0x7f)
-----------------------------------------------------------------------

    %P  1) 新属性ヘッダ [*1]

        ----------------------
         識別子 0x7f                    1 バイト (BYTE)
         MS-DOS ファイル属性            2 バイト (WORD)         [*2]
         ファイル許可属性               2 バイト (WORD)         [*3]
         GID                            2 バイト (WORD)
         UID                            2 バイト (WORD)
         CTIME (作成日時)               4 バイト (time_t)
         ATIME (参照日時)               4 バイト (time_t)
         次の拡張ヘッダのサイズ         2|4 バイト (WORD|DWORD)
        ----------------------

    [*1]  本来は 0xFF の新属性ヘッダと同じものだったのですが，採用時期が違っ
          た (UNLHA32.DLL はより初期の仕様が固まっていない時期) ため，異なっ
          たものとなっています。
    [*2]  0x40 の属性ヘッダと同じです。  一部の属性については (当然ですが)
          ファイル許可属性と整合性のとれている必要があります。
    [*3]  0x50 のファイル許可属性ヘッダと同じです。MS-DOS ファイル属性と整
          合性のとれている必要があります。

-----------------------------------------------------------------------
  %j. 拡張ヘッダ識別子一覧
-----------------------------------------------------------------------

        ------------------------------
    00  共通ヘッダ                       h1，h2         共通
    01  ファイル名ヘッダ                 h2             共通
    02  パス名ヘッダ                     h1，h2         共通
    3f  コメントヘッダ                  (h1，h2)        UNLHA32.DLL 固有
    40  属性ヘッダ                       h1，h2         MS-DOS 固有
    41  タイムスタンプヘッダ             h2             UNLHA32.DLL 固有
    42  ファイルサイズヘッダ             h2             UNLHA32.DLL 固有
    43  タイムゾーンヘッダ               h2             UNLHA32.DLL 固有
    44  Unicode ファイル名ヘッダ         h2             UNLHA32.DLL 固有
    45  Unicode パス名ヘッダ             h2             UNLHA32.DLL 固有
    46  コードページヘッダ               h2             UNLHA32.DLL 固有
    50  ファイル許可属性ヘッダ           h1，h2         LHa for UNIX 固有
    51  GID/UID ヘッダ                   h1，h2         LHa for UNIX 固有
    52  グループ名ヘッダ                 h1，h2         LHa for UNIX 固有
    53  ユーザー名ヘッダ                 h1，h2         LHa for UNIX 固有
    54  更新日時ヘッダ                   h1             LHa for UNIX 固有
    7e  EA ヘッダ                        h2             LHA OS/2 固有
    7f  新属性ヘッダ                    (h3)            LHA OS/2 固有
    fc  カプセル化ヘッダ                (h3)
    fd  拡張属性ヘッダ                  (h3)
    fe  シンボリックリンクヘッダ        (h3)
    ff  新属性ヘッダ                    (h3)            UNLHA32.DLL 固有
        ------------------------------


-----------------------------------------------------------------------
%3. 暗号化ヘッダ
-----------------------------------------------------------------------

　ヘッダが暗号化されている場合， 暗号化の有無を示す "ph1" の ID が圧縮法と
して基本ヘッダに記録され，実際の圧縮法は拡張ヘッダのプロテクト情報ヘッダに
記録されます。 ヘッダ自体については，基本ヘッダの 8 バイト目 (圧縮法を示す
ID の直後) から拡張ヘッダの最後 (終端を示す 0x0000) までについて暗号化が行
われます。

==========================================================================
