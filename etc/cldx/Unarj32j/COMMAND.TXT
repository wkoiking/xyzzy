=======================================================================
               UNARJ32.DLL Ver 1.10a  コマンド説明ファイル
=======================================================================

                                               Ｍｉｃｃｏ (Nov.10,2007)

はじめに

　UNARJ32.DLL のドキュメント構成は以下のようになっています。

    API.TXT      : 基幹を成す Unarj() 系及び OpenArchive() 系 API の説明
    COMMAND.TXT  : Unarj() に渡すコマンド文字列についての説明
    WINMES.TXT   : SetOwnerWindow() 系 API の説明
    ENUMAPI.TXT  : SetEnumMembersProc() 系 API の説明
    STRTABLE.TXT : 言語設定用 API についての説明
    HEADER.TXT   : ARJ の書庫仕様 (ただし，UNARJ32.DLL が扱うもの)
    HISTORY.TXT  : 修正履歴

　このドキュメントでは，Unarj() 等に渡すコマンドスイッチについての詳細がが
説明されています。


--------------------------------------------------------------------------
%1  1. コマンドラインの様式
%2  2. 命令の一覧
%3  3. 命令の詳細
%4  4. スイッチオプションの一覧
%5  5. スイッチオプションの詳細
%6  6. 基準ディレクトリについて
%7  7. レスポンスファイル
%8  8. 環境変数
--------------------------------------------------------------------------


%1.  コマンドラインの様式

　Unarj() に渡すコマンド文字列は， 基本的に ARJ.EXE Ver 2.41a のコマンド体
系 (展開部分) に準拠しています。が，命令・スイッチ指定等が実装されていない
技術解説用の UNARJ.EXE を基にしているため， UNARJ32.DLL では実装されていな
いものや指定方法の異なるものがあることに注意してください。

　コマンド書式は次のようなものとなります。

    [<command>] [[-<switch>[+|-]]...] <archive_file_name>[.ARJ]
      [[<base_directory_name>\] [<path_name>|<wild_name>]...]]...

                command                 : 命令
                switch                  : スイッチ
                archive_file_name       : 書庫名
                base_directory_name     : 基準ディレクトリ
                path_name               : パス (ファイル) 名
                wild_name               : ワイルドカード

  　命令及びスイッチは大文字・小文字の区別を行いません。また，スイッチの位
  置についても問わない関係上，ARJ.EXE のように『ファイル毎にスイッチを指定
  する』ことはできません。ただし，コマンド解釈が単純に前のほうから行われる
  ため，スイッチの指定順序が動作に影響を与える場合があるので注意してくださ
  い。

  　各パラメータは ' ' (スペース等空白文字) で区切るようにしてください。

  　命令はコマンドラインの (スイッチ以外の) 最初のパラメータとしてください。
  命令を省略した場合は， (判別可能であれば) 'l' が指定されたものとみなしま
  す。反対に言えば，"e" などといった命令と混同されるような名前の書庫を拡張
  子を付加せずに指定した場合には正常に扱えないことになります。誤認識を避け
  るため，命令は省略しないのが普通です。

  　スイッチを表す文字としては '-' と '/' が使えます。ただし，スイッチ文字
  を混在する事はできません。 スイッチ文字として '-' を使用している場合は，
  '/' はディレクトリの区切り文字として使えます。誤認識をさけるために，なる
  べく '-' を使用するようにしてください。

  　UNARJ32.DLL は，コマンドラインに現れるコマンドでもスイッチでもない最初
  のパラメータを ARJ 書庫名とみなします。 他の拡張子が付加されていない場合
  に限り ".ARJ" の拡張子を省略することができます。書庫の作成を伴う場合は，
  省略されていれば ".ARJ" を補います。拡張子が付加されないようにしたい場合
  は次のように指定してください。

      例 :    e archive. c:\tmp\
           "archive" という拡張子なしの名前の書庫を展開。

  　展開基準ディレクトリを指定する場合は，パス名は '\' 又は ':' で終わらな
  ければいけません。 最後の '\' 等を省略するとファイル指定とみなされてしま
  うので注意してください。詳しくは後述の『基準ディレクトリについて』の項を
  参照してください。

      例 :    e archive c: *.doc d:\tmp\ *.txt -f
           c ドライブのカレントディレクトリに .DOC を，d:\tmp に .TXT
           を展開。

  　処理すべきファイルのリストを基準ディレクトリの次に指定することができま
  す。基準ディレクトリが省略された場合はカレントディレクトリかレジストリで
  指定されたディレクトリが基準ディレクトリとして使用されます。

  　リストにはワイルドカードを含めることができます。ワイルドカードは Win32
  の指定方法を参考に '*' のワイルドカードが '.' にもマッチするようになって
  います。従って，"*" の指定で『すべてのファイル』を意味することになります。
  ARJ.EXE とは異なった仕様である点に注意してください。

  　ワイルドカードとして使用可能なのは '*' (複数の文字にマッチ)，'?' (1 文
  字にマッチ) の 2 つのみです。

      例 : *                    すべてのファイルにマッチ
           *.ne.*               nifty.ne.jp.TXT 等 .ne  の拡張子を間に含む
                                ファイルにマッチ
           *.TXT                nifty.ne.jp.TXT 等最後に .TXT の拡張子を含
                                むファイルにマッチ
           *.*                  例外的にすべてのファイルにマッチ
           *.                   拡張子をもたないファイルにマッチ。Win32 で
                                はこの指定でもすべてのファイルがマッチする
                                のに対して，UNARJ32.DLL ではマッチしないの
                                で注意してください
           *.*.*                拡張子を２つ以上もつファイルがマッチ。上記
                                の "*." の処理の関係上こうなってしまいます
           *a*                  'a' の文字を含む名前のファイルがマッチ

  　リストが指定されなかった場合は，"*.*" が指定されたものとみなされます。

  　スペースを含む名前のファイルを扱いたい場合は '"'  で括るようにします。
  括られていない場合は複数の文字列と判断されます。括る位置に制限はありませ
  んが，以前の版との互換性を考慮して，以下の例におけるスイッチ指定のように
  パラメータすべてを括るようにしたほうがいいでしょう。

      例 : e archive "E:\work directory\" *.doc

  　'"' で括られた部分については，単にスペースをセパレータとして認識しない
  だけなので気を付けてください。一部の環境のような『'"' で括られた部分につ
  いては，スイッチ文字等を無視する』といった解釈は行われません。

  　多くのリストが必要となり，コマンドラインで直接指定するのが難しい場合に
  は，レスポンスファイルを使用することができます。レスポンスファイルである
  ことを示すには，ファイル名の前に '!' を付ける必要があります。もし '!' で
  始まるファイル名を処理するなどの理由で変更したい場合は "-!" スイッチを使
  います。

      例 :    e archive c:\tmp\ !response.lst
           展開するファイルのリストを response.lst で指定。

  　詳しくは後述のレスポンスファイルの項を参照してください。

(参考)
  　Unarj() については  ARJ ファイルの指定にワイルドカードを使用する事がで
  きます。現バージョンではその他の API で ARJ ファイルの指定にワイルドカー
  ドは使用できません。


%2.  命令の一覧

        e, ev: 書庫のファイルを展開
        l    : 書庫の内容の一覧出力
        lv   : 書庫の内容の一覧出力
        p    : テキストファイルをバッファへ出力
        t    : 書庫の完全性検査
        v    : 書庫の内容の冗長な一覧表示
        vv   : 書庫の内容の冗長な一覧表示
        x, xv: パス情報を有効にしてファイルを展開


%3.  命令の詳細

        e, ev: 書庫内のファイルを展開

          　この命令は，書庫から１個以上のファイルをカレントディレクトリ又
          は指定されたディレクトリに展開します。"ev" 命令については UNZIP.
          DLL との互換性のため付けてあります。

          もし，UNARJ32.DLL  が展開中に CRC や不良ファイルデータのエラーに
          出合うと，その破損している展開されたファイルを確認の後消去します。

          例 :    e archive c:\windows\system *.dll c:\tmp\ *.*
              DLL を C:\WINDOWS\SYSTEM に，その他のファイルを C:\TMP に
              展開

          　'e' 命令では，格納ファイルのパス情報が無視され，すべて指定した
          ディレクトリに展開されます。従って，パス情報の異なる同名のファイ
          ルは上書きされてしまうことになりますので，注意が必要です。

        l: 書庫の内容の一覧出力

          　書庫の内容の一覧を出力します。 出力は LHA 風の次のようなものと
          なります。'v' 命令もそうですが，この出力に関しては，ロケール等に
          関係なく必ずこの形式になります。格納ファイルがパス情報をもってい
          る場合，ファイル名の先頭に '+' の文字が付加されます。

===============================================================================
Processing archive: C:/SOU/UP/SOU/ARJ250-2.ARJ
Archive created: 1996-03-02 01:57:10, 1996-03-02 01:57:10 に変更されました。
  Name          Original    Packed  Ratio   Date     Time   Attr Type     CRC
--------------  --------  -------- ------ -------- -------- ---- ----- --------
  ARJ.J           187201     58033  31.0% 96-03-02 01:57:08 A--W -ar1- 8CA06F87
--------------  --------  -------- ------ -------- --------
      1 files     187201     58033  31.0% 96-03-02 01:57:10
===============================================================================

        lv: 書庫の内容の一覧出力

          　書庫の内容の一覧を出力します。出力は ARJ.EXE の形式となります。
          ただし，Ver 2.41a の頃の書式なので，作成日時項目等が存在する書庫
          であっても，それらが表示されることはありません。

          　表示の行末のBTPMGVXの意味は，
               B -> バックアップの印がついている
               T -> テキスト/バイナリ/ディレクトリの型
               P -> 'v' の一覧で，パスの情報がでる
               M -> 使われている圧縮法
               G -> ファイルは暗号化されている
               V -> 書庫は別のボリュームに続いている
               X -> このファイルはより大きなファイルの拡張された部分

          　出力は次のようになります。

===============================================================================
Processing archive: C:/SOU/UP/SOU/ARJ250-2.ARJ
Archive created: 1996-03-02 01:57:10, 1996-03-02 01:57:10 に変更されました。
Filename       Original Compressed Ratio DateTime modified CRC-32   AttrBTPMGVX
------------ ---------- ---------- ----- ----------------- -------- -----------
ARJ.J            187201      58033 0.310 96-03-02 01:57:08 8CA06F87 A--W T 1
------------ ---------- ---------- ----- -----------------
     1 files     187201      58033 0.310 96-03-02 01:57:10
===============================================================================

        p: テキストファイルをバッファへ出力

          　ARJ.EXE では標準出力への出力ですが， Windows での GUI アプリに
          おいては標準出力のようなものが通常使用されないことから，UNARJ32.
          DLL ではバッファへの出力になります。この機能では，展開されるファ
          イルのみを出力に含むように動作します。

        t: 書庫の完全性検査

          　選択されたファイルの内容の CRC 値が正しいか試験します。 ファイ
          ル内容の確認には 32 ビット CRC を使っています。

        v: 書庫の内容の冗長な一覧表示

          　LHA での 'v' 命令と同様な感じの一覧を表示します。

          　出力は次のようになります。

===============================================================================
Processing archive: C:/SOU/UP/SOU/ARJ250-2.ARJ
Archive created: 1996-03-02 01:57:10, 1996-03-02 01:57:10 に変更されました。
  Name          Original    Packed  Ratio   Date     Time   Attr Type     CRC
--------------  --------  -------- ------ -------- -------- ---- ----- --------
ARJ.J
                  187201     58033  31.0% 96-03-02 01:57:08 A--W -ar1- 8CA06F87
--------------  --------  -------- ------ -------- --------
      1 files     187201     58033  31.0% 96-03-02 01:57:10
===============================================================================

        vv: 書庫の内容の冗長な一覧表示
          　この命令は 'lv' 命令の情報に加えて，書庫ファイル完全パス名とホ
          スト OS の一覧を表示します。'v' 命令はまた，パス名の直前に続き番
          号を表示します。 ただし，"-#" スイッチは現バージョンでは使えませ
          ん。

          　出力は次のようになります。

===============================================================================
Processing archive: C:/SOU/UP/SOU/ARJ250-2.ARJ
Archive created: 1996-03-02 01:57:10, 1996-03-02 01:57:10 に変更されました。
Sequence/Pathname/Comment
Rev Host OS    Original Compressed Ratio DateTime modified CRC-32   AttrBTPMGVX
------------ ---------- ---------- ----- ----------------- -------- -----------
002) ARJ.J
 7  MS-DOS       187201      58033 0.310 96-03-02 01:57:08 8CA06F87 A--W T 1
------------ ---------- ---------- ----- -----------------
     1 files     187201      58033 0.310 96-03-02 01:57:10
===============================================================================

        x, xv: パス情報を有効にしてファイルを展開

          　この命令は， 'e' 命令等と同様に書庫から 1 個以上のファイルを展
          開しますが，その際に格納ファイルのパス情報を使用してディレクトリ
          の再構築を行います。


%4.  スイッチオプションの一覧

        -:                      スイッチ指定文字の無効化           [---]
        !:                      レスポンスファイル指定文字の設定   [-!!]
        +:                      レジストリの設定を無視             [-+-]
        a[-|+]:                 任意のファイル属性を許す           [-a+]
        c:[-|+]                 タイムスタンプ検査を省略           [-c-]
        f[-|+]:                 すでにあるファイルの更新           [-f-]
        f1:                     すでにあるより古いファイルの更新
        f2:                     すでにある異なるファイルの更新
        i[-|+]:                 展開状況ダイアログ表示の抑止       [-i-]
        j:                      スイッチ文字の意味を交替させる
        n[-|+]:                 新規ファイルのみ                   [-n-]
        o[b][<時間指定>]:       YYMMDDHHMMSS の日付以降
        p[-|+|1]:               全パス名で合致                     [-p-]
        r[-|+]:                 再帰的検索                         [-r-]
        t[-|+]:                 バイナリモードを指定               [-t-]
        u[-|+]:                 ファイルの更新                     [-u-]
        u1:                     ファイルの更新 (不在と古いもの)
        u2:                     異なるファイルの更新 (不在と異なるもの)
        v[-|+]:                 マルチボリュームを有効に           [-v-]
        x[<ファイル名>]:        除外するファイル名
        y[-|+]:                 すべての質問に yes と仮定          [-y-]
        ja1:                    書庫の注釈の表示を抑止
        jd[<サイズ>]:           ディスクの空き容量を確認           [-jd-]
        jf[-|+|1]:              全指定パスを使用                   [-jf-]
        jl[-|+]:                ファイル名のみを表示               [-jl-]
        jr[-|+]:                不良ファイルを無視して処理を継続   [-jr-]
        jy[<フラグ>]:           yes と仮定して質問を抑制
          a -                   マルチボリュームの展開時に書き足し
                                の確認を省略
          c -                   ディレクトリ作成の確認を省略
          k -                   使用できるディスク容量の確認の省略
          n -                   新ファイル名の要求の省略
          o -                   既存ファイルへの上書き確認の省略
          v -                   次のボリュームに移行してよいかの確
                                認を省略
        ha[-|+]:                書き込み不可属性を無視             [-ha-]
        hb[<ファイル名>]:       ファイル・モードを指定
        he[-|+]:                最初の拡張子を認識                 [-he-]
        hj[-|+]:                x 命令を e 命令と同様と見なす      [-hj-]
        hk[-|+]:                索引ファイルの作成を抑止           [-hk+]
        hm[-|+]:                エラーメッセージ表示の抑止         [-hm-]
        hn[-|+|2]:              展開ファイルの合計サイズを 100% と
                                した進捗グラフの表示               [-hn-]
        ho[-|+]:                ダイアログのオーナーウィンドウの指定
                                                                   [-ho-]
        hp[-|+]:                進捗バーをプログレス・バーで表示   [-hp-]
        hq[-|+]:                ダイアログを前面に表示             [-hq-]
        ht[<フラグ>]:           各種フラグの設定
          b -                   メッセージループを回さない         [-htb-]
          c -                   展開できなかったファイル数を返す   [-htc-]
          e -                   展開時の上書きオープン等をエラーと
                                する                               [-hte-]
          f -                   タイムスタンプの補正を行わない     [-htf+]
          m -                   サウンドを使用する                 [-htm-]
          p -                   不正なパスを拒否                   [-htp1]
          s[<優先順位>] -       優先順位の指定
          z -                   小文字の拡張子を付加               [-htz-]
        hy[<ファイル名>]:       ログをファイルに出力
        hz<フラグ>:             各種フラグの設定
          s[0|<文字数>] -       スペース文字の連続数を指定          [-hzs]
          z[0|1|<拡張子>] -     実行可能ファイルの指定             [-hzz+]


%5.  スイッチオプションの詳細

  　UNARJ32.DLL では， 元々 UNARJ.EXE にスイッチが存在しないことから，ARJ.
  EXE (ただし Ver 2.41a 辺りのもの) の展開関係のスイッチをある程度反映した
  上に UNLHA32.DLL と同様のスイッチを追加したものになっています。 UNLHA32.
  DLL と違ってスイッチ指定は数字ではなく， 明示的に指定する場合は '+'，'-'
  で行います。一部 '1' など数字が付加されたものがありますが，"-p+" と "-p1"
  は別の意味なので注意してください。

        -: スイッチ指定文字の無効化 [---]

          　このスイッチは，スイッチ指定文字を無効化するのに使います。"--"
          ("--+") を指定して無効化を行った場合，以降スイッチ指定を一切行え
          なくなる点に注意してください。

              例：  e archive -- -Test.txt
                        -Test.txt を扱うために指定文字を無効に設定

        !: レスポンスファイル指定文字の設定  [-!!]

          　このスイッチは，レスポンスファイルに使う文字を変更するのに使い
          ます。引数の文字なしのスイッチ "-!" は，レスポンスファイル指定の
          文字を無効にします。

              例：  e archive -!@ @list.fil
                        レスポンスファイル指定文字を '@' に変更
                    e archive -! !.bat
                        !.bat を扱うために指定文字を無効に設定

        +: レジストリの設定を無視  [-+-]

          　通常 UNARJ32.DLL はレジストリの設定を省略値として使用しますが，
          "-+"  スイッチが指定されるとレジストリの設定を使わないようになり
          ます。レジストリの設定をオーバライドさせるには，このスイッチを使
          用するのではなく，明示的にスイッチを指定する方法によるほうがよい
          でしょう。

          　当然ながら，"-++" を指定した場合には，UnarjConfigDialog() によ
          るレジストリ設定は無効となります。

        a[-|+]: 任意のファイル属性を許す  [-a+]

          　ARJ.EXE では，このスイッチは，圧縮時にすべての属性のファイルを
          圧縮するためのスイッチであり，展開時には機能しませんが，反対に展
          開時にはシステム属性や，不可視属性のファイルも必ずそのままの属性
          で展開されるために不便な部分があります。

          　UNARJ32.DLL での "-a" スイッチは，不可視属性などのファイルの展
          開を行いたくない場合にスイッチオフの形で使用するものです。デフ
          ォルトはオンです。

        c:[-|+] タイムスタンプ検査を省略  [-c-]

          　"-f"  スイッチ等が設定されている状態で書庫からファイルを展開す
          る時，UNARJ32.DLL は古いファイルは通常展開しません。 "-c" スイッ
          チは，このような古いファイルも展開するようにします。

              例：  e archive c:\tmp\ -c
                        タイムスタンプに関係なく展開・上書きする

          (参考)
          　API.TXT でも記述していますが， NTFS 上のファイルや UNIX 等が起
          源の 00:00:01 といった奇数秒のタイムスタンプをもつファイルの扱い
          には注意が必要です。 NTFS はともかく，DosDateTime (ftime) でしか
          タイムスタンプを表現できない FAT においては， その仕様から秒に関
          しては偶数秒に切り詰めざるを得ません (ftime は秒を 5  ビットで表
          すので，1/2…つまり 2 秒単位でしか秒を表現できない)。

          　DOS や Win3.1，Win95  では単純に最下位ビットを切り捨てていまし
          たが，起源が奇数秒のファイルについて，タイムスタンプの比較時に必
          ず『古い』と判断される不具合が発生する結果となっていました。

          　そのため，NTFS の登場とネットワーク重視に伴い，NT 系のプラット
          フォームでは切り上げを行うように改善・仕様変更されています。

          　ところが，Win98 においては，同様の仕様変更が行われるはずが，実
          際にはデバイスに書き込まれる  SetFileTime() API 等 (の結果) では
          切り上げが行われるものの，形式変更を行う FileTimeToDosDateTime()
          等では切り捨てのまま (つまりバグ) という中途半端どころか余計な不
          具合を出すだけの仕様となってしまい，以降の Win98SE や WinME でも
          依然として修正が行われていない状況となっています。

          　アーカイバ関連で言えば，上記の 00:00:01 のタイムスタンプをもつ
          ファイルを展開した場合，LHA を始めとして DOS や Win16 のアプリを
          始め， FileTimeToDosDateTime() のバグが考慮されていない Win32 ア
          プリでも， NT 系と (Win95 はともかく) Win9X 系での動作が異なる結
          果となってしまう点に注意が必要となります。

          　上記のファイルが存在するデバイスをネットワーク経由で  ARJ 書庫
          に格納すると想定した場合， NT 系で実行したものが 00:00:02 となる
          のに対して，WinME で実行したものは 00:00:00 となってしまいます。

          　アーカイバに限らず，タイムスタンプを扱う際には，以上のようなシ
          ステムのバグ等も考慮に入れる必要が出てくると思われます。

          (追記)
          　FileTimeToDosDateTime() については，さらに Win XP にもバグが存
          在するようです。上述のとおり NT 系では 00:00:01 といったタイムス
          タンプは 00:00:02 に切り上げされるわけですが， Win XP では恐ろし
          いことに 00:00:00 も 00:00:02 に切り上げされてしまいます。どうも
          DosDateTime に変換してからインクリメントする…という大ボケの処理
          になっているようです。(^^;;  NT 系でもバグが登場してしまったとな
          ると，もはや FileTimeToDosDateTime()  は全面的に使用しないのが得
          策のようです。
          　なお，Win XP でのバグについては，常に発生するのかは未確認です。
          複数の環境で確認できたことと，別のソフトで同様のネタが登場してい
          たことから， 『(システム側の問題が原因となって) 発生する環境が存
          在する』ことだけは確かなようです。

        f[-|+|1|2]: すでにあるファイルの更新  [-f-]

          　このスイッチを 'e' や 'x' 命令と共に使うと，UNARJ32.DLL は書庫
          からより新しいファイルのみを展開するようになります。

        f1: すでにあるより古いファイルの更新

          　このスイッチを 'e' や 'x' 命令と共に使うと，UNARJ32.DLL は書庫
          からより古いファイルのみを展開するようになります。

        f2: すでにある異なるファイルの更新

          　このスイッチを 'e' や 'x' 命令と共に使うと，UNARJ32.DLL はサイ
          ズやタイムスタンプの異なるファイルのみを展開するようになります。

        i[-|+]: 展開状況ダイアログ表示の抑止  [-i-]

          　通常 UNARJ32.DLL  は処理を行う際にダイアログにより進捗情報を表
          示しますが，"-i"  を指定することによりダイアログの表示を抑止する
          ことができます。このスイッチを指定してもエラーメッセージ等の表示
          は行われますので注意してください。エラーメッセージや確認メッセー
          ジの抑制には "-hm" スイッチを使用します。

        j: スイッチ文字の意味を交替させる

          　このスイッチは，スイッチ文字の意味を交替させます。この交替は，
          スイッチの文字列の区切りに来た時，普通のスイッチ文字の意味に戻る
          ようにリセットされます。

          　例えば，"-ja" は "-a" とは違いますが，"-jja" は 2 回交替してい
          るので "-a" と同じです。 また，"-jaje" は "-ja -e" と，"-jae" は
          "-ja -je" と同じです。
          　これに対して "-h" スイッチは意味の交替が行われないので，"-hmf"
          は "-hm -f" の意味となります。

        n[-|+]: 新規ファイルのみ  [-n-]

          　'e' や 'x' 命令と共に使うと， 対象ディレクトリに存在しないファ
          イルのみを展開します。

        o[b][<時間指定>]: YYMMDDHHMMSS の日付以降

          　スイッチ "-o" 自身は『今日書き換えられたファイル』の選択を意味
          します。 "-o" に日付，さらに付加的に時間を続けると， UNARJ32.DLL
          はその日付・時間以降に書き換えられたファイルのみを選択します。
          　日時の指定は YYMMDDHHMMSS の形式で行います。

              例：  e test -o9001021700
                        1990-01-02 17:00 以降に書き換えられたファイルを選ぶ

          "80" より小さい年指定は 2000年 以降とみなします。

              例：  e test -o01
                        2001 年以降に書き換えられたファイルを選ぶ

          冒頭に 'l' の文字を付加することで，YYYYMMDDHHMMSS の書式での指定
          が可能となります。

              例：  e test -ol19990217
                        1999-02-17 00:00 以降に書き換えられたファイルを選ぶ

          　スイッチ "-ob"  は『今日より前に書き換えられたファイル』を選び
          ます。"-ob" に日付，さらに付加的に時間を続けると，UNARJ32.DLL は
          その日付・時間より前に書き換えられたファイルのみを選びます。

          日付の範囲を指定するために  "-o" と "-ob" スイッチを同時に使うこ
          ともできます。  これは特定の日付のファイルを選ぶのに役立ちます。
          ただし複数の組み合わせを指定することはできません。

              例：  e archive *.* -o910101 -ob910102
                1991-01-01 に書き換えられたファイルのみを選ぶ

          　ARJ では日付の整合性チェックを行っていませんが，UNARJ32.DLL で
          は，うるう年を含めて日付のチェックを行っています。

          [注意] : Ver 0.99a 以降では従来の制限が存在せず 2 秒単位に丸めら
                   れることがありません。が，SystemFileToFileTime() API に
                   ついて， 本来なら無視される wDayOfWeek が，NT 4.0 SP3/4
                   など，整合性の取れていない値が設定されていた場合にエラー
                   を返すことのある環境が存在します。その場合，UNARJ32.DLL
                   は従来の DosDateTimeToFileTime() API による変換を行いま
                   す。従って，年指定等の制限は以下のようになります。

                        [通常]
                            ・年指定は 1601〜2399 が有効となります。範囲を
                              超えた場合は，  1601-01-01 00:00:00〜2399-12
                              -31 23:59:59 の範囲に丸められます。
                            ・通常，奇数秒が切り捨てられることはありません。

                        [SystemTimeToFileTime() API がエラーを返した場合]
                            ・この場合，DosDateTimeToFileTime() API が使用
                              されるため，指定された値が 1980-01-01 00:00:
                              00〜2107-12-31 23:59:58  の範囲へ追加的に丸
                              められます。
                            ・奇数秒が切り捨てられ 2 秒単位で扱われます。

        p[-|+|1]: 全パス名で合致  [-p-]

          　通常 UNARJ32.DLL は， 展開時にはパスが付加されていないファイル
          指定については  "-p1" が付加されたがごとくファイル名のみで検索を
          行い子ディレクトリ以下のファイルについても展開を行いますが，"-p"
          を指定するとパスの有無を厳密に判定して検索を行うようになります。

              例：  e archive *.txt -x
                  "-p" が指定されていないことから，ファイル名のみで検索
                  が行われるので tmp/test.txt 等も展開される

              例：  e archive *.txt -x -p
                  "-p"  が指定されていると， パスの有無が判定されること
                  からルート以外の tmp/test.txt 等は展開されなくなる

          　パスが付加されたファイル指定に関しては "-p-"，"-p+" の違いにか
          かわらずパスの有無を判定して検索を行います。

              例：  e archive tmp\*.txt -x
                  (書庫での) ルート上の WORK.TXT  等が展開されることはな
                  い。

          　すべてのファイルを合致させる目的で "*.*" 等を指定する場合には，
          "-p" スイッチは使用すべきではありません。"-p" スイッチが指定され
          ていると  "*.*" は『パス名をもたないすべてのファイル』を意味しま
          す。反対に個別にファイルを指定する場合には "-p" スイッチを使用す
          べきです。

          　通常 "-p" スイッチが必要となるのは以下のような場合です。

              例：  e archive c:\tmp\ readme.txt -p
                  archive 内のルート上の readme.txt のみ展開。"-p" を指
                  定しない場合は，たとえば (書庫内の) folder/readme.txt
                  についても展開が行われてしまう。

          　子ディレクトリをもつディレクトリパスを合致させるには，"-p1" ス
          イッチを使います。このスイッチは，UNARJ32.DLL が，指定されたワイ
          ルド名ではなくパス名の最初の部分のみ合致するか調べるようにするも
          のです。例えば，あなたの書庫が TC と言う名前の  TURBO C++ のディ
          レクトリを含んでいるとき，INCLUDE サブディレクトリをサブディレク
          トリ INCLUDE\SYS と共に展開したいとしたら，次の命令が使えます。

          例：  e archive TC\INCLUDE\*.* -p1

          ARJ 的に説明すると何やら難しいスイッチのように思えてきますが，何
          のことはない，このスイッチは LHA での "-r2" スイッチに相当します。

        r[-|+]: 再帰的検索 [-r-]

          　ここで言う『再帰的』とは，下位レベルのディレクトリも含めてファ
          イルを検索することを意味しています。

          　ファイルの検索には 3 つのモードがあります。

          -r-: 非再帰モード

            　パス名で指定されたファイルのみを展開します。

              例：  x archive -r- C:\TMP\ WIN31\readme.txt
                 WIN31/SYSTEM/readme.txt が展開されることはない。

          -r+: ファイル名指定再帰モード

            　パスとファイル名を切り離し，指定されたディレクトリ以下のファ
            イルを再帰的に検索し，ファイル名と一致するものを展開します。共
            通の名前をもったファイルをまとめて選択するときに使います。

              例：  x archive -r+ C:\TMP\ WIN31\readme.txt
                 書庫内の WIN31 ディレクトリ以下のすべての readme.txt
                 を展開。"-r-" の場合と違って WIN31/SYSTEM/readme.txt
                 も展開される。

          -p1: ディレクトリ指定再帰モード

            　指定されたディレクトリ以下のすべてのファイルを展開します。ディ
            レクトリ構造をまとめて操作するときに使うもので，このスイッチを
            使用する場合は，基本的にファイルではなくディレクトリを指定する
            ことになります。

            　LHA では "-r2" を使用しますが， ARJ では "-p" スイッチの拡張
            指定である "-p1" を使用して，この指定が行えます。

              例：  e archive -x -p1 C:\TMP\ WIN31
              　書庫内の WIN31 ディレクトリ以下のファイルをすべて展開。

        t[-|+]: バイナリモードを指定  [-t-]

          　このスイッチは，テキストモードで圧縮されたファイルを変換せずに
          そのまま展開したい場合のために暫定的に付けてあります。

        u[-|+]: ファイルの更新  [-u-]

          　このスイッチを 'e' や 'x' 命令と共に使うと，UNARJ32.DLL はより
          新しい日付のファイルと対象ディレクトリにないファイルを展開します。

        u1: ファイルの更新 (不在と古いもの)

          　このスイッチを 'e' や 'x' 命令と共に使うと，UNARJ32.DLL はより
          古いファイルと存在しないファイルを展開するようになります。

        u2: 異なるファイルの更新 (不在と異なるもの)

          　このスイッチを 'e' や 'x' 命令と共に使うと，UNARJ32.DLL は存在
          しないファイルとタイムスタンプ及びサイズの異なるファイルを展開す
          るようになります。

        v[-|+]: マルチボリュームを有効に  [-v-]

          　このスイッチは，ARJ をマルチボリュームモードにします。
          　途中のボリュームから始めるときや，ボリュームが ".A01" などから
          始まっているときは， 拡張子 ".Ann" を含めた ARJ ボリュームの完全
          な名前を指定しなければいけません。

          　ボリューム間の一時停止は，"-jyv" スイッチで抑制できます。 マル
          チボリュームが可搬性のあるメディアのドライブ（フロッピーディスク
          ドライブなど）に置かれているときは，"-y"  スイッチが指定されてい
          ても，ARJ は常に，次のディスクのために一時停止して確認を求めます。

        x[<ファイル名>]: 除外するファイル名

          　このスイッチは，処理するファイル名の一覧から，除外するファイル
          名やワイルド名を指定するのに使います。

          例：  e archive soft\*.* -x*.exe -x*.obj -xtest

          この例では，soft ディレクトリの全ファイルのうち，"test" の名前の
          ファイルと ".exe" と ".obj" の拡張子を持つファイルを除いたファイ
          ルを展開します。

          　"-x" スイッチは，処理に選択されたものから， サブディレクトリを
          含む完全パスを除外することもできます。

          例：    e archive C:\*.* -xC:\TMP\

          C:\TMP の後の '\' は，UNARJ32.DLL が C:\TMP\  の下の全てを除外す
          ることを示します。

          　除外ディレクトリスイッチは，選択されたファイルが使っているもの
          と同じ相対パスで指定する必要があることに気をつけて下さい。

          例：    e archive \tmp\*.* -xC:\tmp\firstdir  "C:" のせいで不正

          　"-x" スイッチは，"-p" スイッチの影響を受けないことに気をつけて
          下さい。

        y[-|+]: すべての質問に yes と仮定  [-y-]

          　このスイッチは，UNARJ32.DLL の実行の際の利用者への質問（上書き
          確認及び新ディレクトリ作成確認等）を抑制します。

          　このスイッチを指定すると無確認であらゆる処理を行うので注意して
          ください。 ちなみに，"-n" スイッチはあらゆる上書きを避ける時に使
          えます。

          　少し違うものとして，利用者への確認を個々の型ごとに抑制する "-jy"
          スイッチが使えます。"-y" スイッチは "-jyacnov" に相当します。

        ja1: 書庫の注釈の表示を抑止

          　"-ja1" スイッチは，書庫の注釈の表示を抑制します。 'v' 命令にお
          いても注釈を表示しなくなります。

        jd[<サイズ>]: ディスクの空き容量を確認  [-jd-]

          　このスイッチは，展開の際に利用者が指定したディスク空き容量が残
          されているか UNARJ32.DLL に常に確認させるようにします。 UNARJ32.
          DLL は指定されたディスク容量の制限を越えるファイルについては展開
          を行いません。 デフォルトの空き容量は 0 バイト (展開する空きがあ
          れば：展開した後に 0 バイト以上の空きがあれば) です。

          例：  e archive basedir\ -jd100K *.doc

          上の例で，UNARJ32.DLL  はディスクの空き容量を 100,000 バイトより
          少なくさせるようなファイルは展開しません。 "1K" は "1000" と同義
          である点に注意してください。1024 を表すのではありません。

          　'l' や 'v' の一覧モードでは， ファイルの元の大きさの合計が利用
          者の指定した空き容量を越えると，UNARJ.DLL32 は一覧表示の最後にエ
          ラーを報告します。

        jf[-|+|1]: ルート記号の削除  [-jf-]

          　通常，UNARJ32.DLL は，絶対パスで格納されたファイルの場合は，ド
          ライブ文字とルート記号のパスの部分を削りますが，"-jf" スイッチは
          このような動作を抑制したい場合に使用します。

          　"-jf1" スイッチはドライブ指定だけを削り， ルート記号を削りませ
          ん。

          　このスイッチに関しては ARJ.EXE Ver 2.42 で省略時の動作が変更さ
          れていますが，UNARJ32.DLL は ARJ.EXE Ver 2.41 までの仕様をそのま
          ま採用していますのでご注意ください。

             例：A:\SUB\FILE.TXT というパス情報で格納されたファイルの存
                 在する書庫 archive を次のコマンドにより展開した場合，

                e -x archive C:\TMP\ *.*-jf#

                        # | 実際に展開されるディレクトリ
                      ----+-------------------------------
                        - | C:\TMP\SUB\FILE.TXT
                        1 | C:\SUB\FILE.TXT
                        + | A:\SUB\FILE.TXT

        jl[-|+]: ファイル名のみを表示  [-jl-]

          　"-jl" スイッチは，UNARJ32.DLL が経過表示の時にファイル名の部分
          のみを表示するようにします。表示が簡明になります。

        jr[-|+]: 不良ファイルを無視して処理を継続  [-jr-]

          　このスイッチは，データ不良などの損傷を受けた書庫にアクセスする
          ために使います。このスイッチは，UNARJ32.DLL に展開・検査のために
          次の有効なヘッダを見つけさせます。ただし，I/O エラー等の場合には
          処理を中止します。

          　UNLHA32.DLL と違って，UNARJ32.DLL の現在のバージョンでは不良ヘッ
          ダはエラーとして処理されてしまいます。

        jy[<フラグ>]: yes と仮定して質問を抑制

          　このスイッチは， 個々の UNARJ32.DLL の利用者への確認を抑制する
          のに使われます。

          　例:  e archive -jy<flags>

          　<フラグ> は a,c,k,n,o,v を１つ以上含んだものです。各フラグが選
          ばれると，UNARJ32.DLL は抑制された質問に yes  と答えたが如く動作
          します。

          a - マルチボリュームの展開時に書き足しの確認を省略
          b - 不正パス警告の処理選択確認を省略
          c - ディレクトリ作成の確認を省略
          k - 使用できるディスク容量の確認の省略
          n - 新ファイル名の要求の省略
          o - 既存ファイルへの上書き確認の省略
          v - 次のボリュームに移行してよいかの確認を省略

          　個々の "jy" スイッチは，"-jyc -jyo" の様に分けて指定できます。
          "-jyc-" のようにスイッチを切る事もできます。 また，"jy" スイッチ
          は，"-jya -jya" とするとスイッチが交互に切り替わります。ただし，
          UNARJ32.DLL においてはスイッチの位置は考慮に入れないので，ファイ
          ルごとにスイッチを切り替えると言うようなことはできません。

        ha[-|+]: 書き込み不可属性を無視  [-ha-]

          　通常 UNARJ32.DLL  は上書きするファイルがリードオンリーファイル
          の場合展開を飛ばしますが，"-ha" スイッチを指定する事によりこのよ
          うな場合にも上書きできるようになります。

        hb[<ファイル名>]: ファイル・モードを指定

          　このスイッチを指定することで，通常指定できない名前をファイル名
          として指定できます。

              例：  e archive -hb-Test.txt
                "-Test.txt" を展開する。

        he[-|+]: 最初の拡張子を認識  [-he-]

          　通常 UNARJ32.DLL は， 複数の拡張子をもつファイルの場合は最後の
          拡張子を認識しますが，このスイッチを指定すると最初の拡張子を認識
          するようになります。

        hj[-|+]: x 命令を e 命令と同様と見なす  [-hj-]

          　通常 UNARJ32.DLL は 'x' 命令では書庫のディレクトリ情報に従って
          ディレクトリを再構築しますが，"-hj" スイッチを指定するとディレク
          トリの再構築を行わず単一ディレクトリに展開するようになります。
          　このスイッチは指定が可能となっているだけで，あまり意味はありま
          せん。通常は "-x-" を指定することになるでしょう。

        hk[-|+]: 索引ファイルの作成を抑止  [-hk+]

          　このスイッチをオフ指定すると，UNARJ32.DLL は，索引ファイルが存
          在しない場合や，書庫の更新等によって索引ファイルを新たに作成する
          必要が生じた場合に索引ファイルを自動的に作成するようになります。

          Ver 0.20 からはそれまでの版とは異なり， 初期状態では索引ファイル
          を作成しない設定となっています。

          　索引ファイルのファイル名は，書庫のファイル名の拡張子の最初の文
          字を '%' としたものになります。拡張子の最初の文字が '%' の場合は
          '$' とします。拡張子を変更したものと同名のファイルが既に存在して
          いた場合には索引ファイルは作成されません。

          例：  書庫 … UNARJ.ARJ  →  索引 … UNARJ.%RJ
                書庫 … TEST       →  索引 … TEST.%
                書庫 … WORK.%01   →  索引 … WORK.$01

          　索引ファイルは，書庫ファイルと同一のディレクトリに作成されます。

          　なお，レジストリの "CauseIndexUse" の指定は "-hk" スイッチの指
          定に優先します。
          （注意）
          　ここで述べられている「索引ファイル」とは  ARJ.EXE で作成される
          索引ファイルとは違って，UNARJ32.DLL 独自のものです。

        hm[-|+]: エラーメッセージ表示の抑止  [-hm-]

          　通常 UNARJ32.DLL  はエラーが発生するとエラーメッセージを表示し
          ますが，"-hm" スイッチを指定する事によりそれらのメッセージを抑止
          する事ができます。
          　このスイッチを指定した場合，各種確認メッセージも抑止されますの
          で，十分に注意して使用するようにしてください。

        hn[-|+|2]: 展開ファイルの合計サイズを 100% とした進捗グラフの表示
                   [-hn-]

          　通常，UNARJ32.DLL は個別のファイルごとに進捗グラフを表示します
          が，このスイッチを指定することにより展開ファイルの合計を 100% と
          した進捗グラフを表示することができます。 ただし，書庫を 2 度読み
          することになりますので，FDD 上の書庫や巨大な書庫においては処理に
          時間がかかります。そのため， デフォルトでは FDD 上の書庫の場合は
          このフラグに関係なく通常表示を行うようになっています。
          　"-hn2" とすると展開ファイル名とグラフだけの簡易表示となります。

        ho[-|+]: ダイアログのオーナーウィンドウの指定  [-ho-]

          　通常 UNARJ32.DLL は Unarj() 等で指定したウィンドウを親ウィンド
          ウとしてダイアログを表示しますが，このスイッチを指定すると，
          UnarjSetOwnerWindow() で指定したウィンドウを親ウィンドウとしてダ
          イアログを表示するようになります。
          　ここでの指定にかかわらず，UNARJ32.DLL は Unarj() で指定したウィ
          ンドウを Disable とします。
          　Unarj() で指定したものとは別のウィンドウを特別に指定したい場合
          に使用してください。

        hp[-|+]: 進捗バーをプログレス・バーで表示  [-hp-]

          　通常 UNARJ32.DLL は， 独自のグラフで進捗状況を表示しますが，こ
          のスイッチを指定するとプログレス・バーで表示を行うようになります。

        hq[-|+]: ダイアログを前面に表示  [-hq-]

          　通常 UNARJ32.DLL は展開表示等のダイアログの表示の際に Z オーダ
          等を操作しませんが，このスイッチを指定すると SetForegroundWindow()
          を使用して前面に表示するようになります。 これは Win95 等のウィン
          ドウが後ろに回り込んでしまう現象のために用意されたスイッチなので，
          注意して使用するようにしてください。

        ht[<フラグ>]: 各種フラグの設定

          　このスイッチは，DLL の各種動作の設定を行います。

          　<フラグ> には以下のものがあります。

          b - メッセージループを回さない  [-htb-]
              通常，UNARJ32.DLL は処理を行っている間もメッセージループを回
              すようになっていますが，このことにより問題が出る，またはルー
              プを明示的に回さないように指定したい場合には，このスイッチを
              オンにすることでメッセージループを回さないようにすることがで
              きます。
              なお，このスイッチをオンにする場合は，処理状況表示ダイアログ
              を表示しないようにする必要があります。表示したとしても，ボタ
              ンを押しての処理中断が行えない等，環境によってはダイアログが
              一切のメッセージを受けつけなくなります (従ってダイアログの表
              示すら更新されない場合もあり得る)。

          c - 展開できなかったファイル数を返す [-htc-]
              通常， Unarj() は致命的なエラーが発生しなかった場合は 0 を返
              しますが，このスイッチをオンにすると，マッチしなかったりタイ
              ムスタンプチェックに引っかかったりして展開がスキップされたファ
              イルの数を返すようになります。

          e - 展開時の上書きオープン等をエラーとする  [-hte-]
              通常，UNARJ32.DLL はすでに他のプログラムから使用されている
              ファイル等，展開時の上書きオープンに失敗した場合には，エラー
              とせずそのまま次のファイルの展開に移りますが，このスイッチを
              オンにすると，このような場合にエラーで処理を中断させることが
              できます。

          f - タイムスタンプの補正を行う  [-htf+]
              通常，UNARJ32.DLL はファイルシステムの仕様やシステムの制限等
              により正常に扱えない恐れのあるタイムスタンプが渡された場合に
              は，正常に扱えるデータに補正するようになっていますが，このス
              イッチをオフにすると，補正を行わずエラーを返すようになります。
              補正については， NTFS とそれ以外でそれぞれ次のように処理され
              ます。

                NTFS/FAT  : Jan.1,1980 00:00:00〜Dec.31,2099 23:59:58
                            　書庫の情報が ftime によっているので， ファイ
                            ルシステムにかかわらず ftime  での丸めとなって
                            いる。上限については，Win 系での DosDateTimeTo-
                            FileTime() 等  DosDateTime を扱う API のバグ等
                            を考慮してのものとなっています。詳しくは，後述
                            の『参考』を参照。

              　Feb.31,2003 26:13:02  といった不正なデータが渡された場合，
              "-htf+" では Feb.28,2004 23:13:02 という正常な値に補正した上
              で扱います。元のデータが単純な不正データであるのか，時間計算
              等の結果としての『Feb.28,2003  の 3 日後』『時間が経っての深
              夜 26 時 (午前 2 時) という意味の 26:13:02』であるのかは判断
              できないので， UNARJ32.DLL は単純な補正しか行いません。

              (参考)
              　UNARJ32.DLL の行うタイムスタンプの『丸め』については，下限
              はともかく，上限は Win95 系での API のバグを考慮してのものと
              なっています。

              　Win95 系では， 今後はともかく現状では FAT ファイルシステム
              しか扱えません。従って，ファイルのタイムスタンプの管理は最終
              的には FAT/DOS でおなじみの ftime…つまりは DosDateTime で行
              わざるを得ません。

              　しかし， Win95 系においては  DosDateTimeToFileTime()  等の
              API が 2100/02/28 23:59:58 を超えると破綻します。

                 [Win98SE]
                ========================================================
                  ftime : F05C0000 (time: 2100/02/28 00:00:00.000)
                  →FILETIME: 022F9EF713598000 (2100/02/28 00:00:00.000)

                  ftime : F0610000 (time: 2100/03/01 00:00:00.000)
                  →FILETIME: 022FA089682D0000 (2100/03/02 00:00:00.000)

                  ftime : FE210000 (time: 2107/12/31 00:00:00.000)
                  →FILETIME: 019EB43019A6C000 (1970/11/25 17:31:44.000)
                ========================================================

              　この問題は， 化け方はともかく Y2K 問題ならぬ 2100 年問題に
              他なりません。以前の版の Windows における 2000/02/29  問題へ
              の MS の解答は，少なくともこの部分に関しては『4 年毎の通常の
              処理しか行わない』というもののようです。(^^;; それだけなら良
              かったのですが， HISTORY.TXT にも記述のあるとおり， 内部的に
              UNIX 系でおなじみの time_t を使用していることから， その限界
              を超えた 2107/12/31 00:00:00 の変換結果は，ほぼ DWORD でのオー
              バーフローを反映したものとなっています。 わずか 1 年ほどの期
              間での問題といえますが，『詰め』をちゃんとやってもらいたいと
              ころです。その前の段階で転けているわけですが…。(^^;;
              　なお，この DosDateTimeToFileTime()  等の問題は NT には存在
              しません。

              　それとは別に，Win95/NT 系双方に共通する問題として dir コマ
              ンド等の不具合があります。

                 [NT3.51 SP5]
                ========================================================
                 00/01/01  00:00                      6 21000101.TXT
                 00/02/28  00:00                      6 21000228.TXT
                 01/01/01  09:00                      6 21000301.TXT
                ========================================================

                 [Win98SE]
                ==========================================================
                 20991231 TXT             6  99-12-31  23:59 20991231.TXT
                 21000101 TXT             6  99-01-01   0:00 21000101.TXT
                 21000228 TXT             6  99-02-28   0:00 21000228.TXT
                 21000301 TXT             6  99-02-29   0:00 21000301.TXT
                ==========================================================

              　このように NT には 2100 年問題が存在し，Win 系ではそもそも
              2099 年を超えるデータが扱えません。(^^;;  『枯れた部分 (要は
              古い)』だからこそ問題が出るのかもしれませんが， あまりにも基
              本的なコマンドであり『部分』でもあるので，非常に不安にさせる
              バグとなっています。

              　以上のようなシステムのバグから，UNARJ32.DLL においては，上
              限については上記の範囲での丸めを行うようになっています。下限
              については『そもそもそんなタイムスタンプのファイルが， (まと
              もな状況において) この先登場するはずがない』ということで，特
              に考慮していません。(核爆)

          m - サウンドを使用する [-htm-]
              　このスイッチをオンにすると，エラーを含むメッセージボックス
              表示の際にシステムで設定されたサウンドを流すようになります。

          p - 不正なパスを拒否  [-htp1]
              ARJ 書庫では，書庫の仕様として，パス情報に，上位ディレクトリ
              を示す ".." や，絶対パスを示す (パスの先頭の) "/" を含めるこ
              とが可能であるため，ユーザが想定していない箇所にファイルが展
              開される危険性の高いものとなってしまっています。このスイッチ
              を使用することで，そのような危険性を回避することができます。

              指定は，"-htp3" のように，拒否するパス情報の種類を表すフラグ
              を組み合わせた数値指定で行います。各フラグについては以下のと
              おり：

                        BPL_NORMAL              (0) :

                                通常モード。従来の仕様と同じで，ルートを越
                                えて遡るようなパス指定のみ不正となります。
                                このフラグを他のフラグと組み合わせることは
                                できません。

                        BPL_DENY_TOO_MANY_PATH  (1) :

                                基準ディレクトリモード。基準ディレクトリを
                                越えて遡るようなパス指定を不正とみなします。
                                このスイッチを指定した場合は， "-jf2" 指定
                                で格納されたメンバについても不正扱いとなり，
                                特殊変数が使用されたパスをもつメンバについ
                                ても， (結果として) 不正となってしまうので
                                注意が必要です。

                                当然ながら，絶対パスで格納された書庫を展開
                                する際には，展開先としてルートディレクトリ
                                しか指定できなくなるので，この点についても
                                注意してください。

                                さらに， Ver 0.60 からは，拡張子の偽造が疑
                                わしい連続したスペース  (初期値は 8 個以上
                                で "-hzs" スイッチにより連続数の変更が可能)
                                の挿入されたパスや名前をもつメンバについて
                                も不正扱いとなります。

                        BPL_DENY_ABS_PATH       (2) :

                                絶対パス拒否モード。絶対パスで格納されたメ
                                ンバをすべて不正とみなします。ルート記号を
                                取り除いて扱うわけではないので，相対パス扱
                                いとしたい場合には，明示的に "-jf0" の指定
                                を行ってください。

                        BPL_DENY_PARENTS        (4) :

                                親ディレクトリ拒否モード。 ".." のパス指定
                                が含まれるメンバをすべて不正とみなします。
                                たとえ基準ディレクトリを越えていなくても，
                                不正となりますので注意してください。

                        BPL_DENY_EXECUTABLE     (8) ：

                                実行ファイル拒否モード。実行可能な (及びユー
                                ザが指定した拡張子をもつ) メンバを不正とみ
                                なします。 "-hzz" スイッチで対象となる拡張
                                子を指定できます。

              その他，固定のフラグの組み合わせとして，以下のものが (マクロ)
              定義されています：

                        BPL_DENY_LEVEL_0        (0) :

                                レベル 0 指定。BPL_NORMAL と同じです。

                        BPL_DENY_LEVEL_1        (1) :

                                レベル 1 指定。 基準ディレクトリを越えて遡
                                るようなパス指定を不正とみなします。

                        BPL_DENY_LEVEL_2        (3) :

                                レベル 2 指定。BPL_DENY_LEVEL_1 までの
                                チェックに加えて，絶対パスで格納されたメン
                                バについても不正とみなすようになります。

                        BPL_DENY_LEVEL_3        (7) :

                                レベル 3 指定。BPL_DENY_LEVEL_2 までの
                                チェックに加えて， ".." のパスが含まれるメ
                                ンバについても，すべて不正とみなすようにな
                                ります。

          s[<優先順位>] - 優先順位の指定
              優先順位を指定するものとして UnarjSetPriority() API が存在し
              ますが， 全ての API の実行時ではなく，Unarj() API の実行時の
              みで事が足りる，Unarj() だけで指定を行いたい，Unarj() だけは
              他の API と異なる優先順位を指定したい， といった場合には，こ
              のスイッチを使用して優先順位の指定を行えます。

              UnarjSetPriority() と基本的に同じ値の指定が可能で， 以下のも
              のとなります：

                THREAD_PRIORITY_HIGHEST         スレッド標準の相対優先順位
                        (2)                     より  2 ポイント高い優先順
                                                位を指定します。
                THREAD_PRIORITY_ABOVE_NORMAL    スレッド標準の相対優先順位
                        (1)                     より  1 ポイント高い優先順
                                                位を指定します。
                THREAD_PRIORITY_NORMAL          スレッド標準の相対優先順位
                        (0)                     を指定します。
                THREAD_PRIORITY_BELOW_NORMAL    スレッド標準の相対優先順位
                        (-1)                    より  1 ポイント低い優先順
                                                位を指定します。
                THREAD_PRIORITY_LOWEST          スレッド標準の相対優先順位
                        (-2)                    より  2 ポイント低い優先順
                                                位を指定します。
                THREAD_PRIORITY_IDLE            基本優先順位として  1 を指
                        (-15)                   定します。

          z - 小文字の拡張子を付加  [-htz0]
              通常，UNARJ32.DLL は書庫の拡張子指定が省略された場合に，大文
              字の拡張子を付加しますが，このスイッチを指定すると小文字の拡
              張子が付加されるようになります。
              Win95 等の場合，一旦指定された小文字の名前がシステムによって
              保存されるために，大文字指定を行っても大文字とならない場合が
              あるので注意してください。

          　スイッチの指定方法は，上述した 'jy' スイッチと同じ方法 (反転動
          作) となっていますので注意してください。"-htm+" のように，明示的
          にオン・オフの指定を行ったほうがよいでしょう。

        hy[<ファイル名>]: ログをファイルに出力

          　このスイッチを指定することで，ログをファイルにも出力させること
          ができます。 Unicode 版の場合は冒頭に BOM (Byte Order Mark) が記
          入されます。

              例：  v archive -hyLog.txt
                ログを Log.txt の名前でファイルに出力。

        hz<フラグ>: 各種フラグの設定

          　このスイッチは，DLL の各種動作の設定を行います。"-ht" スイッチ
          が破綻したため追加されたものです。

          　<フラグ> には以下のものがあります。

          l<コードページ> - ヘッダのコードページを指定
              Unicode 版 API を使用している場合に， ヘッダに記録されている
              パス名やファイル名を，どのコードページを基準として読み込むか
              を指定します。指定されたコードページが使用できない場合は CP_
              ACP (0) が使用されます。

              UNARJ32.DLL 自体が指定されたコードページを基準として動作する
              ようになるわけではありませんので注意してください。ここで指定
              したコードページが適用されるのは，マルチバイト文字で記録され
              ているヘッダ上の情報を内部表現である Unicode  へ変換する際の
              MultiByteToWideChar() API 使用時のみです。

          s[-|<文字数>] - スペース文字の連続数を指定  [-hzs]
              "-htp" スイッチで BPL_DENY_TOO_MANY_PATH が指定された場合に，
              拡張子偽造と判断する基準となるスペース文字の連続数を指定しま
              す。 規定値は 8 文字 (8 文字以上スペースが連続していると偽造
              と判定) です。

                -hzs- : 連続数チェックを行わないように指定します。
                -hzs  : 既定の連続数 (8 文字) を指定します。
                -hzs<文字数>
                        指定した文字数以上が連続していた場合に，偽造と判断
                        するよう指定します。

          z[-|+|<拡張子>] - 実行可能ファイルの指定  [-hzz1]
              "-htp" スイッチで BPL_DENY_EXECUTABLE が指定された場合に，実
              行可能ファイルとして扱いたい拡張子を指定します。

                -hzz- : すべてのファイルを通常ファイルとして扱います。
                -hzz+ : 既定の拡張子を指定します。実行可能ファイルとして扱
                        われる拡張子は以下のとおり：

                          AWK，BAT，COM，CPL，EXE，
                          INF，JS， MSC，MSI，PHP，
                          PL， REG，SCR，VBE，VBS

                -hzz<extension> :
                        "-hzz1" によらず，ユーザが実行可能として扱いたい拡
                        張子を直接指定します。既定の拡張子についてクリアさ
                        れる点に注意してください。
                        先頭に '.' を付けても付けなくても構いません。 拡張
                        子無しのファイルを指定するときには  "-hzz." としま
                        す。ワイルドカードは使用できません。

          　スイッチの指定方法は，後述する "jy" スイッチと同じ方法 (反転動
          作) となっていますので注意してください。"-hzs-" のように，明示的
          にオン・オフの指定を行ったほうがよいでしょう。


%6.　基準ディレクトリについて

  　UNARJ32.DLL でも複数のディレクトリに展開することが可能となっています。

  　基準ディレクトリは，展開するファイルのディレクトリの取り扱いを，あたか
  もカレントディレクトリを基準ディレクトリで指定したものに変更してから処理
  を行ったかのような扱いとします。複数指定が可能で，新たな基準ディレクトリ
  が指定されるまで有効です。

     例：  e emelt017.arj c:\windows\system\ *.dll "c:\Program Files\" *.*
       DLL のみウィンドウズ・ディレクトリに展開し，残りは c:\Program files
       に展開する


%7.  レスポンスファイル

  　UNARJ32.DLL に渡せる文字列には限界がありますので，たくさんのファイルを
  一度に指定することができません。そのため，ARJ.EXE と同様にレスポンスファ
  イルが使えるようになっています。

  　UNARJ32.DLL はレスポンスファイルが指定された部分について，そのファイル
  内で指定された文字列と置き換えて認識します。ただし，レスポンスファイル内
  で別のレスポンスファイルを指定する『レスポンスファイルのネスト』は行えま
  せん。

  　レスポンスファイルの書式はコマンドラインと同じです。複数行に分けて書い
  ても構いません。その場合，改行文字はパラメータのセパレータとして機能しま
  す。1 行に書けるのは 2048 バイトまでです。

  　単純に置き換えが行われることから，ファイルのリストだけでなく，命令やス
  イッチを記述することもできます。

      例 :    e archive.arj !response.tmp -x

                response.tmp が次の内容とした場合，
                ========================
                c:\tmp\
                *.*
                -r
                ========================

        上記は以下の指定と等価になります。

              e archive.arj c:\tmp\ *.* -r -x

  　レスポンスファイルに記入する際の文字コードは API に従う必要があります。
  Unicode 版 API であれば Unicode を，ANSI 版 API であれば ANSI を使用して
  ください。Unicode 版の場合，通常はリトルエンディアン (UTF-16LE) で扱われ
  ますが，ファイルの冒頭に BOM (Byte Order Mark) を記入することでバイトオー
  ダーを指定することも可能です。


%8.　環境変数

    a. TZ

    　UNARJ32.DLL では，内部処理の関係でこの環境変数が設定されていないとタ
    イムスタンプが狂います。必ず設定を行ってください。日本国内では，
    "set TZ=JST-9" を設定します。 本来は，この変数は Win32s の場合のみ必要
    で，NT 及び Win95 ではシステムで設定されているタイムゾーンが使われるの
    ですが，UNLHA32.DLL の自己展開書庫 (DosSFX，WinSFX) はこの環境変数を使
    いますし，そもそも (窓を含む) DOS や Win3.1 のアプリでも同様ですから，
    必ず設定を行うようにしてください。
    　なお，"TZ=JST-09" としないとダメな環境もあるので注意してください。

=======================================================================
