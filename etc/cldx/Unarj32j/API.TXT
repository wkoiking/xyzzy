=======================================================================
               UNARJ32.DLL Ver 1.10a  API 説明ファイル
=======================================================================

                                               Ｍｉｃｃｏ (Nov.10,2007)

########################################################################
##########                                                     #########
########## UNARJ32.DLL はスレッド・セーフではありません。(^^;) #########
########## 従って， 複数スレッドからの同時使用は行えませんので #########
########## 注意してください。                                  #########
##########                                                     #########
########## Ver 0.99 からは，UNARJ32.H が ANSI/Unicode 兼用のも #########
########## のに変更となっています。マクロ UNICODE の定義有無に #########
########## よって，"Unarj" といった従来の API 名については，対 #########
########## 象 API が異なってきますので， UNARJ32.H と UNARJ32J #########
########## .LIB を使用して静的 (暗黙) リンクを行う場合は注意し #########
########## てください。                                        #########
##########                                                     #########
########################################################################

はじめに

　UNARJ32.DLL のドキュメント構成は以下のようになっています。

    API.TXT      : 基幹を成す Unarj() 系及び OpenArchive() 系 API の説明
    COMMAND.TXT  : Unarj() に渡すコマンド文字列についての説明
    WINMES.TXT   : SetOwnerWindow() 系 API の説明
    ENUMAPI.TXT  : SetEnumMembersProc() 系 API の説明
    STRTABLE.TXT : 言語設定用 API についての説明
    HEADER.TXT   : ARJ の書庫仕様 (ただし，UNARJ32.DLL が扱うもの)
    HISTORY.TXT  : 修正履歴

　このドキュメントでは基幹を成す LHA.DLL 互換 API と OpenArchive() 系 API，
それと，その他一部の API について説明しています。

　善悪はともかく， Windows での API 呼び出しや DLL の使用に際しては C の知
識が必須となっており，このドキュメントに於いても  C を前提として説明が行わ
れています。 最低でもご自分の使用開発ツールと C の違いについての知識を得て
からこのドキュメントに目を通すようにしてください。

　ご自分の使用開発ツールでの DLL  の扱い方が分からない場合には，『統合アー
カイバプロジェクト』http://www.csdinc.co.jp/archiver/ から適当にリンクをた
どれば VB や Delphi 等であれば  UNARJ32.DLL の使用法についての情報が得られ
ます。


-----------------------------------------------------------------------
%0. 概要。
%1. 各 API の説明。

        LHA.DLL 互換 API

        %a UnarjGetVersion                      DLL の版の取得
        %b UnarjGetRunning                      DLL の実行状況の取得
        %c UnarjGetBackGroundMode               DLL の動作モードの取得
        %d UnarjSetBackGroundMode               DLL の動作モードの設定
        %e UnarjGetCursorMode                   カーソル表示モードの取得
        %f UnarjSetCursorMode                   カーソル表示モードの設定
        %g UnarjGetCursorInterval               回転タイミングの取得
        %h UnarjSetCursorInterval               回転タイミングの設定
        %i Unarj                                書庫操作一般
        %j UnarjCheckArchive                    書庫のチェック
        %k UnarjGetFileCount                    格納ファイル数の取得
        %l UnarjQueryFunctionList               対応 API の問い合わせ
        %m UnarjConfigDialog                    DLL の設定
        %o UnarjExtractMem                      メモリへの展開

        OpenArchive 系 API

        %q UnarjOpenArchive                     書庫のオープン
        %q UnarjOpenArchive2                    書庫のオープン
        %r UnarjCloseArchive                    書庫のクローズ
        %s UnarjFindFirst                       格納ファイルの検索
        %t UnarjFindNext                        格納ファイルの検索
        %u UnarjGetArcFileName                  書庫名の取得
        %v UnarjGetArcFileSize                  書庫サイズの取得
        %v UnarjGetArcFileSizeEx                書庫サイズの取得
        %w UnarjGetArcOriginalSize              展開サイズの取得
        %w UnarjGetArcOriginalSizeEx            展開サイズの取得
        %x UnarjGetArcCompressedSize            圧縮サイズの取得
        %x UnarjGetArcCompressedSizeEx          圧縮サイズの取得
        %y UnarjGetArcRatio                     圧縮率の取得
        %z UnarjGetArcDate                      書庫更新日の取得
        %A UnarjGetArcTime                      書庫更新時間の取得
        %Q UnarjGetArcCreateTime                書庫作成日時の取得
        %Q UnarjGetArcCreateTimeEx              書庫作成日時の取得
        %Q UnarjGetArcCreateTime64              書庫作成日時の取得
        %Q UnarjGetArcCreateTimeEx2             書庫作成日時の取得
        %R UnarjGetArcAccessTime                書庫参照日時の取得
        %R UnarjGetArcAccessTimeEx              書庫参照日時の取得
        %R UnarjGetArcAccessTime64              書庫参照日時の取得
        %S UnarjGetArcWriteTime                 書庫更新日時の取得
        %S UnarjGetArcWriteTimeEx               書庫更新日時の取得
        %S UnarjGetArcWriteTime64               書庫更新日時の取得
        %S UnarjGetArcWriteTimeEx2              書庫更新日時の取得
        %B UnarjGetArcOSType                    使用 OS の取得
        %C UnarjIsSFXFile                       SFX タイプの取得
        %T UnarjGetArcReadSize                  読み込みサイズの取得
        %T UnarjGetArcReadSizeEx                読み込みサイズの取得
        %D UnarjGetFileName                     ファイル名の取得
        %E UnarjGetMethod                       メソッドの取得
        %F UnarjGetOriginalSize                 サイズの取得
        %F UnarjGetOriginalSizeEx               サイズの取得
        %G UnarjGetCompressedSize               圧縮サイズの取得
        %G UnarjGetCompressedSizeEx             圧縮サイズの取得
        %H UnarjGetRatio                        圧縮率の取得
        %I UnarjGetDate                         更新日の取得
        %J UnarjGetTime                         更新時間の取得
        %K UnarjGetWriteTime                    更新日時の取得
        %K UnarjGetWriteTimeEx                  更新日時の取得
        %K UnarjGetWriteTime64                  更新日時の取得
        %L UnarjGetCreateTime                   作成日時の取得
        %L UnarjGetCreateTimeEx                 作成日時の取得
        %L UnarjGetCreateTime64                 作成日時の取得
        %M UnarjGetAccessTime                   参照日時の取得
        %M UnarjGetAccessTimeEx                 参照日時の取得
        %M UnarjGetAccessTime64                 参照日時の取得
        %N UnarjGetCRC                          チェックサムの取得
        %O UnarjGetAttribute                    属性の取得
        %P UnarjGetOSType                       使用 OS の取得

        その他の API

        %U UnarjSetPriority                     優先度の設定
        %V UnarjGetLastError                    エラーコードの取得

  %#. ARJ 書庫でのタイムスタンプ記録に関する注意

%2. 『統合アーカイバプロジェクト』対応 API について
%3. INDIVIDUALINFO の構造
%4. レジストリの設定値
%5. Unarj()の返すエラーコードとその意味
%6. その他
  a : Unicode 対応化について
  b : メモリマップトファイルについて
  c : UnarjOpenArchive() 等のハンドルについて
-----------------------------------------------------------------------


-----------------------------------------------------------------------
%0. 概要。
-----------------------------------------------------------------------

　UNARJ32.DLL は UNARJ.EXE Ver 2.41a を基に，UNLHA32.DLL と同様の API をも
つ Win32 用 DLL として開発されたものです。

　元々『ARJ 書庫展開用の，LHA.DLL に準拠した API 体系をもつ DLL を作成』す
ることを目的としている関係上，『格納ファイルごとの個別処理』といった細かな
操作には向いていませんし，メモリを対象とした操作や一定サイズごとの処理といっ
たものについても全く考慮されていません。これらの処理を行いたい場合には，無
理をして UNARJ32.DLL を使用するよりも， 別途専用のルーチンを作成したほうが
労力も時間も節約できると思います。LZH 関係ほど手軽にはソースの入手は行えな
いと思いますが…。

　API の体系については， 大まかに言えば，Unarj() をはじめとした LHA.DLL 互
換の API 群，UnarjOpenArchive() をはじめとした書庫や格納ファイルの情報を得
るための OpenArchive 系 API， 対応アプリ側での進捗表示等を行うのに必要な情
報を得るための SetOwnerWindow 系 API に分かれています。


-----------------------------------------------------------------------
%1. 各 API の説明。
-----------------------------------------------------------------------

　C 形式となっていますので，C++ から使用する場合は extern "C" で宣言・使用
するようにしてください。また，UNARJ32.DLL が使用する構造体については，すべ
てワードアラインメントをオフにしておく必要があります。

　UNARJ32.H を使用する場合は， Microsoft Visual C++，Borland C++， Borland
C++ Builder 等のコンパイラであれば，改めて設定を行う必要がありません。

-----------------------------------------------------------------------
LHA.DLL 互換 API
-----------------------------------------------------------------------

　LHA.DLL 互換の API です。『概要』でも記述したとおり，コマンドライン・ツー
ル的な仕様となっているため，細かな書庫操作には向きません。若干の追加 API
が存在します。

-----------------------------------------------------------------------
%a      WORD WINAPI UnarjGetVersion(
                        VOID
                    )
-----------------------------------------------------------------------
順序数  2
要求版  0.01
機能
        UNARJ32.DLL の現在のバージョンを返します。

戻り値
        単純に言えば，次のごとく版数に 100 を掛けたものが返ってきます。

                現在のバージョン | 戻り値
                -----------------+--------
                0.01             |      1
                1.45             |    145

        また， この数値はリソースのバージョン情報の上位 2 ワードとも関連し
        ています。下位 2 ワードを得るには，UnarjGetSubVersion() を使用しま
        す。

                リソース情報     | 戻り値
                -----------------+--------
                1.45.1.2         |    145

        版数については，明確な取り決めはありませんが，一応

                1.45.1.2 | a : メジャーバージョン。ほとんど意味なしです。
                a.bc.d.e | b : API  の追加や仕様変更の際には必ずインクリメ
                         |     ントされます。
                         | c : 改版のたびにインクリメントされます。 返却値
                         |     の仕様から， 10 回改版されれば API の変更等
                         |     にかかわらず b のほうもインクリメントされる
                         |     ことに注意してください。
                         | d : 修正バージョンやβ版等， 改版に満たない修正
                         |     版の際にインクリメントされます。 ドキュメン
                         |     ト等で 1.45a となっていれば  a の部分を表し
                         |     ます。b なら 2 となります。
                         | e : 版においてのパッチレベル。レベルが 100 を超
                         |     えると d が一つインクリメントされます。

        といった感じになっていますが，この仕様どおりに版数が進行していない
        ことも多々あります。(^^;)

その他
        仕様変更等への対応を考慮して，バージョンのチェックを推奨します。
        後述するレジストリの UnarjVersion 等を設定することで返却値を変更す
        ることができます。

-----------------------------------------------------------------------
%b      BOOL WINAPI UnarjGetRunning(
                        VOID
                    )
-----------------------------------------------------------------------
順序数  10
要求版  0.01
機能
        現在 UNARJ32.DLL が動作中か否かを得ます。 UNARJ32.DLL は同一インス
        タンスからの複数同時実行に対応していないので，同時に実行される可能
        性がある場合はアプリ側で  API を呼び出す前にチェックを行うようにし
        てください。 一応 UNARJ32.DLL 側でも処理を行う前に内部でこのチェッ
        クを行ってはいます。

戻り値
        実行中であれば TRUE を返します。
        実行中でなければ FALSE を返します。

注意
        初期の版では，この UnarjGetRunnning() においてさえメッセージループ
        をまわしていましたが，現在ではまわさないようになっています。

        これは，対応アプリ側での動作チェック時に，単純に，

            while (UnarjGetRunning()) {
                ;
            }

        のようなループで DLL の終了待ちをしてしまっているために，環境によっ
        ては (Win32s ではほぼ確実に)  無限ループに陥ってしまう――という状
        況が結構見られたために，付加された処理です。

        本来， このような単純な API においてループをまわすことは好ましくな
        いことから，先に書いたように，現在ではループをまわさないようになっ
        ているわけですが，未だに上記のような無限ループに陥ってしまうアプリ
        がまれに存在します。(^^;;

        そのようなアプリに遭遇した場合には，レジストリの CauseLoop を 1 に
        設定してください。特定用途向けのアプリでもない限り，一般のアプリに
        おいては， この API でメッセージループをまわしても大きな問題はない
        と思います。(^^;; とはいうものの，DLL を呼び出している間にメッセー
        ジループがまわらないことを期待して，ウィンドウ周りの処理を手抜きし
        ているアプリも多々見受けられるのですが…。(^^;) この辺りについては，
        後述の UnarjSetBackGroundMode() の項も参照してください。

-----------------------------------------------------------------------
%c      BOOL WINAPI UnarjGetBackGroundMode(
                        VOID
                    )
-----------------------------------------------------------------------
順序数  5
要求版  0.01
機能
        UNARJ32.DLL がバックグラウンドモードか否かを得ます。バックグラウン
        ドモードの意味については，次の UnarjSetBackGroundMode() の説明を参
        照してください。

戻り値
        バックグラウンドモードであれば TRUE を返します。
        非バックグラウンドモードであれば FALSE を返します。

-----------------------------------------------------------------------
%d      BOOL WINAPI UnarjSetBackGroundMode(
                        const BOOL  _bBackGroundMode
                    )
-----------------------------------------------------------------------
順序数  6
要求版  0.01
機能
        UNARJ32.DLL のバックグラウンドモードを設定します。

引数
        バックグラウンドモードの場合は TRUE を渡します。
        非バックグラウンドモードの場合は FALSE を渡します。

戻り値
        正常終了        TRUE を返します。
        異常終了        動作中で変更できなかった場合や，引数が間違いの場合
                        には FALSE を返します。 実際のエラーコードを得るに
                        は UnarjGetLastError() API を使用してください。

注意
        Ver 0.29〜0.55b までの版では設定に関わらず同じ動作を行うようになっ
        ていて，非バックグラウンドモードであっても，一定の割合でメッセージ
        ループが回されます。それより前の版では，フォアグラウンドモードにつ
        いては，UNARJ32.DLL が明示的にメッセージループを回すことはありませ
        ん。

        Ver 0.56 以降では， メッセージループに関する処理に変更はありません
        が，優先度処理の追加により，バックグラウンドモードと非バックグラウ
        ンドモードでの動作が再び異なっている点に注意して下さい。  バックグ
        ラウンドモードが指定されている場合， UnarjSetPriority() で THREAD_
        PRIORITY_NORMAL 以上の優先度が指定されている場合でも， Sleep() API
        使用によるウェイトが入ります。

        ここでの『バックグラウンドモード』とは，一般的な意味ではなく，
        「UNARJ32.DLL が動作中にメッセージループをまわす」という意味です。
        LHA.DLL が，通常 (フォアグラウンドモード) においてはメッセージルー
        プを一切まわさず，結果として LHA.DLL  の動作中はシステムがストップ
        する (当時の Win3.0A/3.1 環境では， プログラムが明示的に処理を他の
        タスクに明け渡す必要がありました)…というものだったので， 「他のタ
        スクに処理を明け渡す」という意味での『バックグラウンドモード』を指
        定できるようになっています。

        先に説明したように，この API で FALSE を指定した場合でも，必要最低
        限の頻度でメッセージループをまわすようになっています。従って，完全
        に処理時間を占有させることはできません。古いソフトなど，LHA.DLL 互
        換の動作を想定しているプログラムでは問題の出る可能性がありますので，
        注意してください。

        　例えば，LHA.DLL の使用を前提としたアプリでは，フォアグラウンドモー
        ドにおいて  DLL の動作が終了しない限り処理が戻ってこないことを利用
        して，ウィンドウの Enable/Disenable 等や共有関係の処理を省略してい
        るものがありますが，UNARJ32.DLL を使用する場合，そのようなアプリで
        は問題が発生します。

        　問題の発生するソフトを使用する場合など，あえて明示的に一切メッ
        セージループを回さないよう指定したい場合は， "-htb"   スイッチ及び
        M_NO_BACKGROUND_MODE を使用してください。 ただし，メッセージループ
        を回さないことから，たとえ状況表示ダイアログを表示していたとしても，
        『中止』ボタンが機能しなかったり，環境によってはダイアログの更新す
        ら行われないすることがありますので，注意が必要となります。

-----------------------------------------------------------------------
%e      BOOL WINAPI UnarjGetCursorMode(
                        VOID
                    )
-----------------------------------------------------------------------
順序数  7
要求版  0.01
機能
        UNARJ32.DLL の動作中にカーソルを表示するモードか否かを得ます。

戻り値
        カーソル表示モードで在れば TRUE を返します。
        カーソル非表示モードで在れば FALSE を返します。

-----------------------------------------------------------------------
%f      BOOL WINAPI UnarjSetCursorMode(
                        const BOOL  _CursorMode
                    )
-----------------------------------------------------------------------
順序数  8
要求版  0.01
機能
        UNARJ32.DLL の動作中にカーソルを表示するモードか否かを設定します。

引数
        カーソルを表示するのであれば TRUE を渡します。
        カーソルを表示しないのであれば FALSE を渡します。

戻り値
        正常終了時      TRUE を返します。
        エラー時        動作中で変更できなかった場合や，引数が間違いの場合
                        には FALSE を返します。 実際のエラーコードを得るに
                        は UnajGetLastError() API を使用してください。

その他
        LHA.DLL の様な回転カーソルはサポートしていないので，実際は独自の時
        計カーソルを表示するか否かの設定となります。 また，TRUE を渡した場
        合，LHA.DLL と異なり，フォアグラウンドモードにおいてもカーソルが表
        示されます。

-----------------------------------------------------------------------
%g      WORD WINAPI UnarjGetCursorInterval(
                        VOID
                    )
-----------------------------------------------------------------------
順序数  3
要求版  0.01
機能
        カーソルの回転速度を得ます

戻り値
        カーソルの回転速度（msec)

その他
        呼び出してもエラーにはなりませんが回転カーソルをサポートしていない
        ので無意味です。

-----------------------------------------------------------------------
%h      BOOL WINAPI UnarjSetCursorInterval(
                        const WORD  _Interval
                    )
-----------------------------------------------------------------------
順序数  4
要求版  0.01
機能
        カーソルの回転速度を設定します。 UNARJ32.DLLの動作中には変更できま
        せん。

引数
        カーソルの回転速度（msec)
        デフォルトは 80 (msec) です。

戻り値
        正常終了時      TRUE を返します。
        エラー時        動作中で変更できなかった場合や，引数が間違いの場合
                        には FALSE を返します。 実際のエラーコードを得るに
                        は UnarjGetLastError() API を使用してください。

その他
        エラーにはなりませんが，回転カーソルをサポートしていないので設定は
        無意味です。一応設定値は記憶するようになっています。

参考
        『回転カーソル』とは，LHA.DLL が使用していたアニメカーソルのことで
        す。LHA.DLL でも動作中を表すために実行の際に専用カーソルを表示して
        いましたが (って，そっちが本家)， それがアニメカーソルだったわけで
        す。

        当時の環境では，タイマーを使って適当なタイミングでカーソルを切り替
        える方法しかなかったわけですが，その切り替えタイミングを設定するの
        が，この API だったわけです。 さらに，このタイマー処理に伴うタスク
        切り替え発生が，バックグラウンドモードの実体でもあったため，ここで
        の設定が，処理速度に直結していました。(^^;)

-----------------------------------------------------------------------
%i      int WINAPI Unarj(
                       const HWND   _hwnd,
                       LPCTSTR      _szCmdLine,
                       LPTSTR       _szOutput,
                       const DWORD  _dwSize
                   )
-----------------------------------------------------------------------
順序数    1 : Unarj
        301 : UnarjA
        601 : UnarjW
要求版  Unarj  : 0.01
        UnarjA : 0.99
        UnarjW : 0.99
機能
        UNARJ.EXE 互換のコマンド文字列を与えて，各種の書庫操作を行います。
        基本的に，コマンドライン・ツールである UNARJ.EXE を DLL として呼び
        出すようなものであることから，細かな書庫操作には向きません。
        なお，『UNARJ.EXE 互換』とはなっていますが，UNARJ.EXE はわずかなコ
        マンドのみが実装された技術解説用のソフトであることから，  実際には
        ARJ.EXE を参考とした独自のコマンド・スイッチ体系となっています。

引数
        _hwnd       UNARJ32.DLL を呼び出すアプリのウィンドウのハンドル。
                    UNARJ32.DLL は実行時にこのウィンドウに対して EnableWin-
                    dow() を実行しウィンドウの動作を抑制します。ウィンドウ
                    が存在しないコンソールアプリの場合や，指定する必要のな
                    い場合は NULL を渡します。後述の API で EnableWindow()
                    の対象ウィンドウを変更することができます。
        _szCmdLine  UNARJ32.DLL に渡すコマンドの文字列。DOS 版の UNARJ.EXE
                    と同様のものが指定できます。ただし，ARJ.EXE のように展
                    展ファイル毎にスイッチを指定するようなことはできません。
                    ここで指定するコマンド等については  COMMAND.TXT で詳述
                    されています。
        _szOutput   UNARJ32.DLL が結果を返すためのバッファ。UNARJ.EXE がコ
                    ンソールに表示するものと同様の出力が，このバッファに格
                    納されます。 ここで指定するバッファについては，_dwSize
                    で示されるサイズが保証されている必要があります。
        _dwSize     TCHAR 単位で示されたバッファのサイズ。UNARJ32.DLL が返
                    す結果のサイズより指定されたサイズが小さい場合は指定サ
                    イズまで出力されます。

戻り値
        正常終了の時    0。
        エラー時        0 以外の数が返されます。エラーコードと意味について
                        は，このドキュメントの項目 5 を参照してください。

Unicode
        Ver 0.99 以降では Unicode 版と ANSI 版が実装されていますが，UNARJ-
        32.DLL は内部動作が Unicode に対応していないため，常に ANSI へ変換
        されて処理が行われる点に注意が必要となります。

注意
        "-htc" スイッチが指定されたときなど，正常終了している場合でも，
        Unarj() が 0 以外の数を返す場合があります。 実際のエラーコードを得
        るには UnarjGetLastError() API を使用してください。

        Ver 0.42 以降では出力されるログの改行文字が  "\n" から "\r\n" に変
        更されています。このため，正常にログが取り込めないアプリの出る可能
        性があります。

-----------------------------------------------------------------------
以降は LHA.DLL 互換ではありません。
-----------------------------------------------------------------------
%j      BOOL WINAPI UnarjCheckArchive(
                        LPCTSTR    _szFileName,
                        const int  _iMode
                    )
-----------------------------------------------------------------------
順序数   11 : UnarjCheckArchive
        311 : UnarjCheckArchiveA
        611 : UnarjCheckArchiveW
要求版  UnarjCheckArchive  : 0.01
        UnarjCheckArchiveA : 0.99
        UnarjCheckArchiveW : 0.99
機能
        指定ファイルが書庫として正しいかどうかを返します。

引数
        _szFileName     チェックすべき書庫のファイル名。
        _iMode          チェックモード。
          CHECKARCHIVE_RAPID    簡易モード。 格納ファイルの CRC チェックは
                (0)             行わず，ヘッダのみチェックします。このモー
                                ドは FDD  上の書庫ファイル等で処理に時間が
                                掛かるのを防ぐため， 最初から 3 つ目までの
                                ファイルヘッダについてのみチェックを行いま
                                す。また， ファイルの先頭 128KB まででヘッ
                                ダが見つからなかった場合は，そこで検索を打
                                ち切ります (非書庫扱い)。
                                すべてのヘッダを読み込まないことから， ARJ
                                書庫が含まれた ZIP  書庫…といった入れ子の
                                場合にも正常な  ARJ 書庫として認識してしま
                                う点に注意してください。
          CHECKARCHIVE_BASIC    通常モード。簡易モードと違ってこちらは全て
                (1)             のヘッダについてチェックします。  ただし，
                                インデックスには対応していませんので，イン
                                デックスが存在していたとしても書庫全体を読
                                み込むことになりますので，巨大な書庫では
                                チェックに多くの時間が掛かることになります。
          CHECKARCHIVE_FULLCRC  厳密モード。 格納ファイルの CRC もチェック
                (2)             します。ファイルが書き込まれないだけで展開
                                時と同様の処理が行われることから，通常モー
                                ドよりさらに長大な処理時間を要することにな
                                ります。

          　以下のフラグは上記のフラグと組み合わせて使います。

          CHECKARCHIVE_RECOVERY 本来は破損ヘッダを無視する設定ですが， UN-
                (4)             ARJ32.DLL では破損ヘッダが即エラーとして処
                                理されるため，あまり指定の意味がないかもし
                                れません。 が，CHECKARCHIVE_FULLCRC を指定
                                した場合など，格納ファイル関係の処理には影
                                響しますので，本処理で "-jr"  スイッチを使
                                用するのであれば，この設定を有効としておい
                                たほうが良いでしょう。

戻り値
        ARJ ファイルの時        FALSE 以外。通常は TRUE を返します。
        ファイルが不正の時      FALSE。 ARJ 書庫でなかった場合だけでなく，
                                書庫が壊れていた場合も  FALSE を返すことに
                                注意が必要となります。実際のエラーコードを
                                得るには  UnarjGetLastError() API を使用し
                                てください。

Unicode
        Ver 0.99 以降では Unicode 版と ANSI 版が実装されていますが，UNARJ-
        32.DLL は内部動作が Unicode に対応していないため，常に ANSI へ変換
        されて処理が行われる点に注意が必要となります。

その他
        CHECKARCHIVE_RECOVERY は，この API としては不適当なものですが "-jr"
        スイッチ付きで破損ヘッダのある書庫の展開等を行いたい場合のために存
        在するものです。 Unarj() でそのような書庫を扱いたいのに， その前の
        UnarjCheckArchive() で「ARJ 書庫ではない」と判断されたのでは困りも
        のなので…。(^^;)

        この API の仕様から予想できると思いますが， 壊れた書庫や単にヘッダ
        が見つからなかった書庫についても単純に FALSE を返します。 従って，
        書庫以外のファイルと壊れた書庫とのどちらであるかを判断したい場合は，
        基本的には，  一旦  CHECKARCHIVE_RAPID  でチェックした後に  CHECK-
        ARCHIVE_FULLCRC で再度チェックを行う…等の複数回のチェックが必要と
        なります。 比較的最近の版であれば UnarjGetLastError() API を使用す
        ることもできます。

-----------------------------------------------------------------------
%k      int WINAPI UnarjGetFileCount(
                       LPCTSTR  _szArcFile
                   )
-----------------------------------------------------------------------
順序数   17 : UnarjGetFileCount
        317 : UnarjGetFileCountA
        617 : UnarjGetFileCountW
要求版  UnarjGetFileCount  : 0.01
        UnarjGetFileCountA : 0.99
        UnarjGetFileCountW : 0.99
機能
        指定された書庫ファイルに格納されているファイル数を得ます。

引数
        _szArcFile      格納ファイル数を得たい書庫ファイル名。

戻り値
        正常終了時      格納ファイル数が返されます。
        エラー時        -1 が返されます。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

Unicode
        Ver 0.99 以降では Unicode 版と ANSI 版が実装されていますが，UNARJ-
        32.DLL は内部動作が Unicode に対応していないため，常に ANSI へ変換
        されて処理が行われる点に注意が必要となります。

その他
        内部的には  CHECKARCHIVE_BASIC モードで UnarjCheckArchive() を呼び
        出しています。(^^;)

-----------------------------------------------------------------------
%l      BOOL WINAPI UnarjQueryFunctionList(
                        const int  _iFunction
                    )
-----------------------------------------------------------------------
順序数  18
要求版  0.01
機能
        指定された API が使用可能かどうかを得ます。

引数
        _iFunction      API を示す一様な数値。具体的な数値については UNARJ-
                        32.H を参照して下さい。

戻り値
        API が使用可能ならば TRUE を返し，使用不能ならば FALSE を返します。
        _iFunction に無効な値を渡した場合も FALSE を返します。

注意
        Unarj()/UnarjW()/UnarjA() など，Unicode 版と ANSI 版を個別に判定す
        ることは出来ません。 Unicode 版は一律 Ver 0.99  以降で使用が可能と
        なっています。

-----------------------------------------------------------------------
%m      BOOL WINAPI UnarjConfigDialog(
                        const HWND  _hwnd,
                        LPTSTR      _szOptionBuffer,
                        const int   _iMode
                    )
-----------------------------------------------------------------------
順序数   12 : UnarjConfigDialog
        312 : UnarjConfigDialogA
        612 : UnarjConfigDialogW
要求版  UnarjConfigDialog  : 0.01
        UnarjConfigDialogA : 0.99
        UnarjConfigDialogW : 0.99
機能
        基準ディレクトリやスイッチが指定されなかった場合の動作を指定します。
        指定可能なものは，

        　1:　展開時の基準ディレクトリ。また，その設定したディレクトリを有
            効にするかどうか。
        　2:　ディレクトリについて，相対ディレクトリとするか絶対ディレクト
            リとするかの指定。(-jf- | -jf+)
          3:　不正パスチェックのチェックレベルの指定。(-htp0 | -htp1 |
            -htp3)
          4:　上書き時の動作。(-jyo+, -jyo-, -c+ -n+)
          5:　アトリビュートも展開するかどうか。(-a- | -a+)
          6:　厳密なファイルサーチをするかどうか。(-p- | -p+)
          7:　ディレクトリ作成時の確認をするかどうか。(-jyc+)
          8:　展開先のディスクの空きがあるかを確認するかどうか。(-jd- | -jd0)
          9:　書庫内のディレクトリ情報を有効とするかどうか。(-jh- | -jh+)
         10:　進捗グラフの表示方法。(-hn- | -hn+)
         11:　簡易ダイアログで展開状況を表示するかどうか。(-hn2)
         12:  ログ出力の改行コードについて， '\n' を使用するか "\r\n" を使
            用するかの選択。
         13:　ファイルの入出力にメモリマップトファイルを使用するかどうか。

        です。実際にダイアログを見ていただいたほうが理解が早いと思います。

引数
        _hwnd           ダイアログのオーナー・ウィンドウのハンドル。
        _szOptionBuffer レジストリに書き込まれる内容と同様の動作を行う為の
                        コマンド文字列を得るためのバッファのポインタ。用意
                        するバッファは 513 バイト (Unicode 版では 513 文字)
                        以上を確保してください。
        _iMode          展開時と圧縮時のどちらについてのものかを指定します。
                        ただし，UNARJ32.DLL は展開専用なので，圧縮時を指定
                        するとエラーメッセージを表示して処理を中止します。

          UNPACK_CONFIG_MODE    1       展開時についてのスイッチを指定。
          PACK_CONFIG_MODE      2       圧縮時についてのスイッチを指定。

戻り値
        正常終了時      TRUE が返されます。
        エラー時        ユーザが取消終了した場合を含めて，エラー時には
                        FALSE  が返されます。 実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

Unicode
        Ver 0.99 以降では Unicode 版と ANSI 版が実装されていますが，UNARJ-
        32.DLL は内部動作が Unicode に対応していないため，常に ANSI へ変換
        されて処理が行われる点に注意が必要となります。

参考
        UnarjConfigDialog() が返すコマンド列には，この後で説明する Extract-
        Attribute 及び RegardECommand の設定は含まれません。また，ダイアロ
        グで指定した基準ディレクトリはコマンド列には含まれません。

その他
        設定は レジストリの Software\ArchiverDll 以下に書き込まれます。アー
        カイバ DLL 間で共通に使われる Archiver\Common 内で設定されるオプシ
        ョンについては， UNLHA32.DLL 等他のアーカイバ DLL での設定の影響を
        受けますし，反対に，それらの DLL の動作に影響を及ぼします。
        UNARJ32.DLL は明示的に展開先ディレクトリやスイッチが指定されなかっ
        た場合に，もしレジストリに該当の省略値が設定されていればそれを使用
        します。コマンドラインで明示的に指定された場合は，コマンド指定が優
        先的に使用されます。レジストリにも指定されていない場合は，UNARJ32.
        DLL 本来のデフォルトの動作となります。UNARJ32.DLL にレジストリの設
        定を使わないようにさせるには "-+" スイッチを指定して下さい。なお，
        UnarjConfigDialog() が返すコマンド列には "-+" スイッチが含まれてい
        ます。

        なお， 3 の不正パスチェックについては，"-+" スイッチの有無にかかわ
        らずレジストリの値が適用されます。

注意
        設定ダイアログでの設定の結果，UNARJ32.DLL 対応アプリが希望通りの動
        作をしなくなる可能性のある設定項目については，次のものがあります。

        1:  基準ディレクトリ
          　Unarj() 等で基準ディレクトリが指定されない場合に，ここで設定さ
          れたディレクトリが基準ディレクトリとして使用されるため，対応アプ
          リが『カレント・ディレクトリ』を意図してディレクトリを指定しなかっ
          た場合に，意図しないディレクトリ上のファイルが処理される可能性が
          あります。
        2:  絶対パスの扱い (相対パス)
          　「相対ディレクトリ」が選択されていると，ルート・ディレクト
          リからの再構築が意図された書庫の展開が正常に行われなくなります。
          絶対ディレクトリでの圧縮・格納を行っているアプリが多いという事実
          から，この設定には注意が必要です。
        3:  不正パスチェック (Level 1・Level 2)
          　『Level 1』以上の場合は， 展開先としてルートディレクトリを指定
          していない限り，絶対パスで格納されたファイルの展開を行えません。
          必ず処理選択を求められます。そのため，絶対パスでの格納を前提とし
          た処理を行うアプリで，不具合のでる可能性があります。
        4:  上書き時の確認 (常に上書き・上書きしない)
          　ここの設定の結果，アプリが意図していない「常時上書き」「常時展
          開中止」が発生する可能性があります。
        6:  厳格なファイル名サーチ
          　一番問題となりやすいのが， この設定項目です。 ここのチェックは
          "-p" スイッチに相当するため， ここがチェックされていると，アプリ
          が『すべてのファイルの処理』を意図して "*.*" を指定しても， サブ
          ・ディレクトリ以下のファイルについては処理されないことになります。
          これは，格納ファイルの検索についても同様なので，『パス情報の付加
          された格納ファイル (だけ) が表示されない』場合は，ほぼ 100% ここ
          の設定が原因です。
          　存在しないほうがはるかに安全なのですが，この設定項目は過去のア
          プリで "-p" スイッチの使用法が甘いために，書庫内の同じ名前のファ
          イルの個別処理が行えないものが多かった…という問題に対処するため
          に存在しているものです (たとえば， 書庫内に README.TXT と WIN32/
          README.TXT が存在している場合に  README.TXT のみを処理させること
          ができない…といったアプリのこと)。
          　困ったことに，最近に至っても『まだ』このようなアプリが存在する
          ため，依然としてこの設定項目を存続させざるを得ない状況です。その
          上，『何も考えないでとりあえずここの設定をオンにする』初心者が極
          めて多いという事実が，問題に滑車をかけてしまっています。(T_T)
        9:  ディレクトリ構造を無視
          　ここがチェックされていると，ディレクトリ構造を認識・再構築され
          ないことになります。
        10: 合計でグラフ表示
          　(UNARJ32.DLL  独自の) インデックスファイルが作成されていない書
          庫については，合計を得るためには一旦書庫すべてを検索することにな
          ります。この結果書庫を二度読みすることになり，展開時の処理時間が
          倍増してしまいます。
        11: 旧式ログ出力
          　UNARJ32.DLL Ver 0.42 以降では， ログ出力の改行コードに  "\r\n"
          を使用するように仕様変更されていますが，一部のソフトにおいては従
          来の "\n" でないと正常に動作しません。初心者等のとりあえずの回避
          用にこの項目を用意してありますが，ソフトにかかわらず設定が適用さ
          れるため，反対に動作しなくなるソフトが出てくる可能性が考えられま
          す (特に Ver 0.42 公開以降に作成された対応ソフト)。
       12:  メモリマップトファイルの使用
          　メモリマップトファイルを使用している場合，UNARJ32.DLL は書き込
          みに伴うファイルのサイズ拡張を 8MB 単位で行うことから， 書き込み
          先の空き容量が少ない場合に， (本来収まるはずのものが) 書き込みエ
          ラーの発生してしまうことがあります。

-----------------------------------------------------------------------
%o      int WINAPI UnarjExtractMem(
                       const HWND   _hwnd,
                       LPCTSTR      _szCmdLine,
                       LPBYTE       _szBuffer,
                       const DWORD  _dwSize,
                       time_t *     _lpTime,
                       LPWORD       _lpwAttr,
                       LPDWORD      _lpdwWriteSize
                   )
-----------------------------------------------------------------------
順序数   49 : UnarjExtractMem
        349 : UnarjExtractMemA
        649 : UnarjExtractMemW
要求版  UnarjExtractMem  : 0.70
        UnarjExtractMemA : 0.99
        UnarjExtractMemW : 0.99
機能
        メモリバッファへ展開します。 残念ながら，_lpdwWriteSize で指定
        したサイズごとに複数回に分けて処理…といった使用法は行えません。

引数
        _hwnd       UNARJ32.DLL を呼び出すアプリのウィンドウのハンドル。
                    UNARJ32.DLL は実行時にこのウィンドウに対して EnableWin-
                    dow() を実行しウィンドウの動作を抑制します。ウィンドウ
                    が存在しないコンソールアプリの場合や，指定する必要のな
                    い場合は NULL を渡します。
        _szCmdLine  UNARJ32.DLL に渡すコマンドの文字列。Unarj() と同じもの
                    が指定できますが，コマンドは無視されます。
        _lpBuffer   展開イメージを格納するバッファ。ここで指定するバッファ
                    については，_dwSize で示されるサイズが保証されている必
                    要があります。
        _dwSize     バッファのサイズ。UNARJ32.DLL が返す結果のサイズより指
                    定されたサイズが小さい場合は指定サイズまで出力されます。
        _lpTime     展開されたファイルの UTC でのタイムスタンプを得ます。
                    必要ない場合は NULL を指定します。
        _lpwAttr    展開されたファイルの属性を得ます。 必要ない場合は NULL
                    を指定します。
        _lpdwWriteSize
                    展開の結果書き込まれたサイズを得ます。  必要ない場合は
                    NULL を指定します。

戻り値
        正常終了時      0。
        エラー時        0 以外の数が返されます。エラーコードと意味について
                        は，このドキュメントの項目 5 を参照してください。

Unicode
        Ver 0.99 以降では Unicode 版と ANSI 版が実装されていますが，UNARJ-
        32.DLL は内部動作が Unicode に対応していないため，常に ANSI へ変換
        されて処理が行われる点に注意が必要となります。

その他
        API の性格上，書庫やファイル名にワイルドカードを使うのは無意味と思
        われます。


--------------------------------------------------------------------------
OpenArchive 系 API
--------------------------------------------------------------------------

　『Unarj() での 'l'  命令等の結果出力を利用しての情報取得』では不便なこと
から，UNARJ.DLL において，書庫情報取得用として追加された API 群です。UNARJ.
DLL では UnarjExtract() 等， OpenArchive 系 API での検索・情報取得に従って
各種の処理を行う  API が用意される予定でした。 これは現在の SetEnumMember-
Proc() 系 API よりもはるかに便利で細かい処理が可能なはずのものだったのです
が，ARJ ということもあって反響が全くなく，UNARJ.DLL 以外には実装すらされな
かったという不運な API です。近年，それらの API で行えるような処理について
の要望が多いのが皮肉ではあります。(^^;;

　経緯はともかく，UNARJ32.DLL では情報取得系の API しか実装されていません。

　OpenArchive 系の API は， 上記で説明した Unarj 系の API との混在はできま
せんので注意してください。ここで言う『混在』とは， UnarjOpenArchive() で書
庫を開いて再び UnarjCloseArchive() で書庫を閉じるまでの間に Unarj() で別の
書庫を処理する…といったような処理のことです。

　OpenArchive 系での大まかな処理の流れは次のようになります。

      UnarjOpenArchive();
      if (UnarjFindFirst() != -1) {
          do {
              …
              構造体か，各種 API で情報を取得。API が望ましい。
              …
          } while (UnarjFindNext() != -1);
      }
      UnarjCloseArchive();

-----------------------------------------------------------------------
%q      HARC WINAPI UnarjOpenArchive(
                        const HWND   _hwnd,
                        LPCTSTR      _szFileName,
                        const DWORD  _dwMode
                    )
-----------------------------------------------------------------------
順序数   21 : UnarjOpenArchive
        321 : UnarjOpenArchiveA
        621 : UnarjOpenArchiveW
要求版  UnarjOpenArchive  : 0.01
        UnarjOpenArchiveA : 0.99
        UnarjOpenArchiveW : 0.99
機能
        ハンドルと書庫を結び付けます。

引数
        _hwnd           UNARJ32.DLL を呼び出すアプリのウィンドウのハンドル。
        _szFileName     書庫ファイル名。
        _dwMode         UnarjGetFirst() 等の処理のモード。

                        M_INIT_FILE_USE         レジストリの設定を利用。
                        M_REGARDLESS_INIT_FILE  レジストリの設定を無視。
                                                "-+" と同じです。
                        M_NO_BACKGROUND_MODE    メッセージループを回さない
                                                ようにします。("-htb")
                        M_CHECK_ALL_PATH        ファイル名の検索時に全パス
                                                を使用して検索します。
                                                ("-p")
                        M_CHECK_FILENAME_ONLY   検索時にファイル名のみを対
                                                象とします。("-p-")
                        M_USE_DRIVE_LETTER      格納ファイルのディレクトリ
                                                情報について，絶対パスを示
                                                すルートディレクトリのセパ
                                                レータも利用します。("-jf")
                        M_NOT_USE_DRIVE_LETTER  格納ファイルのルートディレ
                                                クトリ情報を無視します。
                        M_RECOVERY_ON           破損ヘッダを無視して，以降
                                                の格納ファイルにアクセスで
                                                きるようにします。("-jr")
                        M_ERROR_MESSAGE_ON      エラー時にメッセージを表示
                                                します。("-hm-")
                        M_ERROR_MESSAGE_OFF     エラー時にメッセージを表示
                                                しません。("-hm")
                        M_MAKE_INDEX_FILE       索引ファイルを作成します。
                        M_NOT_MAKE_INDEX_FILE   索引ファイルを作成しないよ
                                                うにします。

戻り値
        正常終了時      指定の書庫ファイルに対応したハンドルが返されます。
        エラー時        NULL を返します。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

Unicode
        Ver 0.99 以降では Unicode 版と ANSI 版が実装されていますが，UNARJ-
        32.DLL は内部動作が Unicode に対応していないため，常に ANSI へ変換
        されて処理が行われる点に注意が必要となります。

注意
        現バージョンでは，同時に複数のハンドルを利用する事はできません。
        Unarj() 等のルーチンを利用している関係上，グローバル変数を使いまくっ
        ているので…。

-----------------------------------------------------------------------
%q      HARC WINAPI UnarjOpenArchive2(
                        const HWND   _hwnd,
                        LPCTSTR      _szFileName,
                        const DWORD  _dwMode,
                        LPCTSTR      _szOption
                    )
-----------------------------------------------------------------------
順序数  112 : UnarjOpenArchive2
        412 : UnarjOpenArchive2A
        712 : UnarjOpenArchive2W
要求版  UnarjOpenArchive2  : 0.50
        UnarjOpenArchive2A : 0.99
        UnarjOpenArchive2W : 0.99
機能
        ハンドルと書庫ファイルを結び付けます。 基本的に UnarjOpenArchive()
        と同じですが， さらに Unarj() と同様のスイッチを指定することができ
        ます。

引数
        _hwnd           UNARJ32.DLL を呼び出すアプリのウィンドウのハンドル。
        _szFileName     書庫ファイル名。
        _dwMode         UnarjFindFirst() 等の処理のモード。

                        M_INIT_FILE_USE         レジストリの設定を利用。
                        M_REGARDLESS_INIT_FILE  レジストリの設定を無視。
                                                "-+" と同じです。
                        M_NO_BACKGROUND_MODE    メッセージループを回さない
                                                ようにします。("-htb")
                        M_CHECK_ALL_PATH        ファイル名の検索時に全パス
                                                を使用して検索します。
                                                ("-p")
                        M_CHECK_FILENAME_ONLY   検索時にファイル名のみを対
                                                象とします。("-p-")
                        M_USE_DRIVE_LETTER      格納ファイルのディレクトリ
                                                情報について，絶対パスを示
                                                すルートディレクトリのセパ
                                                レータも利用します。("-jf")
                        M_NOT_USE_DRIVE_LETTER  格納ファイルのルートディレ
                                                クトリ情報を無視します。
                        M_RECOVERY_ON           破損ヘッダを無視して，以降
                                                の格納ファイルにアクセスで
                                                きるようにします。("-jr")
                        M_ERROR_MESSAGE_ON      エラー時にメッセージを表示
                                                します。("-hm-")
                        M_ERROR_MESSAGE_OFF     エラー時にメッセージを表示
                                                しません。("-hm")
                        M_MAKE_INDEX_FILE       索引ファイルを作成します。
                        M_NOT_MAKE_INDEX_FILE   索引ファイルを作成しないよ
                                                うにします。

        _szOption       スイッチ。Unarj() と同じものが指定可能ですが，レス
                        ポンスファイルは使用できませんし，当然ながら指定で
                        きるのはスイッチだけです。

戻り値
        正常終了時      指定の書庫ファイルに対応したハンドルが返されます。
        エラー時        NULL を返します。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

Unicode
        Ver 0.99 以降では Unicode 版と ANSI 版が実装されていますが，UNARJ-
        32.DLL は内部動作が Unicode に対応していないため，常に ANSI へ変換
        されて処理が行われる点に注意が必要となります。

注意
        現バージョンでは，同時に複数のハンドルを利用する事はできません。(^^;)
        Unarj() 等のルーチンを利用している関係上，グローバル変数を使いまくっ
        ているので…。(^^;;

-----------------------------------------------------------------------
%r      int WINAPI UnarjCloseArchive(
                       HARC  _harc
                   )
-----------------------------------------------------------------------
順序数  22
要求版  0.01
機能
        UnarjOpenArchive() で割り付けたハンドルを解放します。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。

戻り値
        正常終了時      0 を返します。
        エラー時        0 以外を返します。  エラーコードと意味については，
                        このドキュメントの項目 5 を参照してください。

-----------------------------------------------------------------------
%s      int WINAPI UnarjFindFirst(
                       HARC              _harc,
                       LPCTSTR           _szWildName,
                       INDIVIDUALINFO *  _lpSubInfo
                   )
-----------------------------------------------------------------------
順序数   23 : UnarjFindFirst
        323 : UnarjFindFirstA
        623 : UnarjFindFirstW
要求版  UnarjFindFirst  : 0.01
        UnarjFindFirstA : 0.99
        UnarjFindFirstW : 0.99
機能
        最初の格納ファイルの情報を得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。
        _szWildName     検索するファイル名。ファイル名は複数指定が可能。指
                        定書式は Unarj() でのファイルリスト部分と同じ。
        _lpSubInfo      結果を返すための INDIVIDUALINFO 型の構造体へのポイ
                        ンタ。API を使用する場合など結果を必要としない場合
                        は NULL を指定できます。

戻り値
        0               正常終了。_lpSubInfo  で指定された構造体に格納ファ
                        イルの情報を格納します。
        -1              検索終了。
        0，-1 以外      エラー終了。Unarj() 系と同じエラーコードを返します。

Unicode
        Ver 0.99 以降では Unicode 版と ANSI 版が実装されていますが，UNARJ-
        32.DLL は内部動作が Unicode に対応していないため，常に ANSI へ変換
        されて処理が行われる点に注意が必要となります。

注意
        エラーによってアプリ側で処理を続行するかどうか選べるようにすること
        から，エラー時に UnarjCloseArchive() 相当の処理は行われません。従っ
        て，処理を中断する場合には，アプリ側で明示的に UnarjCloseArchive()
        によりハンドルを開放する必要があります。

        Ver 0.13 より前の版では， UnarjFindFirst() と次の UnarjFindNext()
        では，API の処理の終了時に HARC で関連付けられている書庫を一旦閉じ
        る仕様になっています。 そのため，これらの API による検索でマッチす
        る度にファイルの開閉が行われることになり，環境によっては（特にファ
        イル処理関係にフックが掛かっている場合）処理が非常に重くなる可能性
        があります。特にウィルス検索ソフト等で書庫のチェックが行われるよう
        に設定されている場合は，まるで死んだようになることがあります。

        Ver 0.13 からはその都度の書庫の開閉は行わなくなっていますが， レジ
        ストリの指定により従来の開閉を行わせることもできます。

-----------------------------------------------------------------------
%t      int WINAPI UnarjFindNext(
                       HARC              _harc,
                       INDIVIDUALINFO *  _lpSubInfo
                   )
-----------------------------------------------------------------------
順序数   24 : UnarjFindNext
        324 : UnarjFindNextA
        624 : UnarjFindNextW
要求版  UnarjFindNext  : 0.01
        UnarjFindNextA : 0.99
        UnarjFindNextW : 0.99
機能
        2 番目以降の格納ファイルの情報を得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。
        _lpSubInfo      結果を返すための INDIVIDUALINFO 型の構造体へのポイ
                        ンタ。結果を必要としない場合は NULL を指定する事。

戻り値
        0               正常終了。_lpSubInfo  で指定された構造体に格納ファ
                        イルの情報を格納します。
        -1              検索終了。
        0，-1 以外      エラー終了。Unarj() 系と同じエラーコードを返します。

Unicode
        Ver 0.99 以降では Unicode 版と ANSI 版が実装されていますが，UNARJ-
        32.DLL は内部動作が Unicode に対応していないため，常に ANSI へ変換
        されて処理が行われる点に注意が必要となります。

注意
        エラーによってアプリ側で処理を続行するかどうか選べるようにすること
        から，エラー時に UnarjCloseArchive() 相当の処理は行われません。従っ
        て，処理を中断する場合には，アプリ側で明示的に UnarjCloseArchive()
        によりハンドルを開放する必要があります。

        Ver 0.13 より前の版では， 前の UnarjFindFirst() と UnarjFindNext()
        では，API の処理の終了時に HARC で関連付けられている書庫を一旦閉じ
        る仕様になっています。 そのため，これらの API による検索でマッチす
        る度にファイルの開閉が行われることになり，環境によっては（特にファ
        イル処理関係にフックが掛かっている場合）処理が非常に重くなる可能性
        があります。特にウィルス検索ソフト等で書庫のチェックが行われるよう
        に設定されている場合は，まるで死んだようになることがあります。

        Ver 0.13 からはその都度の書庫の開閉は行わなくなっていますが， レジ
        ストリの指定により従来の開閉を行わせることもできます。

-----------------------------------------------------------------------
%u      int WINAPI UnarjGetArcFileName(
                       HARC       _harc,
                       LPTSTR     _lpBuffer,
                       const int  _nSize
                   )
-----------------------------------------------------------------------
順序数   31 : UnarjGetArcFileName
        331 : UnarjGetArcFileNameA
        631 : UnarjGetArcFileNameW
要求版  UnarjGetArcFileName  : 0.01
        UnarjGetArcFileNameA : 0.99
        UnarjGetArcFileNameW : 0.99
機能
        書庫のファイル名を得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。
        _lpBuffer       ファイル名を格納するバッファ。
        _nSize          TCHAR 単位で示されたバッファのサイズ。

戻り値
        正常終了時      0 が返され，_lpBuffer に書庫ファイル名が格納されま
                        す。
        エラー時        0 以外を返します。  エラーコードと意味については，
                        このドキュメントの項目 5 を参照してください。

Unicode
        Ver 0.99 以降では Unicode 版と ANSI 版が実装されていますが，UNARJ-
        32.DLL は内部動作が Unicode に対応していないため，常に ANSI へ変換
        されて処理が行われる点に注意が必要となります。

-----------------------------------------------------------------------
%v      DWORD WINAPI UnarjGetArcFileSize(
                         HARC  _harc
                     )
-----------------------------------------------------------------------
順序数  32
要求版  0.01
機能
        書庫のサイズを得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。

戻り値
        正常終了時      書庫ファイルのサイズを返します。
        エラー時        (DWORD)-1 を返します。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        格納ファイルの合計サイズ等ではなく，書庫そのもののサイズであること
        に注意してください。

        4GB を超えたサイズの書庫を扱った場合，サイズの下位 32 ビットが返り
        ます。エラーとはなりませんので注意してください。

-----------------------------------------------------------------------
%v      BOOL WINAPI UnarjGetArcFileSizeEx(
                        HARC          _harc,
                        ULHA_INT64 *  _lpllSize
                    )
-----------------------------------------------------------------------
順序数  103
要求版  0.50
機能
        書庫ファイルのサイズを 64 ビット整数で得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。
        _lpllSize       情報を格納するためのバッファへのポインタ。 VC++ や
                        C++ Builder 5.x 等では実体は LONGLONG となっていま
                        す。BC++ 等 64ビット整数として LONGLONG を扱えない
                        コンパイラを使用する場合には， (アラインメントのな
                        い) LARGE_INTEGER 等で代用してください。

戻り値
        正常終了時      TRUE が返され， 指定されたバッファに書庫のサイズが
                        格納されます。
        エラー時        FALSE を返します。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        格納ファイルの合計サイズではなく，書庫そのもののサイズであることに
        注意してください。

-----------------------------------------------------------------------
%w      DWORD WINAPI UnarjGetArcOriginalSize(HARC _harc)
-----------------------------------------------------------------------
順序数  33
要求版  0.01
機能
        検索にマッチしたファイルのサイズの合計を得ます。UnarjFindNext() の
        検索が終了した後でないと返却値に意味はありません。検索中の場合はそ
        れまでにマッチしたファイルの合計となります。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。

戻り値
        正常終了時      合計サイズを返します。
        エラー時        (DWORD)-1 を返します。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        UnarjFindNext() の検索が終了してから呼び出すようにしてください。

        合計サイズが 4GB を超えている場合， サイズの下位 32 ビットが返りま
        す。エラーとはなりませんので注意してください。

-----------------------------------------------------------------------
%w      BOOL WINAPI UnarjGetArcOriginalSizeEx(
                        HARC          _harc,
                        ULHA_INT64 *  _lpllSize
                    )
-----------------------------------------------------------------------
順序数  104
要求版  0.50
機能
        検索にマッチしたファイルのサイズの合計を 64 ビット整数で得ます。
        UnarjFindNext() の検索が終了した後でないと返却値に意味はありません。
        検索中の場合はそれまでにマッチしたファイルの合計となります。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。
        _lpllSize       情報を格納するためのバッファへのポインタ。 VC++ や
                        C++ Builder 5.x 等では実体は LONGLONG となっていま
                        す。BC++ 等 64ビット整数として LONGLONG を扱えない
                        コンパイラを使用する場合には， (アラインメントのな
                        い) LARGE_INTEGER 等で代用してください。

戻り値
        正常終了時      TRUE が返され， 指定されたバッファにサイズの合計が
                        格納されます。
        エラー時        FALSE を返します。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        UnarjFindNext() の検索が終了してから呼び出すようにしてください。

-----------------------------------------------------------------------
%x      DWORD WINAPI UnarjGetArcCompressedSize(
                         HARC  _harc
                     )
-----------------------------------------------------------------------
順序数  34
要求版  0.01
機能
        検索にマッチしたファイルの圧縮サイズの合計を得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。

戻り値
        正常終了時      圧縮サイズの合計を返します。
        エラー時        (DWORD)-1 を返します。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        UnarjFindNext() の検索が終了してから呼び出すようにしてください。

        圧縮サイズの合計が 4GB を超えている場合， サイズの下位 32 ビットが
        返ります。エラーとはなりませんので注意してください。

-----------------------------------------------------------------------
%x      BOOL WINAPI UnarjGetArcCompressedSizeEx(
                        HARC          _harc,
                        ULHA_INT64 *  _lpllSize
                    )
-----------------------------------------------------------------------
順序数  105
要求版  0.50
機能
        検索にマッチしたファイルの圧縮サイズの合計を 64 ビット整数で得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。
        _lpllSize       情報を格納するためのバッファへのポインタ。 VC++ や
                        C++ Builder 5.x 等では実体は LONGLONG となっていま
                        す。BC++ 等 64ビット整数として LONGLONG を扱えない
                        コンパイラを使用する場合には， (アラインメントのな
                        い) LARGE_INTEGER 等で代用してください。

戻り値
        正常終了時      TRUE が返され， 指定されたバッファに圧縮サイズの合
                        計が格納されます。
        エラー時        FALSE を返します。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        UnarjFindNext() の検索が終了してから呼び出すようにしてください。

-----------------------------------------------------------------------
%y      WORD WINAPI UnarjGetArcRatio(
                        HARC  _harc
                    )
-----------------------------------------------------------------------
順序数  35
要求版  0.01
機能
        検索にマッチしたファイルの全体の圧縮率を得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。

戻り値
        正常終了時      パーミル (千分率) で現された全体の圧縮率を返します。
        エラー時        (WORD)-1 を返します。 実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        UnarjFindNext() の検索が終了してから呼び出すようにしてください。
        (圧縮サイズの合計 / ファイルの合計サイズ) * 1000  の計算により求め
        られることから，1000 を超える場合がある点に注意してください。

-----------------------------------------------------------------------
%z      WORD WINAPI UnarjGetArcDate(
                        HARC  _harc
                    )
-----------------------------------------------------------------------
順序数  36
要求版  0.01
機能
        書庫の日付を DOS 形式で得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。

戻り値
        正常終了時      書庫ファイルの日付が返されます。形式は INDIVIDUAL-
                        INFO 構造体に格納されるものと同じで， 次のようなも
                        のです。

                            struct {
                                unsigned ft_day   : 5;  /* Days */
                                unsigned ft_month : 4;  /* Months */
                                unsigned ft_year  : 7;  /* Year */
                            } _DosDate;

                        つまり，ftime の上位ワードと同じ構造となっていて，
                        図示すると

                         15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
                        |<--- (年 - 1980) -->|<--- 月 -->|<---- 日 ---->|

                        のようになります。
        エラー時        (WORD)-1 を返します。 実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        ft_year に格納される値は 1980 年からの経過年数です。したがって，理
        論的には 2107 年まで表現できることになります。

-----------------------------------------------------------------------
%A      WORD WINAPI UnarjGetArcTime(
                        HARC  _harc
                    )
-----------------------------------------------------------------------
順序数  37
要求版  0.01
機能
        書庫の時刻を DOS 形式で得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。

戻り値
        正常終了時      書庫ファイルの時刻が返されます。形式は INDIVIDUAL-
                        INFO 構造体に格納されるものと同じで， 次のようなも
                        のです。

                            struct {
                                unsigned ft_tsec : 5;  /* Two second
                                                          interval */
                                unsigned ft_min  : 6;  /* Minutes */
                                unsigned ft_hour : 5;  /* Hours */
                            } _DosTime;

                        つまり，ftime の下位ワードと同じ構造となっていて，
                        図示すると

                          15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
                         |<---- 時 ---->|<------ 分 ----->|<- (秒 / 2) ->|

                        のようになります。
        エラー時        (WORD)-1 を返します。 実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        ft_tsec  に格納される値が秒を 2 で割ったものである点に注意してくだ
        さい。

<<重要>>
        NTFS 上のファイルや UNIX 等が期限のファイルの場合，00:00:01 等，秒
        が奇数である場合が当然ありますが，そのようなデータの扱いがプラット
        フォームにより異なっていることに注意してください。Win32s，Win95 で
        は丸めの際に切り捨てが行われますが，その他では切り上げが行われます。
        特に注意が必要なのは，Win98 であり，API のバグから， SetFileTime()
        等では切り上げが行われるにもかかわらず  FileTimeToDosDateTime() で
        は切り捨てられてしまいます。
        UNARJ32.DLL においては，Win32 API を使用しないことにより，Win98 に
        おいても切り上げた数値が返されるようになっています。(Ver 0.29 以降)

-----------------------------------------------------------------------
%Q      DWORD WINAPI UnarjGetArcCreateTime(
                         HARC  _harc
                     )
-----------------------------------------------------------------------
順序数  125
要求版  1.10
機能
        書庫の作成日時 (UTC) を得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。

戻り値
        正常終了時      書庫の作成日時が UNIX 形式で返されます。 UNIX 形式
                        とは，Jan.1,1970 00:00:00 からの秒数です。
        エラー時        (DWORD)-1 を返します。  実際のエラーコードを得るに
                        は UnarjGetLastError() API を使用してください。

注意
        書庫に記録されている情報ではなく，ファイルシステムに記録されている
        情報を返します。従って，こちらは UNC 時間であり， ftime の精度によ
        る丸めも行われません。

-----------------------------------------------------------------------
%Q      BOOL WINAPI UnarjGetArcCreateTimeEx(
                        HARC        _harc,
                        FILETIME *  _lpftCreationTime
                    )
-----------------------------------------------------------------------
順序数  68
要求版  0.20
機能
        書庫の作成日時を得ます。

引数
        _harc                   UnarjOpenArchive() で返されたハンドル。
        _lpftCreationTime       情報を格納する FILETIME 構造体へのポインタ。

戻り値
        正常終了時      TRUE が返され， 指定された FILETIME 構造体に作成日
                        時を格納します。FILETIME 形式とは Jan.1,1601 00:00:
                        00 からの 100ns 単位の経過時間を 64 ビットの数値で
                        表したものです。 詳しくは Win32 API のヘルプ等を参
                        照してください。
        エラー時        FALSE を返します。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        書庫に記録されている情報ではなく，ファイルシステムに記録されている
        情報を返します。従って，こちらは UNC 時間であり， ftime の精度によ
        る丸めも行われません。

-----------------------------------------------------------------------
%Q      BOOL WINAPI UnarjGetArcCreateTime64(
                        HARC          _harc,
                        ULHA_INT64 *  _lpllCreationTime
                    )
-----------------------------------------------------------------------
順序数  128
要求版  1.10
機能
        書庫の作成日時 (UTC) を得ます。

引数
        _harc                   UnarjOpenArchive() で返されたハンドル。
        _lpllCreationTime       情報を格納するバッファへのポインタ。  VC++
                                や  C++ Builder 5.x 等では実体は  LONGLONG
                                となっています。BC++ 等 64ビット整数として
                                LONGLONG  を扱えないコンパイラを使用する場
                                合には，(アラインメントのない)
                                LARGE_INTEGER 等で代用してください。

戻り値
        正常終了時      TRUE が返され， 指定されたバッファに作成日時を  64
                        ビットの UNIX 形式で格納します。UNIX 形式とは，
                        Jan.1,1970 00:00:00 からの秒数です。それより前の作
                        成日時については負数で表現されます。
        エラー時        FALSE を返します。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        書庫に記録されている情報ではなく，ファイルシステムに記録されている
        情報を返します。従って，こちらは UNC 時間であり， ftime の精度によ
        る丸めも行われません。

-----------------------------------------------------------------------
%Q      BOOL WINAPI UnarjGetArcCreateTimeEx2(
                        HARC        _harc,
                        FILETIME *  _lpftCreationTime
                    )
-----------------------------------------------------------------------
順序数  71
要求版  0.20
機能
        UnarjGetArcCreateTimeEx() とは違って書庫に記録されている作成日付を
        FILETIME 構造体で返します。

引数
        _harc                   UnarjOpenArchive() で返されたハンドル。
        _lpftCreationTime       情報を格納する FILETIME 構造体へのポインタ。

戻り値
        正常終了時      TRUE が返され， 指定された FILETIME 構造体に作成日
                        時を格納します。FILETIME 形式とは Jan.1,1601 00:00:
                        00 からの 100ns 単位の経過時間を 64 ビットの数値で
                        表したものです。 詳しくは Win32 API のヘルプ等を参
                        照してください。
        エラー時        FALSE を返します。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        ARJ 書庫ではタイムゾーンの概念がなく，また常にローカル時間で格納が
        行われているため，ローカル時間で返される点に注意してください。当然
        ftime の精度による丸めが行われています。

-----------------------------------------------------------------------
%R      DWORD WINAPI UnarjGetArcAccessTime(
                         HARC  _harc
                     )
-----------------------------------------------------------------------
順序数  126
要求版  1.10
機能
        書庫の参照日時 (UTC) を得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。

戻り値
        正常終了時      書庫の参照日時が UNIX 形式で返されます。 UNIX 形式
                        とは，Jan.1,1970 00:00:00 からの秒数です。
        エラー時        (DWORD)-1 を返します。  実際のエラーコードを得るに
                        は UnarjGetLastError() API を使用してください。

注意
        書庫に記録されている情報ではなく，ファイルシステムに記録されている
        情報を返します。従って，こちらは UNC 時間であり， ftime の精度によ
        る丸めも行われません。

-----------------------------------------------------------------------
%R      BOOL WINAPI UnarjGetArcAccessTimeEx(
                        HARC        _harc,
                        FILETIME *  _lpftLastAccessTime
                    )
-----------------------------------------------------------------------
順序数  69
要求版  0.20
機能
        書庫の参照日時を得ます。

引数
        _harc                   UnarjOpenArchive() で返されたハンドル。
        _lpftLastAccessTime     情報を格納する FILETIME 構造体へのポインタ。

戻り値
        正常終了時      TRUE が返され， 指定された FILETIME 構造体に参照日
                        時を格納します。FILETIME 形式とは Jan.1,1601 00:00:
                        00 からの 100ns 単位の経過時間を 64 ビットの数値で
                        表したものです。 詳しくは Win32 API のヘルプ等を参
                        照してください。
        エラー時        FALSE を返します。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        書庫に記録されている情報ではなく，ファイルシステムに記録されている
        情報を返します。従って，こちらは UNC 時間であり， ftime の精度によ
        る丸めも行われません。

-----------------------------------------------------------------------
%R      BOOL WINAPI UnarjGetArcAccessTime64(
                        HARC          _harc,
                        ULHA_INT64 *  _lpllLastAccessTime
                    )
-----------------------------------------------------------------------
順序数  129
要求版  1.10
機能
        書庫の参照日時 (UTC) を得ます。

引数
        _harc                   UnarjOpenArchive() で返されたハンドル。
        _lpllLastAccessTime     情報を格納するバッファへのポインタ。  VC++
                                や  C++ Builder 5.x 等では実体は  LONGLONG
                                となっています。BC++ 等 64ビット整数として
                                LONGLONG  を扱えないコンパイラを使用する場
                                合には，(アラインメントのない)
                                LARGE_INTEGER 等で代用してください。

戻り値
        正常終了時      TRUE が返され， 指定されたバッファに参照日時を  64
                        ビットの UNIX 形式で格納します。UNIX 形式とは，
                        Jan.1,1970 00:00:00 からの秒数です。それより前の参
                        照日時については負数で表現されます。
        エラー時        FALSE を返します。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        書庫に記録されている情報ではなく，ファイルシステムに記録されている
        情報を返します。従って，こちらは UNC 時間であり， ftime の精度によ
        る丸めも行われません。

-----------------------------------------------------------------------
%S      DWORD WINAPI UnarjGetArcWriteTime(
                         HARC  _harc
                     )
-----------------------------------------------------------------------
順序数  124
要求版  1.10
機能
        書庫の最終更新日時 (UTC) を得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。

戻り値
        正常終了時      書庫の更新日時が UNIX 形式で返されます。 UNIX 形式
                        とは，Jan.1,1970 00:00:00 からの秒数です。
        エラー時        (DWORD)-1 を返します。  実際のエラーコードを得るに
                        は UnarjGetLastError() API を使用してください。

注意
        書庫に記録されている情報ではなく，ファイルシステムに記録されている
        情報を返します。従って，こちらは UNC 時間であり， ftime の精度によ
        る丸めも行われません。

-----------------------------------------------------------------------
%S      BOOL WINAPI UnarjGetArcWriteTimeEx(
                        HARC        _harc,
                        FILETIME *  _lpftLastWriteTime
                    )
-----------------------------------------------------------------------
順序数  70
要求版  0.20
機能
        書庫の最終更新日時を得ます。

引数
        _harc                   UnarjOpenArchive() で返されたハンドル。
        _lpftLastWriteTime      情報を格納する FILETIME 構造体へのポインタ。

戻り値
        正常終了時      TRUE が返され， 指定された FILETIME 構造体に更新日
                        時を格納します。FILETIME 形式とは Jan.1,1601 00:00:
                        00 からの 100ns 単位の経過時間を 64 ビットの数値で
                        表したものです。 詳しくは Win32 API のヘルプ等を参
                        照してください。
        エラー時        FALSE を返します。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        書庫に記録されている情報ではなく，ファイルシステムに記録されている
        情報を返します。従って，こちらは UNC 時間であり， ftime の精度によ
        る丸めも行われません。

-----------------------------------------------------------------------
%S      BOOL WINAPI UnarjGetArcWriteTime64(
                        HARC          _harc,
                        ULHA_INT64 *  _lpllLastWriteTime
                    )
-----------------------------------------------------------------------
順序数  127
要求版  1.10
機能
        書庫の最終更新日時 (UTC) を得ます。

引数
        _harc                   UnarjOpenArchive() で返されたハンドル。
        _lpllLastWriteTime      情報を格納するバッファへのポインタ。  VC++
                                や  C++ Builder 5.x 等では実体は  LONGLONG
                                となっています。BC++ 等 64ビット整数として
                                LONGLONG  を扱えないコンパイラを使用する場
                                合には，(アラインメントのない)
                                LARGE_INTEGER 等で代用してください。

戻り値
        正常終了時      TRUE が返され， 指定されたバッファに更新日時を  64
                        ビットの UNIX 形式で格納します。UNIX 形式とは，
                        Jan.1,1970 00:00:00 からの秒数です。それより前の更
                        新日時については負数で表現されます。
        エラー時        FALSE を返します。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        書庫に記録されている情報ではなく，ファイルシステムに記録されている
        情報を返します。従って，こちらは UNC 時間であり， ftime の精度によ
        る丸めも行われません。

-----------------------------------------------------------------------
%S      BOOL WINAPI UnarjGetArcWriteTimeEx2(
                        HARC        _harc,
                        FILETIME *  _lpftLastWriteTime
                    )
-----------------------------------------------------------------------
順序数  72
要求版  0.20
機能
        UnarjGetArcWriteTimeEx() とは違って書庫に記録されている更新日付を
        FILETIME 構造体で返します。

引数
        _harc                   UnarjOpenArchive() で返されたハンドル。
        _lpftLastWriteTime      情報を格納する FILETIME 構造体へのポインタ。

戻り値
        正常終了時      TRUE が返され， 指定された FILETIME 構造体に作成日
                        時を格納します。FILETIME 形式とは Jan.1,1601 00:00:
                        00 からの 100ns 単位の経過時間を 64 ビットの数値で
                        表したものです。 詳しくは Win32 API のヘルプ等を参
                        照してください。
        エラー時        FALSE を返します。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        ARJ 書庫ではタイムゾーンの概念がなく，また常にローカル時間で格納が
        行われているため，ローカル時間で返される点に注意してください。当然
        ftime の精度による丸めが行われています。

-----------------------------------------------------------------------
%B      UINT WINAPI UnarjGetArcOSType(
                        HARC  _harc
                    )
-----------------------------------------------------------------------
順序数  38
要求版  0.01
機能
        書庫の作成に使用された OS の種類を得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。

戻り値
        正常終了時      OS の種類を表す以下の数値が返されます。

                                 0      MS-DOS
                                 1      PRIMOS
                                 2      UNIX
                                 3      AMIGA
                                 4      旧 MAC-OS
                                 5      OS/2
                                 6      APPLE GS
                                 7      ATARI ST
                                 8      NEXT
                                 9      VAX VMS
                                10      その他 (Windows95)

        エラー時        (UINT)-1 を返します。 実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

-----------------------------------------------------------------------
%C      int WINAPI UnarjIsSFXFile(
                       HARC  _harc
                   )
-----------------------------------------------------------------------
順序数  39
要求版  0.01
機能
        書庫が自己展開ファイルかどうかを得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。

戻り値
        正常終了時      書庫ファイルの種類をあらわす次の数値を返します。

                 0      通常の書庫。
                 1      自己展開ファイル。
        エラー時        (UINT)-1 を返します。 実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

参考
        UNLHA32.DLL と違って，ARJ 書庫では自己展開書庫であるかどうかの
        フラグが書庫自体に存在していますので，少なくとも本家筋で作成さ
        れた書庫については正しく認識できるはずです。(^^;)

-----------------------------------------------------------------------
%T      DWORD WINAPI UnarjGetArcReadSize(
                         HARC  _harc
                     )
-----------------------------------------------------------------------
順序数  113
要求版  0.50
機能
        UnarjFindFirst/Next() で今までに書庫を読み込んだサイズを得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。

戻り値
        正常終了時      合計サイズを返します。
        エラー時        (DWORD)-1 を返します。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        4GB を超えたサイズの書庫を扱った場合，読み込んだサイズの下位 32
        ビットが返ります。エラーとはなりませんので注意してください。

-----------------------------------------------------------------------
%T      BOOL WINAPI UnarjGetArcReadSizeEx(
                        HARC          _harc,
                        ULHA_INT64 *  _lpllSize
                    )
-----------------------------------------------------------------------
順序数  114
要求版  0.50
機能
        UnarjFindFirst/Next() で今までに書庫を読み込んだサイズを得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。
        _lpllSize       情報を格納するためのバッファへのポインタ。 VC++ や
                        C++ Builder 5.x 等では実体は LONGLONG となっていま
                        す。BC++ 等 64ビット整数として LONGLONG を扱えない
                        コンパイラを使用する場合には， (アラインメントのな
                        い) LARGE_INTEGER 等で代用してください。

戻り値
        正常終了時      TRUE が返され， 指定されたバッファに合計サイズが格
                        納されます。
        エラー時        FALSE を返します。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

-----------------------------------------------------------------------
%D      int WINAPI UnarjGetFileName(
                       HARC       _harc,
                       LPTSTR     _lpBuffer,
                       const int  _nSize
                   )
-----------------------------------------------------------------------
順序数   40 : UnarjGetFileName
        340 : UnarjGetFileNameA
        640 : UnarjGetFileNameW
要求版  UnarjGetFileName  : 0.01
        UnarjGetFileNameA : 0.99
        UnarjGetFileNameW : 0.99
機能
        格納ファイルのファイル名を得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。
        _lpBuffer       ファイル名を格納するバッファ。
        _nSize          TCHAR 単位で示されたバッファのサイズ。

戻り値
        正常終了時      0 が返され，_lpBuffer にファイル名が格納されます。
        エラー時        0 以外を返します。  エラーコードと意味については，
                        このドキュメントの項目 5 を参照してください。

Unicode
        Ver 0.99 以降では Unicode 版と ANSI 版が実装されていますが，UNARJ-
        32.DLL は内部動作が Unicode に対応していないため，常に ANSI へ変換
        されて処理が行われる点に注意が必要となります。

-----------------------------------------------------------------------
%E      int WINAPI UnarjGetMethod(
                       HARC       _harc,
                       LPTSTR     _lpBuffer,
                       const int  _nSize
                   )
-----------------------------------------------------------------------
順序数   61 : UnarjGetMethod
        361 : UnarjGetMethodA
        661 : UnarjGetMethodW
要求版  UnarjGetMethod  : 0.01
        UnarjGetMethodA : 0.99
        UnarjGetMethodW : 0.99
機能
        格納ファイルの圧縮法を得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。
        _lpBuffer       ファイル名を格納するバッファ。
        _nSize          TCHAR 単位で示されたバッファのサイズ。

戻り値
        正常終了時      0 が返され，_lpBuffer に圧縮法を示す文字列が格納さ
                        れます。
        エラー時        0 以外を返します。  エラーコードと意味については，
                        このドキュメントの項目 5 を参照してください。

Unicode
        Ver 0.99 以降では Unicode 版と ANSI 版が実装されていますが，UNARJ-
        32.DLL は内部動作が Unicode に対応していないため，常に ANSI へ変換
        されて処理が行われる点に注意が必要となります。

-----------------------------------------------------------------------
%F      DWORD WINAPI UnarjGetOriginalSize(
                         HARC  _harc
                     )
-----------------------------------------------------------------------
順序数  41
要求版  0.01
機能
        格納ファイルのサイズを得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。

戻り値
        正常終了時      格納ファイルのサイズを返します。
        エラー時        (DWORD)-1 を返します。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        4GB を超えたサイズのメンバを扱った場合， サイズの下位 32 ビット
        が返ります。エラーとはなりませんので注意してください。

-----------------------------------------------------------------------
%F      BOOL WINAPI UnarjGetOriginalSizeEx(
                        HARC          _harc,
                        ULHA_INT64 *  _lpllSize
                    )
-----------------------------------------------------------------------
順序数  106
要求版  0.50
機能
        格納ファイルのサイズを 64 ビット整数で得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。
        _lpllSize       情報を格納するためのバッファへのポインタ。 VC++ や
                        C++ Builder 5.x 等では実体は LONGLONG となっていま
                        す。BC++ 等 64ビット整数として LONGLONG を扱えない
                        コンパイラを使用する場合には， (アラインメントのな
                        い) LARGE_INTEGER 等で代用してください。

戻り値
        正常終了時      TRUE が返され， 指定されたバッファに格納ファイルの
                        サイズが格納されます。
        エラー時        FALSE を返します。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

-----------------------------------------------------------------------
%G      DWORD WINAPI UnarjGetCompressedSize(
                         HARC  _harc
                     )
-----------------------------------------------------------------------
順序数  42
要求版  0.01
機能
        格納ファイルの圧縮サイズを得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。

戻り値
        正常終了時      格納ファイルの圧縮サイズを返します。
        エラー時        (DWORD)-1 を返します。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        圧縮後のサイズが 4GB を超えたメンバを扱った場合， 圧縮サイズの下位
        32 ビットが返ります。エラーとはなりませんので注意してください。

-----------------------------------------------------------------------
%G      BOOL WINAPI UnarjGetCompressedSizeEx(
                        HARC          _harc,
                        ULHA_INT64 *  _lpllSize
                    )
-----------------------------------------------------------------------
順序数  107
要求版  0.50
機能
        格納ファイルの圧縮サイズを 64 ビット整数で得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。
        _lpllSize       情報を格納するためのバッファへのポインタ。 VC++ や
                        C++ Builder 5.x 等では実体は LONGLONG となっていま
                        す。BC++ 等 64ビット整数として LONGLONG を扱えない
                        コンパイラを使用する場合には， (アラインメントのな
                        い) LARGE_INTEGER 等で代用してください。

戻り値
        正常終了時      TRUE が返され， 指定されたバッファに格納ファイルの
                        圧縮サイズが格納されます。
        エラー時        FALSE を返します。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

-----------------------------------------------------------------------
%H      WORD WINAPI UnarjGetRatio(
                        HARC  _harc
                    )
-----------------------------------------------------------------------
順序数  43
要求版  0.01
機能
        格納ファイルの圧縮率を得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。

戻り値
        正常終了時      パーミル (千分率) で現された格納ファイルの圧縮率を
                        返します。
        エラー時        (WORD)-1 を返します。 実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        (圧縮サイズ / ファイルのサイズ) * 1000  の計算により求められること
        から，1000 を超える場合がある点に注意してください。

-----------------------------------------------------------------------
%I      WORD WINAPI UnarjGetDate(
                        HARC  _harc
                    )
-----------------------------------------------------------------------
順序数  44
要求版  0.01
機能
        格納ファイルの日付を DOS 形式で得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。

戻り値
        正常終了時      格納ファイルの日付が返されます。形式は INDIVIDUAL-
                        INFO 構造体に格納されるものと同じで， 次のようなも
                        のです。

                            struct {
                                unsigned ft_day   : 5;  /* Days */
                                unsigned ft_month : 4;  /* Months */
                                unsigned ft_year  : 7;  /* Year */
                            } _DosDate;

                        つまり，ftime の上位ワードと同じ構造となっていて，
                        図示すると

                         15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
                        |<--- (年 - 1980) -->|<--- 月 -->|<---- 日 ---->|

                        のようになります。
        エラー時        (WORD)-1 を返します。 実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        ft_year に格納される値は 1980 年からの経過年数です。したがって，理
        論的には 2107 年まで表現できることになります。

-----------------------------------------------------------------------
%J      WORD WINAPI UnarjGetTime(
                        HARC  _harc
                    )
-----------------------------------------------------------------------
順序数  45
要求版  0.01
機能
        格納ファイルの時刻を DOS 形式で得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。

戻り値
        正常終了時      格納ファイルの時刻が返されます。形式は INDIVIDUAL-
                        INFO 構造体に格納されるものと同じで， 次のようなも
                        のです。

                            struct {
                                unsigned ft_tsec : 5;  /* Two second
                                                          interval */
                                unsigned ft_min  : 6;  /* Minutes */
                                unsigned ft_hour : 5;  /* Hours */
                            } _DosTime;

                        つまり，ftime の下位ワードと同じ構造となっていて，
                        図示すると

                          15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
                         |<---- 時 ---->|<------ 分 ----->|<- (秒 / 2) ->|

                        のようになります。
        エラー時        (WORD)-1 を返します。 実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        ft_tsec  に格納される値が秒を 2 で割ったものである点に注意してくだ
        さい。

<<重要>>
        NTFS 上のファイルや UNIX 等が期限のファイルの場合，00:00:01 等，秒
        が奇数である場合が当然ありますが，そのようなデータの扱いがプラット
        フォームにより異なっていることに注意してください。Win32s，Win95 で
        は丸めの際に切り捨てが行われますが，その他では切り上げが行われます。
        特に注意が必要なのは，Win98 であり，API のバグから， SetFileTime()
        等では切り上げが行われるにもかかわらず  FileTimeToDosDateTime() で
        は切り捨てられてしまいます。
        UNARJ32.DLL においては，Win32 API を使用しないことにより，Win98 に
        おいても切り上げた数値が返されるようになっています。(Ver 0.29 以降)

-----------------------------------------------------------------------
%K      DWORD WINAPI UnarjGetWriteTime(
                         HARC  _harc
                     )
-----------------------------------------------------------------------
順序数  62
要求版  0.01
機能
        格納ファイルの最終更新日時を得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。

戻り値
        正常終了時      格納ファイルの更新日時が UNIX 形式で返されます。
                        UNIX 形式とは，Jan.1,1970 00:00:00 からの秒数です。
        エラー時        (DWORD)-1 を返します。  実際のエラーコードを得るに
                        は UnarjGetLastError() API を使用してください。

注意
        ARJ 書庫ではタイムゾーンの概念がなく，また常にローカル時間で格納が
        行われているため， 当該環境のタイムゾーンに従って単純に UTC 時間へ
        変換したものとなっている点に注意してください。
        ここで返される情報については， unsigned なものであるため理論的には
        2105 年まで表現できることになりますが，現在の多くの処理系では type-
        def long time_t; の定義によっているため，2038 年以降を現すデータに
        ついて正常に扱われない恐れがあります。

-----------------------------------------------------------------------
%K      BOOL WINAPI UnarjGetWriteTimeEx(
                        HARC        _harc,
                        FILETIME *  _lpftLastWriteTime
                    )
-----------------------------------------------------------------------
順序数  65
要求版  0.50
機能
        格納ファイルの最終更新日時を得ます。

引数
        _harc                   UnarjOpenArchive() で返されたハンドル。
        _lpftLastWriteTime      情報を格納する FILETIME 構造体へのポインタ。

戻り値
        正常終了時      TRUE が返され， 指定された FILETIME 構造体に更新日
                        時を格納します。FILETIME 形式とは Jan.1,1601 00:00:
                        00 からの 100ns 単位の経過時間を 64 ビットの数値で
                        表したものです。 詳しくは Win32 API のヘルプ等を参
                        照してください。
        エラー時        FALSE を返します。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        この API で得られる情報は，書庫から得られる情報 (DOS 形式) を
        FILETIME 構造体に変換したものとなります。
        ARJ 書庫ではタイムゾーンの概念がなく，また常にローカル時間で格納が
        行われているため， 当該環境のタイムゾーンに従って単純に UTC 時間へ
        変換したものとなっている点に注意してください。

-----------------------------------------------------------------------
%K      BOOL WINAPI UnarjGetWriteTime64(
                        HARC          _harc,
                        ULHA_INT64 *  _lpllLastWriteTime
                    )
-----------------------------------------------------------------------
順序数  130
要求版  1.10
機能
        格納ファイルの最終更新日時 (UTC) を得ます。

引数
        _harc                   UnarjOpenArchive() で返されたハンドル。
        _lpllLastWriteTime      情報を格納するバッファへのポインタ。  VC++
                                や  C++ Builder 5.x 等では実体は  LONGLONG
                                となっています。BC++ 等 64ビット整数として
                                LONGLONG  を扱えないコンパイラを使用する場
                                合には，(アラインメントのない)
                                LARGE_INTEGER 等で代用してください。

戻り値
        正常終了時      TRUE が返され， 指定されたバッファに更新日時を  64
                        ビットの UNIX 形式で格納します。UNIX 形式とは，
                        Jan.1,1970 00:00:00 からの秒数です。それより前の更
                        新日時については負数で表現されます。
        エラー時        FALSE を返します。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        この API で得られる情報は，書庫から得られる情報 (DOS 形式) を
        64ビットの UNIX 形式に変換したものとなります。
        ARJ 書庫ではタイムゾーンの概念がなく，また常にローカル時間で格納が
        行われているため， 当該環境のタイムゾーンに従って単純に UTC 時間へ
        変換したものとなっている点に注意してください。

-----------------------------------------------------------------------
%L      DWORD WINAPI UnarjGetCreateTime(
                         HARC  _harc
                     )
-----------------------------------------------------------------------
順序数  63
要求版  0.01
機能
        格納ファイルの作成日時を得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。

戻り値
        正常終了時      格納ファイルの作成日時が UNIX 形式で返されます。
                        UNIX 形式とは，Jan.1,1970 00:00:00 からの秒数です。
        エラー時        (DWORD)-1 を返します。  実際のエラーコードを得るに
                        は UnarjGetLastError() API を使用してください。

注意
        ARJ 書庫ではタイムゾーンの概念がなく，また常にローカル時間で格納が
        行われているため， 当該環境のタイムゾーンに従って単純に UTC 時間へ
        変換したものとなっている点に注意してください。
        ここで返される情報については， unsigned なものであるため理論的には
        2105 年まで表現できることになりますが，現在の多くの処理系では type-
        def long time_t; の定義によっているため，2038 年以降を現すデータに
        ついて正常に扱われない恐れがあります。

参考
        ARJ 書庫では更新日時しか管理されていないため， UnarjGetWriteTime()
        と同じ値が返されます。 ただし，ARJ Ver 2.62 以降で作成された書庫の
        場合は，作成日時が記録されている場合があります。UNARJ32.DLL Ver 0.
        43 以降では，そのような書庫においては作成日時が得られます。

-----------------------------------------------------------------------
%L      BOOL WINAPI UnarjGetCreateTimeEx(
                        HARC        _harc,
                        FILETIME *  _lpftCreationTime
                    )
-----------------------------------------------------------------------
順序数  66
要求版  0.50
機能
        格納ファイルの作成日時を得ます。

引数
        _harc                   UnarjOpenArchive() で返されたハンドル。
        _lpftCreationTime       情報を格納する FILETIME 構造体へのポインタ。

戻り値
        正常終了時      TRUE が返され， 指定された FILETIME 構造体に作成日
                        時を格納します。FILETIME 形式とは Jan.1,1601 00:00:
                        00 からの 100ns 単位の経過時間を 64 ビットの数値で
                        表したものです。 詳しくは Win32 API のヘルプ等を参
                        照してください。
        エラー時        FALSE を返します。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        この API で得られる情報は，書庫から得られる情報 (DOS 形式) を
        FILETIME 構造体に変換したものとなります。
        ARJ 書庫ではタイムゾーンの概念がなく，また常にローカル時間で格納が
        行われているため， 当該環境のタイムゾーンに従って単純に UTC 時間へ
        変換したものとなっている点に注意してください。

参考
        ARJ 書庫では更新日時しか管理されていないため， UnarjGetWriteTimeEx
        () と同じ値が返されます。ただし，ARJ Ver 2.62 以降で作成された書庫
        の場合は，作成日時が記録されている場合があります。 UNARJ32.DLL Ver
        0.43 以降では，そのような書庫においては作成日時が得られます。

-----------------------------------------------------------------------
%L      BOOL WINAPI UnarjGetCreateTime64(
                        HARC          _harc,
                        ULHA_INT64 *  _lpllCreationTime
                    )
-----------------------------------------------------------------------
順序数  131
要求版  1.10
機能
        格納ファイルの作成日時 (UTC) を得ます。

引数
        _harc                   UnarjOpenArchive() で返されたハンドル。
        _lpllCreationTime       情報を格納するバッファへのポインタ。  VC++
                                や  C++ Builder 5.x 等では実体は  LONGLONG
                                となっています。BC++ 等 64ビット整数として
                                LONGLONG  を扱えないコンパイラを使用する場
                                合には，(アラインメントのない)
                                LARGE_INTEGER 等で代用してください。

戻り値
        正常終了時      TRUE が返され， 指定されたバッファに作成日時を  64
                        ビットの UNIX 形式で格納します。UNIX 形式とは，
                        Jan.1,1970 00:00:00 からの秒数です。それより前の作
                        成日時については負数で表現されます。
        エラー時        FALSE を返します。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        この API で得られる情報は，書庫から得られる情報 (DOS 形式) を
        64ビットの UNIX 形式に変換したものとなります。
        ARJ 書庫ではタイムゾーンの概念がなく，また常にローカル時間で格納が
        行われているため， 当該環境のタイムゾーンに従って単純に UTC 時間へ
        変換したものとなっている点に注意してください。

参考
        ARJ 書庫では更新日時しか管理されていないため， UnarjGetWriteTimeEx
        () と同じ値が返されます。ただし，ARJ Ver 2.62 以降で作成された書庫
        の場合は，作成日時が記録されている場合があります。 UNARJ32.DLL Ver
        0.43 以降では，そのような書庫においては作成日時が得られます。

-----------------------------------------------------------------------
%M      DWORD WINAPI UnarjGetAccessTime(
                         HARC  _harc
                     )
-----------------------------------------------------------------------
順序数  64
要求版  0.01
機能
        格納ファイルの参照日時を得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。

戻り値
        正常終了時      格納ファイルの参照日時が UNIX 形式で返されます。
                        UNIX 形式とは，Jan.1,1970 00:00:00 からの秒数です。
        エラー時        (DWORD)-1 を返します。  実際のエラーコードを得るに
                        は UnarjGetLastError() API を使用してください。

注意
        ARJ 書庫ではタイムゾーンの概念がなく，また常にローカル時間で格納が
        行われているため， 当該環境のタイムゾーンに従って単純に UTC 時間へ
        変換したものとなっている点に注意してください。
        ここで返される情報については， unsigned なものであるため理論的には
        2105 年まで表現できることになりますが，現在の多くの処理系では type-
        def long time_t; の定義によっているため，2038 年以降を現すデータに
        ついて正常に扱われない恐れがあります。

参考
        ARJ 書庫では更新日時しか管理されていないため， UnarjGetWriteTime()
        と同じ値が返されます。 ただし，ARJ Ver 2.62 以降で作成された書庫の
        場合は，参照日時が記録されている場合があります。UNARJ32.DLL Ver 0.
        43 以降では，そのような書庫においては参照日時が得られます。 が，書
        庫に記録されているのは日付だけで，時間は必ず 00:00:00 となります。

-----------------------------------------------------------------------
%M      BOOL WINAPI UnarjGetAccessTimeEx(
                        HARC        _harc,
                        FILETIME *  _lpftLastAccessTime
                    )
-----------------------------------------------------------------------
順序数  67
要求版  0.50
機能
        格納ファイルの参照日時を得ます。

引数
        _harc                   UnarjOpenArchive() で返されたハンドル。
        _lpftLastAccessTime     情報を格納する FILETIME 構造体へのポインタ。

戻り値
        正常終了時      TRUE が返され， 指定された FILETIME 構造体に参照日
                        時を格納します。FILETIME 形式とは Jan.1,1601 00:00:
                        00 からの 100ns 単位の経過時間を 64 ビットの数値で
                        表したものです。 詳しくは Win32 API のヘルプ等を参
                        照してください。
        エラー時        FALSE を返します。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        この API で得られる情報は，書庫から得られる情報 (DOS 形式) を
        FILETIME 構造体に変換したものとなります。
        ARJ 書庫ではタイムゾーンの概念がなく，また常にローカル時間で格納が
        行われているため， 当該環境のタイムゾーンに従って単純に UTC 時間へ
        変換したものとなっている点に注意してください。

参考
        ARJ 書庫では更新日時しか管理されていないため， UnarjGetWriteTimeEx
        () と同じ値が返されます。ただし，ARJ Ver 2.62 以降で作成された書庫
        の場合は，参照日時が記録されている場合があります。 UNARJ32.DLL Ver
        0.43 以降では，そのような書庫においては参照日時が得られます。 が，
        書庫に記録されているのは日付だけで，時間は必ず 00:00:00 となります。

-----------------------------------------------------------------------
%M      BOOL WINAPI UnarjGetAccessTime64(
                        HARC          _harc,
                        ULHA_INT64 *  _lpllLastAccessTime
                    )
-----------------------------------------------------------------------
順序数  132
要求版  1.10
機能
        格納ファイルの参照日時 (UTC) を得ます。

引数
        _harc                   UnarjOpenArchive() で返されたハンドル。
        _lpftLastAccessTime     情報を格納するバッファへのポインタ。  VC++
                                や  C++ Builder 5.x 等では実体は  LONGLONG
                                となっています。BC++ 等 64ビット整数として
                                LONGLONG  を扱えないコンパイラを使用する場
                                合には，(アラインメントのない)
                                LARGE_INTEGER 等で代用してください。

戻り値
        正常終了時      TRUE が返され， 指定されたバッファに参照日時を  64
                        ビットの UNIX 形式で格納します。UNIX 形式とは，
                        Jan.1,1970 00:00:00 からの秒数です。それより前の参
                        照日時については負数で表現されます。
        エラー時        FALSE を返します。実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。

注意
        この API で得られる情報は，書庫から得られる情報 (DOS 形式) を
        64ビットの UNIX 形式に変換したものとなります。
        ARJ 書庫ではタイムゾーンの概念がなく，また常にローカル時間で格納が
        行われているため， 当該環境のタイムゾーンに従って単純に UTC 時間へ
        変換したものとなっている点に注意してください。

参考
        ARJ 書庫では更新日時しか管理されていないため， UnarjGetWriteTimeEx
        () と同じ値が返されます。ただし，ARJ Ver 2.62 以降で作成された書庫
        の場合は，参照日時が記録されている場合があります。 UNARJ32.DLL Ver
        0.43 以降では，そのような書庫においては参照日時が得られます。 が，
        書庫に記録されているのは日付だけで，時間は必ず 00:00:00 となります。

-----------------------------------------------------------------------
%N      DWORD WINAPI UnarjGetCRC(
                         HARC  _harc
                     )
-----------------------------------------------------------------------
順序数  46
要求版  0.01
機能
        格納ファイルのチェックサムを得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。

戻り値
        正常終了時      格納ファイルのチェックサムが返されます。
        エラー時        (DWORD)-1 が返されます。

-----------------------------------------------------------------------
%O      int WINAPI UnarjGetAttribute(
                       HARC  _harc
                   )
-----------------------------------------------------------------------
順序数  47
要求版  0.01
機能
        格納ファイルの属性を得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。

戻り値
        正常終了時      格納ファイルの属性が返されます。以下のフラグを組み
                        合わせたものとなります。

                         1      FA_RDONLY       読み込み専用ファイル。
                         2      FA_HIDDEN       不可視属性ファイル。
                         4      FA_SYSTEM       システムファイル。
                         8      FA_LABEL        ボリュームラベル。
                        16      FA_DIREC        ディレクトリ。
                        32      FA_ARCH         保存ビット。

        エラー時        -1 が返されます。

-----------------------------------------------------------------------
%O      int WINAPI UnarjGetAttributes(
                       HARC  _harc
                   )
-----------------------------------------------------------------------
順序数  120
要求版  0.63
機能
        格納ファイルの属性を得ます。UnarjGetAttribute() がスペルミスであっ
        たため， 本来の名前のものを用意しただけで，  内部的には  UnarjGet-
        Attribute() を，そのまま呼び出しています。


引数
        _harc           UnarjOpenArchive() で返されたハンドル。

戻り値
        UnarjGetAttribute() の項を参照。

-----------------------------------------------------------------------
%P      UINT WINAPI UnarjGetOSType(
                        HARC _harc
                    )
-----------------------------------------------------------------------
順序数  48
要求版  0.01
機能
        格納ファイルが作成された OS を得ます。

引数
        _harc           UnarjOpenArchive() で返されたハンドル。

戻り値
        正常終了時      OS の種類を表す以下の数値が返されます。

                                 0      MS-DOS
                                 1      PRIMOS
                                 2      UNIX
                                 3      AMIGA
                                 4      旧 MAC-OS
                                 5      OS/2
                                 6      APPLE GS
                                 7      ATARI ST
                                 8      NEXT
                                 9      VAX VMS
                                10      その他 (Windows95)

        エラー時        (UINT)-1 を返します。 実際のエラーコードを得るには
                        UnarjGetLastError() API を使用してください。


--------------------------------------------------------------------------
その他の API
--------------------------------------------------------------------------

　Unarj() 系 や OpenArchive 系，その他のドキュメントで説明されているカテゴ
リに属さない API 群です。

-----------------------------------------------------------------------
%U      BOOL WINAPI UnarjSetPriority(
                        int  _nPriority
                    )
-----------------------------------------------------------------------
順序数  119
要求版  0.56
機能
        UNARJ32.DLL の優先順位 (プライオリティ) を指定します。

引数
        _nPriority      優先順位。以下の値を指定できます：

                THREAD_PRIORITY_HIGHEST         スレッド標準の相対優先順位
                        (2)                     より  2 ポイント高い優先順
                                                位を指定します。
                THREAD_PRIORITY_ABOVE_NORMAL    スレッド標準の相対優先順位
                        (1)                     より  1 ポイント高い優先順
                                                位を指定します。
                THREAD_PRIORITY_NORMAL          スレッド標準の相対優先順位
                        (0)                     を指定します。
                THREAD_PRIORITY_BELOW_NORMAL    スレッド標準の相対優先順位
                        (-1)                    より  1 ポイント低い優先順
                                                位を指定します。
                THREAD_PRIORITY_LOWEST          スレッド標準の相対優先順位
                        (-2)                    より  2 ポイント低い優先順
                                                位を指定します。
                THREAD_PRIORITY_IDLE            基本優先順位として  1 を指
                        (-15)                   定します。
                その他                          UNARJ32.DLL が  API の実行
                                                時に優先順位の設定を行わな
                                                いよう指定します (初期値)。

戻り値
        正常終了時      TRUE を返します。
        エラー時        動作中で変更できなかった場合や，引数が間違いの場合
                        には FALSE を返します。 実際のエラーコードを得るに
                        は UnarjGetLastError() API を使用してください。

参考
        優先順位を下げても，他に高負荷を掛けるものが少ない場合は，結果とし
        て UNARJ32.DLL が殆どの CPU 時間を占有してしまいますので， THREAD_
        PRIORITY_BELOW_NORMAL 以下の (低い) 順位が指定された場合には，明示
        的に Sleep() API を使用して眠る仕様となっています。 さらに，Unarj-
        SetBackGroundMode() でバックグラウンドモードが指定されている場合に
        は，THREAD_PRIORITY_NORMAL を含む， それ以上の優先順位が指定されて
        いても， 多少は眠るようになっています。

        この API は UnarjSetWaitLevel() とでも名付けたほうが良さそうな性格
        のもので，優先順位の指定というよりも，ウェイトのほうに重点が置かれ
        ています。

        一般的にノートパソコンはデスクトップに比べて放熱周りの弱いものが多
        く，最高速度でファンを回していても，CPU の負荷が高いと放熱が追いつ
        かず温度が上がる一方…というものが多々見受けられます。一応ある程度
        の温度で上昇が止まるものの，その温度が 60 度以上だったりと，何かの
        拍子で強制的に電源が落とされかねない (実際に落ちることもある) 状態
        では長時間の作業が行えません。

        業務利用では，扱うファイル数が多い，ファイルが大きい…といった理由
        で書庫操作時間の長くなる傾向があるのか，『負荷を下げられないか？』
        といった要望が意外と多く寄せられました。

        そのような経緯で登場したのが UnarjSetPriority() で，最初に書いたよ
        うに優先順位を下げただけでは負荷軽減には役に立たないことから，ウェ
        イトを入れるようになっています。

-----------------------------------------------------------------------
%V      int WINAPI UnarjGetLastError(
                        LPDWORD  _lpdwSystemError
                    )
-----------------------------------------------------------------------
順序数  123
要求版  0.70
機能
        UNARJ32.DLL の最新のエラーコードを取得します。

引数
        _lpdwSystemError        UNARJ32.DLL がエラーコードを設定した時点で
                                のシステムのエラーコード   (GetLastError()
                                API を実行して得られたもの) を格納するため
                                のバッファへのポインタ。

戻り値
        UNARJ32.DLL の最新のエラーコードが返されます。

注意
        UNARJ32.DLL は，各 API の実行開始時に内部的に保持しているエラーコー
        ドのクリアを行います。

参考
        Unarj() などエラーコードを返す API の実行直後では， API の返却値と
        同じ値が得られることになるわけですが， "-htc" スイッチが指定された
        場合や，UnarjGetOriginalSizeEx() など処理の正否判定のみを返す  API
        を使用した場合などには，本来のエラーコードを得ることが出来ます。


-----------------------------------------------------------------------
%#. ARJ 書庫におけるタイムスタンプ記録に関する注意
-----------------------------------------------------------------------

　UnarjGetArcTime() 等，タイムスタンプ関係 API の項で説明しましたが，Win98
には FileTimeToDosDateTime() にバグが存在し，残念ながら WinME にもそのまま
バグが受け継がれています。

　UNARJ32.DLL では， 一応 FILETIME 構造体や time_t (UNIX 形式)  から ftime
(DOS 形式) の変換に関しては API を使用しないことにより，常に切り上げた値に
丸めを行うようになっていますが，オリジナルの ARJ.EXE 及び ARJ32.EXE はバグ
付きの API をそのまま使って ftime に変換し，書庫に記録しています。

　そのため，ネットワーク上の NTFS パーティションはもちろん，ローカルを含む
FAT パーティションでの作成日時 (参照日時は時間がクリアされるため表面化しな
い。 また，更新日時はファイルシステムにより常に切り上げられた値が記録済み)
については，書庫を Win98/ME 上と NT 上のどちらで作成したかにより，結果が異
なってしまいます。

　以下は，作成・更新日時が 2000-10-16 11:44:23 のファイルを ARJ32.EXE で格
納した例です。

[Win2K 上で ARJ32.EXE を使って格納]
===============================================================================
Rev Host OS    Original Compressed Ratio DateTime modified CRC-32   AttrBTPMGVX
------------ ---------- ---------- ----- ----------------- -------- -----------
001) TMP\NVRAM0
101  MS-DOS         8496        495 0.058000-10-16 11:44:24 72D4FEC7 A--W B+1
                                   DTA  000-11-02 00:00:00
                                   DTC  000-10-16 11:44:24
------------ ---------- ---------- -----
===============================================================================
[WinME 上で ARJ32.EXE を使って格納]
===============================================================================
Rev Host OS    Original Compressed Ratio DateTime modified CRC-32   AttrBTPMGVX
------------ ---------- ---------- ----- ----------------- -------- -----------
001) TMP\NVRAM0
101  MS-DOS         8496        495 0.058000-10-16 11:44:24 72D4FEC7 A--W B+1
                                   DTA  000-11-02 00:00:00
                                   DTC  000-10-16 11:44:22
------------ ---------- ---------- -----
===============================================================================

　見て解るように，作成日時の結果が異なってしまっていて，もし，これがネット
ワーク上の NTFS パーティションのファイルであれば，更新日時の結果も異なって
いたはずです。

　このように，ARJ(32).EXE だけでなく，多数のソフトで OS のバグによりタイム
スタンプがプラットフォームによって異なった値として扱われてしまう事実がある
点を，開発側として認識しておく必要があります。


-----------------------------------------------------------------------
%2. 『統合アーカイバプロジェクト』対応 API について
-----------------------------------------------------------------------

　UNARJ32.DLL は『統合アーカイバプロジェクト』対応 DLL の一つですが， 広く
知られているように， 『統合アーカイバプロジェクト』対応 DLL の仕様というも
のが明確に定められているわけではありません。一応，このドキュメントで説明さ
れている API 群をもっていれば， その範疇に入ると解釈されているようですが，
実際には，各書庫の仕様や参考にしたソースの関係から， 各 DLL で対応している
API がバラバラで統一はとれていません。

　対応アプリ側に立った場合， これらの API の優先度 (必要度) は以下のような
感じになっているようです。

    I.  (ほぼ) 必須であるもの

        %a UnarjGetVersion                      DLL の版の取得
        %b UnarjGetRunning                      DLL の実行状況の取得
        %i Unarj                                書庫操作一般
        %j UnarjCheckArchive                    書庫のチェック
        %q UnarjOpenArchive                     書庫のオープン
        %r UnarjCloseArchive                    書庫のクローズ
        %s UnarjFindFirst                       格納ファイルの検索
        %t UnarjFindNext                        格納ファイルの検索
        %w UnarjGetArcOriginalSize              展開サイズの取得
        %x UnarjGetArcCompressedSize            圧縮サイズの取得
        %y UnarjGetArcRatio                     圧縮率の取得
        %D UnarjGetFileName                     ファイル名の取得
        %E UnarjGetMethod                       メソッドの取得
        %F UnarjGetOriginalSize                 サイズの取得
        %G UnarjGetCompressedSize               圧縮サイズの取得
        %H UnarjGetRatio                        圧縮率の取得
        %I UnarjGetDate                         更新日の取得
        %J UnarjGetTime                         更新時間の取得
        %O UnarjGetAttribute                    属性の取得

    II.  必須となってくるであろうもの

        %w UnarjGetArcOriginalSizeEx            展開サイズの取得
        %x UnarjGetArcCompressedSizeEx          圧縮サイズの取得
        %F UnarjGetOriginalSizeEx               サイズの取得
        %G UnarjGetCompressedSizeEx             圧縮サイズの取得
        %K UnarjGetWriteTime                    更新日時の取得
        %K UnarjGetWriteTimeEx                  更新日時の取得
        %L UnarjGetCreateTime                   作成日時の取得
        %L UnarjGetCreateTimeEx                 作成日時の取得
        %M UnarjGetAccessTime                   参照日時の取得
        %M UnarjGetAccessTimeEx                 参照日時の取得

    III.  あったほうがよいもの

        %e UnarjGetCursorMode                   カーソル表示モードの取得
        %f UnarjSetCursorMode                   カーソル表示モードの設定
        %k UnarjGetFileCount                    格納ファイル数の取得
        %m UnarjConfigDialog                    DLL の設定
        %v UnarjGetArcFileSize                  書庫サイズの取得
        %v UnarjGetArcFileSizeEx                書庫サイズの取得
        %N UnarjGetCRC                          チェックサムの取得

    IV.  無くても比較的問題ないもの

        %c UnarjGetBackGroundMode               DLL の動作モードの取得
        %d UnarjSetBackGroundMode               DLL の動作モードの設定
        %o UnarjExtractMem                      メモリへの展開
        %p UnarjCompressMem                     メモリからの格納
        %q UnarjOpenArchive2                    書庫のオープン
        %u UnarjGetArcFileName                  書庫名の取得
        %z UnarjGetArcDate                      書庫更新日の取得
        %A UnarjGetArcTime                      書庫更新時間の取得
        %Q UnarjGetArcCreateTimeEx              書庫作成日時の取得
        %R UnarjGetArcAccessTimeEx              書庫参照日時の取得
        %S UnarjGetArcWriteTimeEx               書庫更新日時の取得
        %Q UnarjGetArcCreateTimeEx2             書庫作成日時の取得
        %S UnarjGetArcWriteTimeEx2              書庫更新日時の取得
        %B UnarjGetArcOSType                    使用 OS の取得
        %C UnarjIsSFXFile                       SFX タイプの取得
        %T UnarjGetArcReadSize                  読み込みサイズの取得
        %T UnarjGetArcReadSizeEx                読み込みサイズの取得
        %P UnarjGetOSType                       使用 OS の取得
        %Q UnarjSetPriority                     優先度の設定

    IV.  無くても殆ど問題とならないもの

        %g UnarjGetCursorInterval               回転タイミングの取得
        %h UnarjSetCursorInterval               回転タイミングの設定
        %l UnarjQueryFunctionList               対応 API の問い合わせ
        %V UnarjGetLastError                    エラーコードの取得


-----------------------------------------------------------------------
%3. INDIVIDUALINFO の構造
-----------------------------------------------------------------------
構造体定義

        typedef struct {
                DWORD           dwOriginalSize;
                DWORD           dwCompressedSize;
                DWORD           dwCRC;
                UINT            uFlag;
                UINT            uOSType;
                WORD            wRatio;
                WORD            wDate;
                WORD            wTime;
                TCHAR           szFileName[FNAME_MAX32 + 1];
                TCHAR           dummy1[3];
                TCHAR           szAttribute[8];
                TCHAR           szMode[8];
        } INDIVIDUALINFO;

メンバの説明
        dwOriginalSize          ファイルのサイズ。
        dwCompressedSize        圧縮後のサイズ。
        dwCRC                   格納ファイルのチェックサム用 CRC。ただし，
                                上位 16 bit は常に 0。
        uFlag                   展開やテストを行った場合，格納ファイル毎の
                                処理結果が返されます。 コードは Unarj() が
                                返すものと同じ。その他の場合は 0。
        uOSType                 このファイルの作成に使われた OS。
                                        0      MS-DOS
                                        1      PRIMOS
                                        2      UNIX
                                        3       AMIGA
                                        4      旧 MAC-OS
                                        5      OS/2
                                        6       APPLE GS
                                        7       ATARI ST
                                        8       NEXT
                                        9       VAX VMS
                                       10       その他 (Windows95)
                                        -1      エラー
        wRatio                  パーミル (千分率) で表された圧縮率。
        wDate                   ftime の上位ワードと同じ次の構造で現された
                                日付。
                                    struct {
                                        unsigned ft_day   : 5;
                                        unsigned ft_month : 4;
                                        unsigned ft_year  : 7;
                                    } _DosDate;
                                ft_year に格納される値は 1980 年からの経過
                                年数です。したがって，理論的には 2107 年ま
                                で表現できることになります。
        wTime                   ftime の下位ワードと同じ次の構造で現された
                                時刻。
                                    struct {
                                        unsigned ft_tsec : 5;
                                        unsigned ft_min  : 6;
                                        unsigned ft_hour : 5;
                                    } _DosTime;
                                ft_tsec  に格納される値が秒を 2 で割ったも
                                のである点に注意してください。

                                <<重要>>
                                NTFS 上のファイルや  UNIX 等が期限のファイ
                                ルの場合， 00:00:01 等秒が奇数である場合が
                                当然ありますが，そのようなデータの扱いがプ
                                ラットフォームにより異なっていることに注意
                                してください。Win32s，Win95 では丸めの際に
                                切り捨てが行われますが，その他では切り上げ
                                が行われます。 特に注意が必要なのは，Win98
                                であり，API のバグから，SetFileTime() 等で
                                は切り上げが行われるにもかかわらず   File-
                                TimeToDosDateTime() では切り捨てられてしま
                                います。
                                UNARJ32.DLL においては，Win32 API を使用し
                                ないことにより，Win98 においても切り上げた
                                数値が返されるようになっています。
                                (Ver 0.29 以降)
        szFileName              格納ファイルの名前。
        szAttribute             格納ファイルの属性。UNARJ.EXE と同じ。
        szMode                  格納ファイルの格納モード。

格納モードの意味。
        １文字目から，
                B -> バックアップ・ファイル
                T -> T:テキスト，B:バイナリ，D:ディレクトリ
                P -> パスの情報を見られる
                M -> 使われている圧縮法
                G -> ファイルは暗号化されている
                V -> 書庫は別のボリュームに続いている
                X -> このファイルはより大きなファイルの続きの部分である
        を表します。

  　定義をみれば分かるとおり， INDIVIDUALINFO 構造体を使用する限りにおいて
  は，タイムスタンプは ftime の制度でしか得られません。 正確なタイムスタン
  プを得たい場合は API を使用する必要があります。

  　この構造体は UNARJ32.DLL 固有のものであり，他のアーカイバ関連 DLL で使
  用できるとは限りません。 従って，情報の取得にはなるべく API を使用するよ
  うにしてください。


-----------------------------------------------------------------------
%4. レジストリの設定値
-----------------------------------------------------------------------

　Win32s 環境では，名前がすべてキーとなり，値も全て REG_SZ となります。
全部説明すると却って混乱するので，一部しか記述されていません。(^^;;


        HKEY_CURRENT_USER\\Software\\ArchiverDll\\Common

        　"Common" から予想されるように，他の『統合アーカイバプロジェクト』
        に準拠した DLL の設定による影響を受ける場合があります。 当然ながら
        UNARJ32.DLL がこれらの値を設定した場合には， 他の DLL に影響を及ぼ
        す可能性があることになります。

                DefaultDir : REG_SZ

                        基準ディレクトリ。最後は '\' か ':' で終わっている
                        必要があります。

                DirectoryMode : REG_DWORD

                        展開時に絶対パスを使用するか，相対パスを使用するか
                        のフラグ。

                                0 :     相対パス。 "-jf0" を指定した場合と
                                        同じで，絶対パスについては相対パス
                                        に強制変換されます。
                                1 :     絶対パス。（デフォルト）

                BadPathLevel : REG_DWORD

                        不正パスチェックのチェックレベル。

                                0 :     チェックなし。"-htp0" を指定した場
                                        合と同じです。
                                1 :     レベル 1。"-htp1" を指定した場合と
                                        同じで，基準ディレクトリを越えて遡
                                        るパスを不正とします。(デフォルト)
                                3 :     レベル 2。"-htp3" を指定した場合と
                                        同じで，レベル 1 のチェックに加え，
                                        絶対パスを不正扱いとします。

                        これ以外の値を指定するとレベル 1 とみなされます。

                OverWriteMode : REG_DWORD

                        展開ファイルの上書き時の動作。

                                0 :     常に上書き。 "-jyo" を指定した場合
                                        と同じです。
                                1 :     上書きするか確認。(デフォルト)
                                2 :     上書きしません。"-jn" を指定した場
                                        合と同じです。

                ExtractAttribute : REG_DWORD

                        属性も展開 (復元) するかどうかのフラグ。

                                0 :     展開しません。
                                1 :     展開します。(デフォルト)

                JunkDirectory : REG_DWORD

                        'x' 命令を指定時にも 'e'  命令と見なして実行するか
                        どうかのフラグ。

                                0 :     'x' 命令を実行。(デフォルト)
                                1 :     'e' 命令を実行。"-hj" を指定した場
                                        合と同じです。


        HKEY_CURRENT_USER\\Software\\ArchiverDll\\UNARJ32

        　UNARJ32.DLL が固有の情報として設定・利用するものです。基本的にア
        プリケーション側で，ここでの情報を使用するかどうかを選べるので，こ
        こに設定したとおり動作するとは限りません。

                UnarjVersion : REG_DWORD

                        UnarjGetVersion() の返却値をユーザーが指定したい場
                        合に設定します。こちらは，全てのアプリに影響します。

                                119 :   この場合 119 を返すようになります。
                                        Ver 1.19 の意味。

                UseMFile : REG_DWORD

                        メモリマップトファイルを使用してファイルの入出力を
                        行うかどうかのフラグ。通常，UNARJ32.DLL は以下の場
                        合に可能であればメモリマップトファイルを利用します。
                        Win2k 以降の NT 系 OS のみが該当します。

                                読込時 ：常に。
                                書込時 ：ローカル上の固定ドライブの場合。

                        レジストリでの指定は以下のとおりです。

                                0 :     使用しません。
                                1 :     使用します。(デフォルト)

                FDDCheck : REG_DWORD

                        FDD ドライブの場合に上記の合計モードでのグラフ表示
                        の抑制を行うかどうかのフラグ。HDD 等のデバイスでは
                        書庫の２度読みを行ってもさほど気にならない程度だが，
                        FDD ではかなり待たされることになるのでデフォルトで
                        は通常表示を行うようになっています。

                                0 :     抑制を行いません。
                                1 :     抑制を行います。(デフォルト)

                bAlwaysOpen : REG_DWORD

                        UnarjFindFirst/Next() で書庫ファイルの開閉を行わな
                        いようにします。

                                0 :     開閉を行います。
                                1 :     UnarjFindClose()  が実行されるまで
                                        開いたままとします。（デフォルト）

                MatchLevel : REG_DWORD

                        厳密なファイルサーチをするかどうかのフラグ。

                                0 :     行いません。(デフォルト)
                                1 :     行います。 "-p" を指定した場合と同
                                        じです。

                DiskSpaceCheck : REG_DWORD

                        展開先の空き容量の確認をするかどうかのフラグ。

                                0 :     確認しません。(デフォルト)
                                1 :     確認します。"-jd" を指定した場合と
                                        同じです。

                MakeDirectoryMode : REG_DWORD

                        ディレクトリ作成時の確認をするかどうかのフラグ。

                                0 :     確認します。(デフォルト)
                                1 :     確認しません。"-jyc"  を指定した場
                                        合と同じです。

                TotalBar : REG_DWORD

                        展開ファイルの合計を 100% とした進捗グラフを表示す
                        るかどうかのフラグ。ただし，書庫を２度読みすること
                        になるので処理に時間がかかります。

                                0 :     表示しません。(デフォルト)
                                1 :     表示します。

                FVMode : REG_DWORD

                        展開ファイル名とグラフだけの簡易表示とするかどうか
                        のフラグ

                                0 :     通常表示を行います。(デフォルト)
                                1 :     簡易表示を行います。

                CauseIndexUse : REG_DWORD

                        索引ファイルを作成するかどうかを指定します。ここで
                        の指定は "-hk" スイッチに優先します。

                        0 :     スイッチ指定に従います。
                        1 :     常に索引ファイルを作成します。
                        2 :     索引ファイルを作成しません。


        HKEY_CURRENT_USER\\Software\\ArchiverDll\\UNARJ32\\UseOldLogList

        　旧形式ログ (改行コードが '\n') を使用するソフトを指定します。

                x : REG_SZ

                        ソフトのモジュール名を指定します。  x については，
                        0〜31 までが指定できます。モジュール名については，
                        例えば LHMelt であれば "LHMELT" のように拡張子を省
                        略して指定する必要があります。


-----------------------------------------------------------------------
%5. Unarj()の返すエラーコードとその意味
-----------------------------------------------------------------------

■警告    ：通常，該当ファイルについての処理をスキップするだけで，基本的に
            実行を中止することはありません。 "-jse" スイッチでエラーとする
            ことができます。

ERROR_DISK_SPACE        (0x8005)
                        書庫を作成したりファイルを展開するための空き容量が
                        足りなかったことを示します。格納時はエラーとなりま
                        すが，展開時は当該格納ファイルの展開をスキップして
                        次のファイルの展開に移ります。
ERROR_READ_ONLY         (0x8006)
                        読込専用属性の既存のファイルが存在するため，ファイ
                        ルの展開等が行えなかったことを示します。 CD-ROM 等
                        に書き込もうとした…といったパターンによるものが意
                        外と多いです。＞質問メール
ERROR_USER_SKIP         (0x8007)
                        展開先のディレクトリチェックや格納ファイルのパス情
                        報によるディレクトリ再構築時のディレクトリ作成確認
                        に対して，ユーザが作成を了承しなかったことを示しま
                        す。
ERROR_UNKNOWN_TYPE      (0x8008)
                        UNARJ32.DLL で扱えない，バイナリでもテキストでもな
                        い属性のファイルが扱われようとしたことを示します。
ERROR_FILE_CRC          (0x800C)
                        展開された  (またはチェックした) ファイルの CRC が
                        書庫の情報と異なっていることを示します。要は書庫ファ
                        イルのデータ化けです。(^^;)
ERROR_FILE_OPEN         (0x800D)
                        (書庫を除く) 各種ファイルのオープン時や GetFile-
                        Time() API 呼び出しのためなど，内部的な CreateFile
                        () API 呼び出しが失敗したことを示します。
ERROR_MORE_FRESH        (0x800E)
                        より新しいファイルなど，展開先に既存のファイルが存
                        在することを示します。
                        "-u" スイッチの指定によって意味が異なり， 必ずしも
                        『新しいファイルが存在すること』を示すものではあり
                        ません。
ERROR_NOT_EXIST         (0x800F)
                        マルチボリューム書庫において，継続フラグが指定され
                        たメンバの展開に必要な既存のファイルが，展開先に存
                        在しないことを示します。
ERROR_ALREADY_EXIST     (0x8010)
                        "-n+" スイッチが指定された場合に， (タイムスタンプ
                        等にかかわらず) 同名の既存のファイルが展開先に存在
                        していることを示します。

■エラー  ：致命的なエラーで多くはその時点で実行を中止します。

ERROR_MAKEDIRECTORY     (0x8012)
                        ディレクトリの作成に失敗したことを示します。
ERROR_CANNOT_WRITE      (0x8013)
                        WriteFile() API 呼び出しの失敗によるファイル書き込
                        みエラー全般を示します。
                        空き容量チェックを省略した結果，展開中に展開先ディ
                        レクトリの存在するディスクの空きがなくなってエラー
                        が発生…というパターンが多いです。
ERROR_HUFFMAN_CODE      (0x8014)
                        書庫の破損のため，当該ファイルのハフマン圧縮用テー
                        ブルの初期化が正常に行えなかったことを示します。
                        簡単に言えば『格納ファイルが壊れている』ということ
                        です。
ERROR_HEADER_CRC        (0x8016)
                        書庫のヘッダに記録されている  CRC と実際に読み込ん
                        だヘッダの CRC が一致しなかったことを示します。
                        こちらはヘッダのデータ化けです。
ERROR_HEADER_BROKEN     (0x8017)
                        書庫のヘッダが破損していることを示します。
                        UNLHA32.DLL と異なり，UNARJ32.DLL ではエラーコード
                        の細分化が行われていないため，ヘッダ破損の代表値と
                        して，このエラーが返されます。
ERROR_ARC_FILE_OPEN     (0x8018)
                        既存書庫のオープンに失敗したことを示します。
                        書庫操作時には，操作対象となる書庫が作業ファイルの
                        一つとして変名 (又はコピー) された上で使用されるこ
                        とから，  作業書庫のファイル名が報告されていても，
                        (実質)  操作対象の書庫についてのエラーを意味してい
                        る場合があります。
                        実際に ERROR_ARC_FILE_OPEN が返されるのは， 以下の
                        場合です：

                 ・書庫読込のため MyCreateFile() で書庫を開こうとした
                   際にエラーとなった場合。退避後の場合は作業書庫名で
                   報告される。
                 ・書庫の読込やタイムスタンプの取得・設定等のエラーに
                   ついては，それぞれのエラーコードが返されます。

ERROR_NOT_ARC_FILE      (0x8019)
                        Unarj() に渡されたコマンド列で書庫が指定されていな
                        い (又は UNARJ32.DLL が書庫名を認識できなかった)
                        ことを示します。
                        拡張子を省略した場合など，Unarj() が書庫と判断でき
                        ないこともありますが，指定ミスであることが多いです。
ERROR_CANNOT_READ       (0x801A)
                        ReadFile() API  呼び出しの失敗によるファイル読み込
                        みエラー全般を示します。
ERROR_FILE_STYLE        (0x801B)
                        指定された書庫が  ARJ 書庫ではない (又は  UNARJ32.
                        DLL が 書庫と認識できなかった) ことを示します。
ERROR_COMMAND_NAME      (0x801C)
                        Unarj() に渡されたコマンド列に誤りがあることを示し
                        ます。
                        コマンドそのものやファイル指定等に省略値が存在する
                        ことや，書庫指定やスイッチ指定等では別のエラーコー
                        ドが返されること等から，このエラーが返されるのは，
                        Unarj() 等の _szCmdLine にNULL  が渡された場合のみ
                        です。
ERROR_MORE_HEAP_MEMORY  (0x801D)
                        作業用ヒープメモリの確保 (ランタイムの malloc 呼び
                        出し) に失敗したことを示します。
ERROR_ENOUGH_MEMORY     (0x801E)
                        処理結果を返すためのバッファの確保  (GlobalAlloc()
                        API 呼び出し) に失敗したことを示します。
                        現在の UNARJ32.DLL では使用されていません。
ERROR_ALREADY_RUNNING   (0x801F)
                        すでに UNARJ32.DLL が動作中で API の多重呼び出しが
                        発生したことを示します。
ERROR_USER_CANCEL       (0x8020)
                        ユーザが明示的に処理を中止したことを示します。
ERROR_HARC_ISNOT_OPENED (0x8021)
                        UnarjOpenArchive() API を呼び出さずに  HARC ハンド
                        ルを使用した (又は HARC ハンドルの示すデータ領域が
                        破壊された) ことを示します。
                        UnarjOpenArchive()  で書庫とハンドルを関連付ける前
                        に  UnarjFindFirst() 等の API を使用した…という例
                        が殆どを占めます。
ERROR_NOT_SEARCH_MODE   (0x8022)
                        UnarjGetFirst() を呼び出さずに UnarjGetNext() が呼
                        び出された。または，これらを呼び出す前に UnarjGet-
                        FileName() 等の API が呼び出されたことを示します。
ERROR_NOT_SUPPORT       (0x8023)
                        UNARJ32.DLL  でサポートされていない API が使用され
                        たことを示します。
ERROR_TIME_STAMP        (0x8024)
                        "-o"  スイッチでの日時指定に誤りがあることを示しま
                        すが，このコードが実際に返されることはありません。
                        警告としてメッセージがログに出力されるのみです。
ERROR_TMP_OPEN          (0x8025)
                        書庫操作時に使用する作業ファイルが開けなかったこと
                        を示しますが，UNARJ32.DLL が展開専用であることから，
                        このエラーが返されることはありません。
ERROR_LONG_FILE_NAME    (0x8026)
                        (ワイルドカード等で指定された場合などの)  格納ファ
                        イルリスト作成時に，当該書庫で正常に扱えない可能性
                        のある長いパス情報 (ファイル名を含む) をもったファ
                        イルが見つかったことを示しますが，UNARJ32.DLL が展
                        開専用であることから，このエラーが返されることはあ
                        りません。
ERROR_ARC_READ_ONLY     (0x8027)
                        読込専用属性の書庫に対して書庫操作を行おうとしたこ
                        とを示しますが，UNARJ32.DLL が展開専用であることか
                        ら，このエラーが返されることはありません。
ERROR_SAME_NAME_FILE    (0x8028)
                        (特にパス情報を無視させた場合などに)  書庫に同じ名
                        前で格納される複数のファイルを格納しようとしたこと
                        を示しますが，UNARJ32.DLL が展開専用であることから，
                        このエラーが返されることはありません。
ERROR_NOT_FIND_ARC_FILE (0x8029)
                        操作対象書庫が見つからないことを示します。
                        このエラーが返されるのは，次の場合です：

                 ・対象となる書庫が必要な操作において，指定した書庫が
                   見つからなかった場合 (ワイルドカード指定等の関係も
                   あって， 実際に書庫を扱う前に MyFindfirst() での存
                   在チェックを行っています)。

ERROR_RESPONSE_READ     (0x802A)
                        (開けなかった場合等を含めて)  指定されたレスポンス
                        ファイルからの読込に失敗したことを示します。
ERROR_NOT_FILENAME      (0x802B)
                        対象ファイルを指定する必要のある操作において，対象
                        ファイルが指定されていないことを示します。
                        このエラーが返されるのは， 大きく分けて次の 2 つで
                        す：

                 ・UnarjExtractMem() API で _szCmdLine が NULL か何も
                   含まれていない場合。

ERROR_TMP_COPY          (0x802C)
                        書庫操作の結果を操作対象書庫として保存するためのコ
                        ピー処理に失敗したことを示しますが，UNARJ32.DLL が
                        展開専用であることから，このエラーが返されることは
                        ありません。
ERROR_EOF               (0x802D)
                        書庫の読込時に，予期しない箇所でファイルの終わりが
                        検知されたことを示します。
ERROR_ADD_TO_LARC       (0x802E)
                        操作対象として指定された書庫が，書庫操作の許されて
                        いない，LARC や Lhasa 等の自己展開書庫であることを
                        示します。UNLHA32.DLL 用のエラーコードであるため，
                        UNARJ32.DLL では使われていません。
ERROR_TMP_BACK_SPACE    (0x802F)
                        書庫操作の結果を操作対象書庫として保存するための空
                        き容量が存在していないことを示しますが，  UNARJ32.
                        DLL が展開専用であることから，このエラーが返される
                        ことはありません。
ERROR_SHARING           (0x8030)
                        圧縮・格納しようとしたファイルが共有エラーなどでア
                        クセスできなかったことを示します。UNLHA32.DLL 用の
                        エラーコードであるため，UNARJ32.DLL では使われてい
                        ません。
ERROR_NOT_FIND_FILE     (0x8031)
                        圧縮・格納しようとしたファイルが (処理前の格納対象
                        リスト作成時には見つかったにもかかわらず) 見つから
                        なかったことを示しますが，UNARJ32.DLL が展開専用で
                        あることから，このエラーが返されることはありません。
ERROR_LOG_FILE          (0x8032)
                        "-hy" スイッチが指定された場合に，ログファイルへの
                        書き込みが失敗したことを示します。
ERROR_NO_DEVICE         (0x8033)
                        (CD-ROM や FD が挿入されていない場合など) デバイス
                        (ドライブ) にアクセスできなかったことを示します。
ERROR_GET_ATTRIBUTES    (0x8034)
                        ファイル処理全般として  MyGetFileAttributes() が失
                        敗したことを示します。
ERROR_SET_ATTRIBUTES    (0x8035)
                        ファイル処理全般として  SetFileAttributes() API 呼
                        び出しに失敗したことを示します。
ERROR_GET_INFORMATION   (0x8036)
                        ファイルの情報取得しての Myfindfirst()，GetDisk-
                        FreeSpace() API，GetDiskFreeSpaceEx() API，GetFile-
                        Time() API 呼び出しに失敗したことを示します。
ERROR_GET_POINT         (0x8037)
                        ファイル処理全般として，Myftell()，(ポインタ取得の
                        ための)  SetFilePointer() API 等の呼び出しが失敗し
                        たことを示します。
ERROR_SET_POINT         (0x8038)
                        ファイル処理全般として Myrewind()， MySetFile-
                        Pointer2()，Myfseek() 等の呼び出しが失敗したことを
                        示します。
ERROR_CONVERT_TIME      (0x8039)
                        FILETIME，time_t 間，FILETIME，SYSTEMTIME 間，
                        ftime， FILETIME 間，(FILETIME での) ローカル，UTC
                        間，等で，タイムスタンプの変換が失敗したことを示し
                        ます。
ERROR_GET_TIME          (0x803A)
                        各種ファイルのタイムスタンプ取得に失敗したことを示
                        します。
ERROR_SET_TIME          (0x803B)
                        各種ファイルのタイムスタンプ設定に失敗したことを示
                        します。
ERROR_CLOSE_FILE        (0x803C)
                        開いたファイルを閉じることができなかったことを示し
                        ます。
ERROR_HEAP_MEMORY       (0x803D)
                        ERROR_MORE_HEAP_MEMORY とは異なり，(最終的にランタ
                        イムの malloc() で) 取得したヒープメモリの解放が正
                        常に行えなかったことを示します。
ERROR_HANDLE            (0x803E)
                        (UNARJ32.DLL が内部で呼び出している) FindClose()
                        API の呼び出しに失敗したことを示します。
ERROR_TIME_STAMP_RANGE  (0x803F)
                        通常  UNARJ32.DLL はファイルシステムの仕様やシステ
                        ムの制限等により正常に扱えない恐れのあるタイムスタ
                        ンプが渡された場合には，正常に扱えるデータに補正す
                        るようになっていますが，"-htf0" が指定された場合に
                        は，補正を行わずエラーを返すようになります。UNARJ-
                        32.DLL  が安全であると認識している範囲外のタイムス
                        タンプが扱われたことを示します。
                        補正関連については，COMMAND.TXT の "-htf" スイッチ
                        の項を参照してください。
ERROR_MAKE_ARCHIVE      (0x8040)
                        書庫操作後の正常性チェックに通らなかったことを示し
                        ますが，UNARJ32.DLL が展開専用であることから，この
                        エラーが返されることはありません。
ERROR_NOT_CONFIRM_NAME  (0x8041)
                        拡張ヘッダ長から逆算されるパス名  (及びファイル名)
                        の長さと，実際に記録されている名前の長さとが一致し
                        ないことを示します。UNLHA32.DLL 用のエラーコードで
                        あるため，UNARJ32.DLL では使われていません。
ERROR_UNEXPECTED_EOF    (0x8042)
                        ヘッダ長で指定されているサイズのヘッダ読み込みに失
                        敗したことを示します。UNLHA32.DLL 用のエラーコード
                        であるため，UNARJ32.DLL では使われていません。
ERROR_INVALID_END_MARK  (0x8043)
                        不正な終了情報が書庫のエンドマークとして記録されて
                        いることを示します。UNLHA32.DLL 用のエラーコードで
                        あるため，UNARJ32.DLL では使われていません。
ERROR_INVOLVED_LZH      (0x8044)
                        ZIP 書庫など， 他の書庫に格納されている LZH 書庫で
                        あると DLL が判断したことを示します。  UNLHA32.DLL
                        用のエラーコードであるため，UNARJ32.DLL では使われ
                        ていません。
ERROR_NO_END_MARK       (0x8045)
                        必要な終了情報が書庫のエンドマークとして記録されて
                        いないことを示します。UNLHA32.DLL 用のエラーコード
                        であるため，UNARJ32.DLL では使われていません。
ERROR_HDR_INVALID_SIZE  (0x8046)
                        該当ヘッダのサイズとして不正な値がヘッダサイズとし
                        てヘッダに記録されていることを示します。  UNLHA32.
                        DLL 用のエラーコードであるため，UNARJ32.DLL では使
                        われていません。
ERROR_UNKNOWN_LEVEL     (0x8047)
                        UNLHA32.DLL で扱えないヘッダ形式であることを示しま
                        す。UNLHA32.DLL 用のエラーコードであるため，UNARJ-
                        32.DLL では使われていません。
ERROR_BROKEN_DATA       (0x8048)
                        CHECKARCHIVE_FULLCRC を指定してUnarjCheckArchive()
                        によるチェックを行った場合に，格納ファイルが壊れて
                        いたことを示します。
                        通常，このエラーが返されることはありません。
ERROR_INVALID_PATH      (0x8049)
                        基準ディレクトリやルートディレクトリを越えたものな
                        ど危険性のあるパスが指定されたことを示します。
ERROR_TOO_BIG           (0x804A)
                        ファイルの大きさがファイルシステムで扱えるサイズを
                        超えていることを示します。UNLHA32.DLL 用のエラーコー
                        ドであるため，UNARJ32.DLL では使われていません。
ERROR_EXECUTABLE_FILE   (0x804B)
                        "-hzz"  スイッチで抑制指定を行った拡張子をもつファ
                        イルの展開を行おうとしたことを示します。
ERROR_INVALID_VALUE     (0x804C)
                        API に渡したパラメータの整合性がとれていないことを
                        示します。現在の版では，API に渡されたバッファにつ
                        いて，当該バッファのサイズとして渡されたサイズの確
                        保が行われていない (とシステムが判断した) 場合と，
                        システムが  ERROR_INVALID_PARAMETER を返してきた場
                        合 (大抵は NULL ポインタ) に返されます。


-----------------------------------------------------------------------
%6. その他
-----------------------------------------------------------------------

  a : Unicode 対応化について

  　Ver 0.99 以降では，UNARJ32.DLL についても UNLHA32.DLL と同様に Unicode
  版 API が実装されています。 が，UNLHA32.DLL が Unicode  ベースでの動作と
  なっているのに対して，UNARJ32.DLL は ANSI ベースでの動作となっています。
  従って，当該コードページで表現できない文字をもつ名前のファイルについては
  扱うことが出来ません。 Unicode 版 API は，実際には即座に ANSI への必要な
  変換を行った上で ANSI 版 API を呼び出す構造となっています。 Unicode ベー
  スとしなかったのは単純な理由で， ARJ 書庫が Unicode に対応していず，独自
  仕様の追加を行える状況でもなかったからです。『Unicode でしか表現できない
  名前のパスを対応アプリから渡される』ことは殆どないであろう…という推測も
  働いていますが， 要望が相当多いようであれば Unicode ベースへの変更を行う
  必要も出てくるでしょう。

  　Unicode 版 API の追加される Ver 0.99 以降においては， インクルードヘッ
  ダファイル (UNARJ32.H) が変更され，Unarj() といった既存の API については，
  UNICODE マクロの定義により ANSI 版 (UnarjA)， Unicode 版 (UnarjW) の，ど
  ちらの定義ともなり得ます。 Unicode 版アプリの作成時において UNARJ32.H を
  使用する場合には注意してください。 これに対して，GetProcAddress() API に
  よりアドレスを取得する場合には，変更の必要がありません。Unarj() は，従来
  どおり ANSI 系 API の呼び出しとなります。

  　Unicode 版 API で扱われる文字コードは全て UTF-16LE (リトルエンディアン
  の UTF-16) です。 BOM (Byte Order Mark) は認識しませんので，埋め込まない
  ようにしてください。バッファへの出力等の際にも埋め込みは行われません。

  b : メモリマップトファイルについて

  　Ver 0.60 以降では， ファイルの入出力にメモリマップトファイルを使用して
  います。 Win 2k 以降の NT 系 OS 環境で，対象がローカルの固定ディスクの場
  合にメモリマップトファイルの有効化を図り，有効化できなかった場合は Read-
  File()，WriteFile() API を使用した通常の方法によるアクセスを行いますが，
  入出力ルーチンが異なっていることから，エラーが発生した場合のログ出力等が
  従来と異なっている場合があることに注意して下さい。
  　Win9X 系でもメモリマップトファイルの利用は可能なのですが，メモリ環境の
  貧弱であることが多いため，採用していません。

  　読込オープンの際にはファイルのサイズでマッピングを行っていますが，書込
  (を伴う) オープンの際には， 8MB 境界でのマッピングを行い，以降 (必要あれ
  ば) 8MB 毎にサイズを増加しながらマッピングし直しています。そのため，ディ
  スクの空き容量が少ない場合 (時には連続空き容量が少ない場合を含む) は，UN-
  ARJ32.DLL  による空き容量チェックには通っていても， ディスク容量不足でエ
  ラーとなる場合があります。
  　これに伴い，MapViewOfFile() API で確保するビューも，8MB と，かなり小さ
  いサイズとなっていますが，あまり大きな速度低下は招いていないようです。

  　一旦 MapViewOfFile() API  で確保したビューについては，通常，システムに
  より適当なタイミングでフラッシュが行われることになるわけですが，書込オー
  プンの際は，基本的にファイルハンドル自体がクローズされるまでフラッシュさ
  れずに確保される傾向にあり，しかも，実際にはクローズ後も少量ずつのフラッ
  シュに留まります。そのため，巨大なファイルを扱った場合には，実メモリを使
  い切ってしまい大容量の連続スワップによるハングアップが起こっていました
  (何ら問題が起きない環境も存在します)。

  　このような状況を回避するために，UNARJ32.DLL は，256MB 毎に FlushViewOf-
  File() API を使用して強制的にフラッシュを行っています。 フラッシュが行わ
  れる際には (大抵は 256MB の書込が発生することから)，一瞬固まったかのよう
  な状況に陥りますが，異常ではありませんので，ご注意下さい。
  　256MB 境界に満たない端数 (余り) の部分に関しては，強制的なフラッシュを
  行わずシステムに任せています。

  c : UnarjOpenArchive() 等のハンドルについて

  　UnarjOpenArchive  などで返されるハンドルの指すグローバルメモリは GMEM_
  MOVEABLE となっていますので， 構造体へのポインタとして利用する場合には，
  参照時にロックが必要となる場合があります。

=======================================================================
