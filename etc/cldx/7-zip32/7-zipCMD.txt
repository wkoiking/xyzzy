================================================================================
                7-zip32.dll ver 9.22.00.01 コマンド説明ファイル
================================================================================
                                                            秋田 稔 (2014/06/25)

--------------------------------------------------------------------------------
0. はじめに
1. コマンドラインの様式
2. 命令の詳細
3. スイッチオプションの詳細
--------------------------------------------------------------------------------

0. はじめに
===========

  7-zip32.dll では以下の操作をすることが可能です。

  (1) 独自形式である 7z 形式の書庫の作成と解凍。
  (2) 7z 形式でのソリッド書庫を作成。
  (3) 他の zip 互換プログラムより 2 - 10% 圧縮率の高い zip 書庫を作成。
  (4) 7z 及び zip 書庫の格納ファイルの情報取得。
  (5) 書庫へファイルの追加。
  (6) 書庫からファイルを削除。
  (7) 書庫の更新。
  (8) 書庫の正当性診断。
  (9) 強力な AES-256 暗号化。


1. コマンドラインの様式
=======================

  <command> [<switch>...] <archive_name> [<base_dir>\] [<arguments>...]

    command      : コマンド。
    switch       : スイッチ。(<'/' | '-'><switch_characters>[<option>])
    archive_name : 基本となる書庫名。
    base_dir     : 基準ディレクトリ。\ で終わる必要があります。
    arguments    : switch、wildcard、filename、list_file。

    wildcard     : ワイルドカード。
    filename     : ファイル名。
    list_file    : ファイルのリストを書いたファイル。(@{filename})

    [ ] は省略可能。
    ... は複数指定可能。

    command は最初に記述する必要が有ります。
    archive_name は command の後に来る最初のファイル名になります。
    スイッチ及びファイル名は任意の順番で構いません。

    スペースを含むファイル名は以下の様に""で全体を囲ってください。
    例) "Dir\Program files\*"
    ※ 7-Zipでサポートされている以下の形式は 7-zip32.dll では
       サポートしません。
    例) Dir\"Program files"\*

    スイッチオプションはコマンドラインの長さを節約する為に組み合わせる
    事が出来ます。しかし、幾つかのオプションは文字列引数を取るので
    結合された引数のトークン文字列の最後がオプションになります。
    理由は 7-zip32.dll がオプションの引数として引数トークンの残りを
    認識してしまうからです。

    7-zip32.dll で使用するワイルドカード選択は Windows95 と似ています。
    ・'*' は任意の文字の連続を意味します。
    ・'?' は任意の文字を意味します。

    7-zip32.dll は システムワイルドカードマスク分析をしておらず、
    *.* が全てのファイルを意味すると言う古い規則に従いません。
    7-zip32.dll は *.* を全ての拡張子を持ったファイルとして扱います。
    全てのファイルを処理するには * を使用しなければなりません

    例)
　　┌―――┬―――――――――――――――――――――――――┐
    │*.txt │拡張子が ".txt" の全てのファイルを意味します。    │
    ├―――┼―――――――――――――――――――――――――┤
    │?a* 　│１番目の文字が 'a' の全てのファイルを意味します。 │
    ├―――┼―――――――――――――――――――――――――┤
    │*1* 　│'1' を含む全てのファイルを意味します。            │
    ├―――┼―――――――――――――――――――――――――┤
    │*.*.* │'.' を２つ持つ全てのファイルを意味します。        │
    └―――┴―――――――――――――――――――――――――┘

    もしコマンドラインでファイル名とワイルドカードが全く使用されない
    場合は、デフォルトのワイルドカードの "*" が使用されます。

  リストファイル

    特別なリストファイル（ファイルのリストを含んでいるファイル）に
    １つ以上のファイル名かワイルドカードを指定することができます。
    リストファイルのファイル名は、スペース、タブ、改行で区切らなければ
    なりません。
    スペースを含むワイルドカード及びファイル名は "" で囲んでください。

　　リストファイルの文字コードは -scs スイッチで指定できます。
　　デフォルトは WIN ですが Unicode モードの時は UTF-8 になります。
　　# Unicode モード : SevenZipSetUnicodeMode で TRUE を指定した時。

    複数のリストファイルをサポートします。

    例えば "list.txt" の内容が以下の通りなら、

      "My programs\*.cpp"
      Src\*.cpp

    このコマンドで

      a -tzip archive.zip @listfile.txt

    archive.zip に "My programs" と"src" 内の全ての "*.cpp" ファイルが
    追加されます。


2. 命令の詳細
=============

  a : 追加
  ￣￣￣￣
  　　書庫にファイルを追加します。
      7z 書庫に追加する場合は -ms=off スイッチを付けて下さい。
      ソリッド書庫にファイルを追加する事は出来ません。

    例: a -tzip archive.zip subdir\*
      
      ディレクトリ subdir 中の全てのファイルを
      archive.zip に追加します。

    例: a -t7z archive.7z subdir\* -ms=off

      ディレクトリ subdir 中の全てのファイルを
      archive.7z に追加します。

    このコマンドと共に使用できるスイッチ。

      -hide, -i, -m, -p, -r, -scc, -scs, -sfx, -ssw, -t, -u, -v, -w, -x

    参照

      コマンド: d, u
      スイッチ: -u

  d : 削除
  ￣￣￣￣
      書庫からファイルを削除します。
      7z 書庫から削除する場合は -ms=off スイッチを付けて下さい。
      ソリッド書庫からファイルを削除する事は出来ません。

    例: d archive.zip *.bak

      archive.zip から全ての *.bak ファイルを削除します。

    例: d archive.7z *.txt -ms=off

      archive.7z から全ての *.txt ファイルを削除します。

    このコマンドと共に使用できるスイッチ。

      -hide, -i, -m, -p, -r, -scc, -u, -w, -x

    参照

      コマンド: a, u
      スイッチ: -u

  e : 解凍
  ￣￣￣￣
      書庫からファイルをカレントディレクトリ、
      又は指定のディレクトリに解凍します。
      解凍先ディレクトリを指定するには -o スイッチで指定してください。

      このコマンドは一つのディレクトリにファイルを全て解凍します。
      ディレクトリ付きで解凍する場合は x コマンドを使用してください。

      -y スイッチを指定しない限り既存のファイルを上書きする前に
      上書確認ダイアログを表示します。

    例: e archive.zip

      archive.zip の全てのファイルをカレントディレクトリに解凍します。

    このコマンドと共に使用できるスイッチ。

      -ai, -an, -ao, -ax, -hide, -i, -o, -p, -r, -scc, -t, -x, -y

    参照

      コマンド: x

  l : リスト
  ￣￣￣￣￣
      書庫の内容を取得します。
      取得した内容は _szOutput に出力されます。

    例: l archive.zip

      archive.zip の内容を _szOutput に出力されます。

    このコマンドと共に使用できるスイッチ。

      -ai, -an, -ax, -i, -p, -r, -scc, -slt, -t, -x

  t : 正当性診断
  ￣￣￣￣￣￣￣
      書庫の正当性を診断します。

    例: t archive.zip *.doc

      archive.zip 内の全ての *.doc ファイルの正当性を診断します。

    このコマンドと共に使用できるスイッチ。

      -ai, -an, -ax, -i, -p, -r, -scc, -x

  u : 更新
  ￣￣￣￣
      書庫内の古いファイルを更新し、無い場合はファイルを追加します。

      注：.7z ソリッド書庫の更新は幾つか再圧縮が必要になるので時間が掛ります。

    例: u archive.zip *.doc

      archive.zip 内の全ての *.doc ファイルを更新します。

    このコマンドと共に使用できるスイッチ。

      -hide, -i, -m, -p, -r, -scc, -scs, -sfx, -ssw, -t, -u, -w, -x

    参照

      コマンド: a, d
      スイッチ: -u

  x : フルパスで解凍
  ￣￣￣￣￣￣￣￣￣
      書庫からファイルをカレントディレクトリ、
      又は指定のディレクトリにディレクトリ付きで解凍します。

    例: x archive.zip -oc:\soft *.cpp -r

      archive.zip 内の *.cpp ファイル全てを
      c:\soft ディレクトリに解凍します。

    このコマンドと共に使用できるスイッチ。

      -ai, -an, -ao, -ax, -hide, -i, -o, -p, -r, -scc, -t, -x, -y

    参照

      コマンド: e



3. スイッチオプションの詳細
===========================

  -- : 構文解析停止
  ￣￣￣￣￣￣￣￣￣
      "--" 以降のスイッチの構文解析を無効にします。
      これを使うと "-" で始まるファイル名を使用する事が出来ます。

    構文: --

    例: t -- -ArchiveName.7z

      -ArchiveName.7z 書庫のテストをします。

  -ai : 追加する書庫を指定
  ￣￣￣￣￣￣￣￣￣￣￣￣
      処理に含ませる書庫のファイル名とワイルドカードを指定します。
　　　このスイッチを複数使う事がサポートされています。

    構文: -ai[<recurse_type>]<file_ref>

            <recurse_type> ::= r[- | 0]
            <file_ref>     ::= @{listfile} | !{wildcard}

    パラメータ

      <recurse_type>

        このスイッチでどのようにファイル名とワイルドカードを扱うか指定します。
        もしこのオプションを指定しなければ再起は行われません。
        詳細は -r スイッチの仕様を参照してください。

        <recurse_type> ::= r[- | 0]

      <file_ref>

        ファイル名及びワイルドカードか処理するファイルを指定した
        リストファイルを指定します。

        <file_ref> ::= @{listfile} | !{wildcard}

　  　  ┌―――――┬――――――――――――――――――――――┐
        │オプション│説明                                        │
        ├―――――┼――――――――――――――――――――――┤
        │{listfile}│リストファイルの名前を指定します。          │
        ├―――――┼――――――――――――――――――――――┤
        │{wildcard}│ワイルドカードまたはファイル名を指定します。│
        └―――――┴――――――――――――――――――――――┘

    例: t -an -air!*.7z

      カレントディレクトリとそのサブディレクトリの全ての 7z 書庫をテストします。

    このスイッチと共に使用できるコマンド。

      a, d, e, l, t, u, x

    参照

      スイッチ: -an, -ax

  -an : 書庫名の分析をしない
  ￣￣￣￣￣￣￣￣￣￣￣￣￣
      コマンドラインの <archive_name> フィールドの分析を行いません。
      このスイッチは -ai スイッチと共に使用しなければなりません。
      もし書庫のファイルリストを使う場合は -ai スイッチで指定するので
      コマンドラインの <archive_name> フィールドの分析を行わないように
      する必要があります。

    構文: -an

    例: t -an -ai!*.7z -ax!a*.7z

      全ての *.7z 書庫から a*.7z 書庫を除きテストを行います。

    このスイッチと共に使用できるコマンド。

      e, l, t, x

    参照

      スイッチ: -ai, -ax

  -ao : 上書きモード
  ￣￣￣￣￣￣￣￣￣
      解凍時、既にファイルが存在した時の動作を設定します。

    構文: -ao[a | s | t | u ]

　　┌――――┬――――――――――――――――――――――┐
    │スイッチ│説明                                        │
    ├――――┼――――――――――――――――――――――┤
    │-aoa　　│全てのファイルを確認しないで上書きします。  │
    ├――――┼――――――――――――――――――――――┤
    │-aos　　│既存のファイルはスキップします。            │
    ├――――┼――――――――――――――――――――――┤
    │-aou　　│解凍するファイルを自動的にリネームします。  │
    │   　　 │例えば name.txt は name_1.txt になります。  │
    ├――――┼――――――――――――――――――――――┤
    │-aot　　│既存のファイルを自動的にリネームします。    │
    │   　　 │例えば name.txt は name_1.txt になります。  │
    └――――┴――――――――――――――――――――――┘

    例: x test.zip -aoa

      test.zip から全てのファイルをカレントディレクトリに解凍し
      既存のファイルが有った場合は全て上書きして保存します。

    このスイッチと共に使用できるコマンド。

      e, x

    参照

      スイッチ: -y

  -ax : 除外する書庫を指定
  ￣￣￣￣￣￣￣￣￣￣￣￣
      処理から除外する書庫を指定します。
　　　このスイッチを複数使う事がサポートされています。

    構文: -ax[<recurse_type>]<file_ref>

            <recurse_type> ::= r[- | 0]
            <file_ref>     ::= @{listfile} | !{wildcard}

      オプションパラメータの説明は -ai スイッチの情報を参照してください。

    例: t -an -ai!*.7z -ax!a*.7z

      全ての *.7z 書庫から a*.7z 書庫を除きテストを行います。

    このスイッチと共に使用できるコマンド。

      e, l, t, x

    参照

      スイッチ: -ai, -an

  -hide : 処理状況ダイアログ表示の抑止
  ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣
      圧縮や解凍時などに表示される処理状況ダイアログを非表示にします。

    構文: -hide

      7-Zipにこのスイッチはありません。独自の仕様です。
      非表示モードでもファイルの上書きの問い合わせや
      パスワードの問い合わせの時はダイアログを表示します。
      これらを抑止するには -ao, -p, -y, スイッチを併用します。

    例: x archive.zip -hide -aoa -pabcde *.cpp

      archive.zip 内の *.cpp ファイル全てを
      パスワード abcd を使用し解凍します。
      この時、解凍状況ダイアログは表示されず
      解凍先に同名のファイルが存在しても確認無しで上書きします。

    このスイッチと共に使用できるコマンド。

      a, d, e, t, u, x

    参照

      スイッチ: -ao, -p, -y

  -i : 追加ファイル指定 
  ￣￣￣￣￣￣￣￣￣￣￣
      追加で含めるファイル名及びワイルドカードを指定します。
　　　このスイッチを複数使う事がサポートされています。

    構文: -i[<recurse_type>]<file_ref>

            <recurse_type> ::= r[- | 0]
            <file_ref>     ::= @{listfile} | !{wildcard}

    パラメータ

      <recurse_type>

        このスイッチでどのようにファイル名とワイルドカードを扱うか指定します。
        もしこのオプションを指定しなければ、その時の -r スイッチの設定が
        割り当てられます。
        詳細は -r スイッチの仕様を参照してください。

      <file_ref>
      
        指定したワイルドカードとファイルか
        処理するファイルのリストを指定します。

　  　┌―――――┬――――――――――――――――――――――┐
      │オプション│説明                                        │
      ├―――――┼――――――――――――――――――――――┤
      │{listfile}│リストファイルの名前を指定します。          │
      ├―――――┼――――――――――――――――――――――┤
      │{wildcard}│ワイルドカードまたはファイル名を指定します。│
      └―――――┴――――――――――――――――――――――┘

    例: a -tzip src.zip *.txt -ir!DIR1\*.cpp

      カレントディレクトリの全ての *.txt ファイルと
      DIR1 ディレクトリとそのサブディレクトリ内の
      全ての *.cpp ファイルを src.zip に追加します。

    このスイッチと共に使用できるコマンド。

      a, d, e, l, t, u, x

    参照

      スイッチ: -r, -x

  -m : 圧縮方式の設定
  ￣￣￣￣￣￣￣￣￣￣
      圧縮方法の設定をします。

    構文: -m<method_parameters>

        このスイッチの書式は書庫の形式に依存します。

      Zip
　  　┌――――――――――――┬―――――┬―――――――――――――――┐
      │パラメータ              │   標準   │説明                          │
      ├――――――――――――┼―――――┼―――――――――――――――┤
      │x=[0|1|3|5|7|9]         │     5    │圧縮のレベルを設定します。    │
      ├――――――――――――┼―――――┼―――――――――――――――┤
      │m={MethodID}            │ Deflate  │方式を設定:Copy,Deflate,      │
      │                        │          │Deflate64,BZip2,LZMA,PPMd     │
      ├――――――――――――┼―――――┼―――――――――――――――┤
      │fb={NumFastBytes}       │    32    │Deflateエンコーダに優先する   │
      │                        │          │メモリのバイト数を設定します。│
      ├――――――――――――┼―――――┼―――――――――――――――┤
      │pass={NumPasses}        │     1    │Deflateエンコーダの           │
      │                        │          │パスの数値を設定します。      │
      ├――――――――――――┼―――――┼―――――――――――――――┤
      │d={Size}[b|k|m]         │  900000  │BZip用の辞書サイズを設定。    │
      ├――――――――――――┼―――――┼―――――――――――――――┤
      │mem={Size}[b|k|m]       │　  24    │PPMd用のメモリサイズを設定。  │
      ├――――――――――――┼―――――┼―――――――――――――――┤
      │o={Size}     　         │　   8    │PPMd用のモデルオーダーを設定。│
      ├――――――――――――┼―――――┼―――――――――――――――┤
      │mt=[off|on|{N}]       　│    on    │マルチスレッドモードを設定。  │
      ├――――――――――――┼―――――┼―――――――――――――――┤
      │em={EncryptionMethodID} │ZipCrypto │暗号化方式を設定:ZipCrypto,   │
      │                        │          │AES128, AES192, AES256        │
      ├――――――――――――┼―――――┼―――――――――――――――┤
      │                      　│    on    │ファイルの NTFS タイムスタンプ│
      │tc=[off|on]             │          │を記憶します。                │
      │                        │          │更新日時、作成日時、参照日時  │
      ├――――――――――――┼―――――┼―――――――――――――――┤
      │cl=[off|on]           　│   off    │ファイル名には常にローカル    │
      │                      　│          │コードページを使用します。    │
      ├――――――――――――┼―――――┼―――――――――――――――┤
      │cu=[off|on]           　│   off    │非ASCII文字を含むファイル名に │
      │                      　│          │UTF-8を使用します。           │
      └――――――――――――┴―――――┴―――――――――――――――┘
　　　デフォルトでは（cl と cu スイッチが指定されていない場合）、ローカル
　　　コードページでサポートされて無い文字が含まれる場合にそのファイルだけ
　　　UTF-8を使用します。

      x=[0|1|3|5|7|9]

        圧縮のレベルを設定。
        x=0 の時はコピーモード（無圧縮）

        Deflate / Deflate64 設定
　  　  ┌―――┬――――――┬―――――┬――――――┐
        │レベル│NumFastBytes│NumPasses │説明        ｜
        ├―――┼――――――┼―――――┼――――――┤
        │  1   │            │          │Fastest     ｜
        ├―――┤            │          ├――――――┤
        │  3   │     32     │     1    │Fast        ｜
        ├―――┤            │          ├――――――┤
        │  5   │            │          │Normal      ｜
        ├―――┼――――――┼―――――┼――――――┤
        │  7   │     64     │     3    │Maximum     ｜
        ├―――┼――――――┼―――――┼――――――┤
        │  9   │    128     │    10    │Ultra       ｜
        └―――┴――――――┴―――――┴――――――┘

        Deflate 方式の x=1 と x=2 は圧縮を高速モードにします。

        BZip2 設定
　  　  ┌―――┬―――――┬―――――┬――――――┐
        │レベル│Dictionary│NumPasses │説明        ｜
        ├―――┼―――――┼―――――┼――――――┤
        │  1   │  100000  │          │Fastest     ｜
        ├―――┼―――――┤          ├――――――┤
        │  3   │  500000  │     1    │Fast        ｜
        ├―――┼―――――┤          ├――――――┤
        │  5   │          │          │Normal      ｜
        ├―――┤          ├―――――┼――――――┤
        │  7   │  900000  │     2    │Maximum     ｜
        ├―――┤          ├―――――┼――――――┤
        │  9   │          │     7    │Ultra       ｜
        └―――┴―――――┴―――――┴――――――┘

      fb={NumFastBytes}

        Deflate/Deflate64 エンコーダの FastBytes 値を設定します。
        3 〜 258(Deflate64 は 257) の範囲が使用できます。
        デフォルト値は Normal は 32 、Maximum は 64 になります。
        通常、大きい値を設定すると圧縮率は若干高くなり圧縮速度は遅くなります。
        連続したデータが多い場合は大きくすると圧縮率が劇的に良くなります。

      pass={NumPasses}

        Deflate エンコーダー用の passes 値を設定します。
        Deflate は 1 〜 15 BZip2 は 1 〜 10 の範囲で使用できます。
        通常、大きい値を設定すると圧縮率は若干高くなり
        圧縮速度は遅くなります。

      d={Size}[b|k|m]

        BZip2 用の辞書サイズを指定します。
        バイトかメガバイトかキロバイトでサイズを指定します。
        辞書サイズの最大値は 900000b です。
        もし [b|k|m] から何も指定しなければ、
        辞書サイズは 2^Size バイトで算出されます。

      mem={Size}[b|k|m]

        PPMd の為に使われるメモリのサイズを設定します。
        バイトかキロバイトかメガバイトを設定しなければなりません。
        最大値は 256MB=2^28 バイトで、デフォルト値は 24(16MB) です。
        もし [b|k|m] から何も指定しなければ、
        メモリサイズは 2^Size バイトで算出されます。
        PPMd は圧縮時と同じ量のメモリを解凍時に使用します。

      o={Size}

        PPMd の為のモデルオーダーを設定します。
        2 〜 16 の範囲が使用できます。
        デフォルト値は 8 です。

      mt=[off|on|{N}] 

        マルチスレッドモードを設定します。
        もし、マルチプロセッサかマルチコアシステムであるならば
        このスイッチで圧縮速度を速める事が出来ます。
        このオプションは圧縮（どのような方式でも）と
        BZip2 ストリームでの解凍の時だけ作用します。
        マルチスレッドモードのそれぞれのスレッドは、バッファリングに
        32MB の RAM を使用します。
        {N}を指定すると、N スレッド使おうとします。

      7z
　  　┌――――――――――――┬――┬――――――――――――――――――┐
      │パラメータ              │標準│説明                                │
      ├――――――――――――┼――┼――――――――――――――――――┤
      │x=[0|1|3|5|7|9]         │  5 │圧縮レベルの設定。                  │
      ├――――――――――――┼――┼――――――――――――――――――┤
      │s=[off|on|[e][{N}f]     │ on │ソリッドモードの設定。              │
      │  [{N}b|{N}k|{N}m|{N}g] │    │                                    │
      ├――――――――――――┼――┼――――――――――――――――――┤
      │                        │    │実行可能ファイル圧縮フィルタの設定。│
      │f=[off|on|FilterID]     │ on │FilterID: Delta:{N}, BCJ, BCJ2, ARM,│
      │                        │    │          ARMT, IA64, PPC, SPARC。  │
      ├――――――――――――┼――┼――――――――――――――――――┤
      │hc=[off|on]             │ on │書庫のヘッダ圧縮の設定。            │
      ├――――――――――――┼――┼――――――――――――――――――┤
      │he=[off|on]             │ off│書庫のヘッダ暗号化の設定。          │
      ├――――――――――――┼――┼――――――――――――――――――┤
      │b{C1}[s{S1}]:{C2}[s{S2}]│    │コーダの組み合わせを設定。          │
      ├――――――――――――┼――┼――――――――――――――――――┤
      │{N}={MethodID}[:param1] │LZMA│方式の設定。LZMA, LZMA2, PPMd, BZip2│
      │    [:param2][..]       │    │Deflate, BCJ, Delta, BCJ2, Copy。   │
      ├――――――――――――┼――┼――――――――――――――――――┤
      │mt=[off|on|{N}]         │ on │マルチスレッドモードの設定。        │
      ├――――――――――――┼――┼――――――――――――――――――┤
      │tm=[off|on]             │ on │ファイル更新日時格納の格納。        │
      ├――――――――――――┼――┼――――――――――――――――――┤
      │tc=[off|on]             │ off│ファイル作成日時格納の格納。        │
      ├――――――――――――┼――┼――――――――――――――――――┤
      │ta=[off|on]             │ off│ファイルアクセス日時格納の格納。    │
      └――――――――――――┴――┴――――――――――――――――――┘

      x=[0|1|3|5|7|9]

        圧縮レベルの設定。
　  　  ┌―――┬――┬――┬―――┬―――┬――――┬――――――┐
        │レベル│方式│辞書│Fast  │Match │フィルタ│説明        │
        │      │    │    │Bytes │Finder│        │            │
        ├―――┼――┼――┼―――┼―――┼――――┼――――――┤
        │   0  │Copy│    │      │      │        │無圧縮      │
        ├―――┼――┼――┼―――┼―――┼――――┼――――――┤
        │   1  │LZMA│64KB│  32  │  HC4 │  BCJ   │最速圧縮    │
        ├―――┼――┼――┼―――┼―――┼――――┼――――――┤
        │   3  │LZMA│ 1MB│  32  │  HC4 │  BCJ   │高速圧縮    │
        ├―――┼――┼――┼―――┼―――┼――――┼――――――┤
        │   5  │LZMA│16MB│  32  │  BT4 │  BCJ   │標準圧縮    │
        ├―――┼――┼――┼―――┼―――┼――――┼――――――┤
        │   7  │LZMA│32MB│  64  │  BT4 │  BCJ   │最高圧縮    │
        ├―――┼――┼――┼―――┼―――┼――――┼――――――┤
        │   9  │LZMA│64MB│  64  │  BT4 │  BCJ2  │超高圧縮    │
        └―――┴――┴――┴―――┴―――┴――――┴――――――┘
        注： "x" は "x=9" として働きます。

      s=[off|on|[e][{N}f][{N}b|{N}k|{N}m|{N}g] 

        ソリッドモードの設定。デフォルトは s=on です。
        ソリッドモードではファイルはグループ分けされます。
        通常、ソリッドモードで圧縮すると圧縮率は良くなります。
　  　  ┌―――――┬―――――――――――――――――――――――┐
        │e         │拡張子毎に新しくそれぞれに分けられた          ｜
        │          │ソリッドブロックを使用します。                │
        ├―――――┼―――――――――――――――――――――――┤
        │{N}f      │一つのソリッドブロックにおけるファイル数の    │
        │          │制限を設定します。                            │
        ├―――――┼―――――――――――――――――――――――┤
        │{N}b|{N}k|│ソリッドブロックにおける全体のサイズの        │
        │{N}m|{N}g │制限をバイトで設定します。                    │
        └―――――┴―――――――――――――――――――――――┘

        デフォルトのブロックサイズは制限があります。
　  　  ┌―――――┬―――――――――――┐
        │圧縮レベル│ソリッドブロックサイズ｜
        ├―――――┼―――――――――――┤
        │無圧縮    │0 B                   │
        ├―――――┼―――――――――――┤
        │最速圧縮  │16 MB                 │
        ├―――――┼―――――――――――┤
        │高速圧縮  │128 MB                │
        ├―――――┼―――――――――――┤
        │標準圧縮  │2 GB                  │
        ├―――――┼―――――――――――┤
        │最高圧縮  │4 GB                  │
        ├―――――┼―――――――――――┤
        │超高圧縮  │4 GB                  │
        └―――――┴―――――――――――┘

        ソリッドブロックサイズの制限は通常圧縮率が減少しますが
        以下の利点があります。
        ・将来書庫が破損した場合、損失が少なくなります。
        ・もし、そのグループが書庫の全てのファイルを含んでいないならば
          ファイル群の（ファイルは一つかもしれない)グループの
          解凍時間を速くします。

        .7z ソリッド書庫の更新は幾つか再圧縮が必要になるので時間が掛ります。

        例：-s=100f10m

            一つのソリッドブロック当たり 100 のファイル & 10MB 制限の
            ソリッドモードを設定します。

      f=[off|on|FilterID]

        圧縮フィルタの有効か無効を設定します。
        デフォルトは f=on です。
        実行可能ファイル（dll, exe, ocx, sfx, sys）だけの時
        超高圧縮モードでは BCJ2 フィルタ、その他のモードでは BCJ
        フィルタが使用されます。
        f=FilterID が指定された場合は全てのファイルに指定されたフィルタを使います。
        FilterIDは以下を指定できます。
        Delta:{N}, BCJ, BCJ2, ARM, ARMT, IA64, PPC, SPARC.

      hc=[off|on]

        書庫のヘッダ圧縮を設定。
        デフォルトは hc=on です。
        ヘッダ圧縮を有効にすると幾つかの書庫ヘッダが
        LZMA方式によって圧縮されます。

      he=[off|on]

        書庫のヘッダ暗号化を設定。
        デフォルトは off です。

      {N}

        方式の順序を設定します。
        また、これはパラメータと方式を結びつけるためにも使用されます。
        数値は 0 から始める必要があります。
        小さい数字を持つ方式から先に使用されます。

      b{C1}[s{S1}]:{C2}[s{S2}]

        エンコーダ C1 の出力ストリーム S1 とエンコーダ C2 の
        入力ストリーム S2 を結び付けます。
        もしストリーム番号が指定されないならば
        0 を持つ番号のストリームが使われるでしょう。

        通常、エンコーダは入力ストリームと出力ストリームを一つづつ持っています。
        7z エンコーダは幾つかの入力と出力ストリームを持つ事が出来ます。

        例えば、BCJ2 エンコーダは一つの入力ストリームと
        四つの出力ストリームを持っています。

      mt=[off|on|{N}]

        マルチスレッドモードを設定します。
        もし、マルチプロセッサかマルチコアシステムであるならば
        このスイッチで圧縮速度を速める事が出来ます。
        マルチスレッドモードは LZMA / LZMA2 圧縮 と BZip2 圧縮 / 解凍だけで
        サポートされています。
        {N} を指定すると、例えば mt=4 では 4 スレッド使おうとします。
        LZMA 圧縮では 2 スレッドだけ使われます。

      {N}={MethodID}[:param1][:param2] ... [:paramN]

        圧縮方式の設定をします。
        複数の方式を使うことが可能です。
        デフォルトは LZMA 方式です。

        パラメータの形式は以下のうちの一つで無ければなりません。

        ・{ParamName}={ParamValue}
        ・{ParamName}{ParamValue}
          もし、{ParamValue}が数値で{ParamName}に数値が含まれない場合。


        サポートする方式
　  　  ┌――――┬――――――――――――――――――――――――┐
        │MethodID│説明                                            │
        ├――――┼――――――――――――――――――――――――┤
        │LZMA    │LZ アルゴリズムに基づくアルゴリズム。           │
        ├――――┼――――――――――――――――――――――――┤
        │LZMA2   │LZMA アルゴリズムに基づくアルゴリズム。         │
        ├――――┼――――――――――――――――――――――――┤
        │PPMd    │Dmitry Shkarin 氏の PPMdH を少し改造したもの。  │
        ├――――┼――――――――――――――――――――――――┤
        │BZip2   │BWT アルゴリズム。                              │
        ├――――┼――――――――――――――――――――――――┤
        │Deflate │LZ + Huffman。                                  │
        ├――――┼――――――――――――――――――――――――┤
        │Copy    │無圧縮。                                        │
        └――――┴――――――――――――――――――――――――┘

        サポートするフィルタ
　  　  ┌――――――┬―――――――――――――――――――――――――┐
        │MethodID    │説明                                              │
        ├――――――┼―――――――――――――――――――――――――┤
        │Delta       │差分符号フィルタ。                                │
        ├――――――┼―――――――――――――――――――――――――┤
        │BCJ         │x86 実行ファイル用フィルタ。                      │
        ├――――――┼―――――――――――――――――――――――――┤
        │BCJ2        │x86 実行ファイル用フィルタ。(version 2)           │
        ├――――――┼―――――――――――――――――――――――――┤
        │ARM         │ARM (little endian) 実行ファイル用フィルタ。      │
        ├――――――┼―――――――――――――――――――――――――┤
        │ARMT        │ARM Thumb (little endian) 実行ファイル用フィルタ。│
        ├――――――┼―――――――――――――――――――――――――┤
        │IA64        │IA-64 実行ファイル用フィルタ。                    │
        ├――――――┼―――――――――――――――――――――――――┤
        │PPC         │PowerPC (big endian) 実行ファイル用フィルタ。     │
        ├――――――┼―――――――――――――――――――――――――┤
        │SPARC       │SPARC 実行ファイル用フィルタ。                    │
        └――――――┴―――――――――――――――――――――――――┘
        ファイルも幾つかのタイプではフィルタにより圧縮率が増加します。
        フィルタは圧縮方式と一緒に使わなければなりません。
        (例えば、BCJ + LZMA)

        LZMA

          LZMA は、Lempel-Ziv アルゴリズムに基づくアルゴリズムです。
          この方式は非常に解凍速度が速いです。
          (圧縮速度に比べ、大体 10 - 20% 速い)
          メモリの要求量は圧縮時と解凍時で異なります。
          (詳細は d={Size}[b|k|m] スイッチを参照してください)

    　  　┌―――――――┬――┬―――――――――――――――――┐
          │パラメータ    │標準│説明                              │
          ├―――――――┼――┼―――――――――――――――――┤
          │a=[0|1]       │  1 │圧縮モードを設定。                │
          ├―――――――┼――┼―――――――――――――――――┤
          │d={Size}      │ 24 ｜辞書サイズを設定。                ｜
          │[b|k|m]       │    │                                  │
          ├―――――――┼――┼―――――――――――――――――┤
          │mf={MF_ID}    │bt4 │マッチファインダを設定。          │
          ├―――――――┼――┼―――――――――――――――――┤
          │fb={N}        ｜ 32 ｜Fast Bytes 値を設定。             ｜
          ├―――――――┼――┼―――――――――――――――――┤
          ｜mc={N}        │ 32 │マッチファインダの周期値を設定。  │
          ├―――――――┼――┼―――――――――――――――――┤
          │lc={N}        │  3 │Literal Context bits 値を設定[0,8]│
          ├―――――――┼――┼―――――――――――――――――┤
          │lp={N}        │  0 │Literal Pos bits 値を設定[0,4]    │
          ├―――――――┼――┼―――――――――――――――――┤
          │pb={N}        │  2 │Pos Bits 値を設定[0,4]            │
          └―――――――┴――┴―――――――――――――――――┘

          a=[0|1]

            圧縮モードを設定します。
            0 = 高速。1 = 標準。デフォルトは 1 です。

          d={Size}[b|k|m]

            LZMA の辞書サイズを設定します。
            バイトかキロバイトかメガバイトでサイズを指定しなければなりません。
            辞書サイズの最大値は 1GB = 2^30 バイトです。
            LZMA のデフォルト値は標準圧縮モードで 24(16MB) 、
            最高圧縮モード (-mx=7) で 25(32MB)、
            超高圧縮モード (-mx=9) で 26(64MB) です。
            もし [b|k|m] から何も指定しなければ、
            辞書サイズは 2^Size バイトで算出されます。
            LZMA 方式の辞書サイズ N で圧縮されたファイルを
            解凍する際には、およそ N バイトのメモリ(RAM)が必要です。

          mf={MF_ID}

            LZMA のマッチファインダーを設定します。
            デフォルトの方法は bt4 です。
            hc* 系アルゴリズムは圧縮率は悪いですが
            速度モード (a=0) と組み合わせると非常に高速です。
            必要なメモリは辞書サイズ (下記の表のパラメータ "d") に
            依存します。

    　    　┌―――┬―――――――┬――――――┬―――――――――――――――┐
            │MF_ID │     辞書     │ 使用メモリ │             説明             │
            ├―――┼―――――――┼―――┬――┼――――――┬――――――――┤
            │  bt2 │              │ 9.5*d│    │            ｜2 バイトハッシュ│
            ├―――┼―――――――┼―――┤    │            ├――――――――┤
            │  bt3 │              │11.5*d│    │            │3 バイトハッシュ│
            ├―――┼―――――――┼―――┤    │二分木      ├――――――――┤
            │      │ 64KB...48MB  │11.5*d│    │            │                ｜
            │  bt4 ├―――――――┼―――┤+4MB│            │                │
            │      │64MB...1024MB │10.5*d│    │            │                │
            ├―――┼―――――――┼―――┤    ├――――――┤4 バイトハッシュ│
            │      │ 64KB...48MB  │ 7.5*d│    │            │                ｜
            │  hc4 ├―――――――┼―――┤    │ハッシュ連鎖│                │
            │      │64MB...1024MB │ 6.5*d│    │            │                │
            └―――┴―――――――┴―――┴――┴――――――┴――――――――┘

            注: OS はシステム用にある程度の物理メモリを必要とします。
                その為、最低 32MB は物理メモリを残すようにして下さい。

          fb={N}

            LZMA の FastBytes 値を設定します。
            5 〜 273 の範囲が使用できます。
            デフォルト値は標準圧縮モードでは 32、
            高圧縮と超圧縮モードでは 64 です。
            通常、大きい値を設定すると圧縮率は若干高くなり
            圧縮速度は遅くなります。

          mc={N}

            マッチファインダーの周期（パス）値を設定します。
            0 〜 1000000000 の範囲が使用できます。
            デフォルト値は BT* マッチファインダーで (16 +。
            number_of_fast_bytes / 2) と HC4 マッチファインダーで
            (8 + number_of_fast_bytes / 4) です。
            もし mc=0 を指定すると LZMA はデフォルト値を使います。
            通常、大きい値を設定すると圧縮率は若干高くなり
            圧縮速度は遅くなります。
            例えば、mf=HC4 で mc=10000 だと mf=BT4 とほとんど同じ
            圧縮率になります。

          lc={N}

            Literal context bits 値を設定します。 
            (定数の前の上位ビット)
            0 〜 8 の範囲が使用できます。
            デフォルト値は 3 です。
            時々大きなファイルでは lc=4 がよい結果を出します。

          lp={N}

            Literal pos bits 値を設定します。
            (定数用の現在位置の下位ビット)
            0 〜 4 の範囲が使用できます。
            デフォルト値は 0 です。
            lp スイッチは 周期の等しい 2^value (lp=value) の時の
            周期的なデータ向けです。
            例えば、32ビット（4バイト）の周期的なデータがならば
            lp=2 を使うとよいでしょう。
            もし lp スイッチを変更するなら lp=0 を設定した方が
            良い場合がよくあります。

          pb={N}

            Pos bits 値を設定します。(現在位置の下位ビット)
            0 〜 4 の範囲が使用できます。
            デフォルト値は 2 です。
            pb スイッチは 2^value(lp=value) の周期に等しい時
            意図的に繰り返されるデータ向けです。

        LZMA2

          LZMA2 は LZMA の修正版です。これには LZMA に勝る以下の利点が有ります。

          ・圧縮される訳がないデータでより良い圧縮率です。
            LZMA2 はその様なブロックのデータを圧縮されない形で保存できます。
            またそれはより速くデータを展開されます。

          ・より良いマルチスレッディングをサポート。
            大きなファイルを圧縮するなら LZMA2 はチャンクに分割し複数の
            スレッドでそれらのチャンクを圧縮する事が出来ます。

    　  　┌――――――――┬―――――┬――――――――――――┐
          │パラメータ      │標準      │説明                    │
          ├――――――――┼―――――┼――――――――――――┤
          │c={Size}[b|k|m] │dictSize*4│チャンクのサイズを設定。│
          └――――――――┴―――――┴――――――――――――┘

          チャンクのサイズを指定しなければ LZMA2 は 辞書サイズ * 4 を設定します。

          LZMA2 は LZMA と同様のパラメータをサポートします。
          ただし、 lp+lc は 4 を超える事は有りません。

          LZMA2 は以下を使用。
          x1 と x3 モードのそれぞれのチャンクに一つのスレッド、
          それに x5 と x7 と x9 のモードのチャンクに二つのスレッド。
          一つのチャンクに必要なスレッドを指定した数だけ使うと設定した場合
          LZMA2 はチャンクにストリームを分割しません。
          そしてスレッドの異なる数の為に異なる圧縮率を得られます。
          1 か 2 のスレッドを使った場合、最高の圧縮率を得られます。

        PPMd

          PPMd は PPM をベースにしたアルゴリズムです。
          このアルゴリズムは、ほぼ Dmitry Shkarin 氏の PPMdH の
          ソースに基づいています。
          PPMd は平文のテキストファイルで非常に高い圧縮率を提供します。
          圧縮速度と解凍速度は同じです。
          圧縮と解凍で必要されるメモリも同じです。

    　    ┌―――――――――┬――┬――――――――――――――――――┐
          │パラメータ        │標準│説明                                │
          ├―――――――――┼――┼――――――――――――――――――┤
          │mem={Size}[b|k|m] │ 24 │PPMd で使用するメモリサイズを設定。 │
          ├―――――――――┼――┼――――――――――――――――――┤
          │o={Size}          │  6 │PPMd でのモデルオーダーを設定。     │
          └―――――――――┴――┴――――――――――――――――――┘

          mem={Size}[b|k|m]

            PPMd の為に使われるメモリのサイズを設定します。
            バイトかキロバイトかメガバイトを設定しなければなりません。
            最大値は 2GB=2^31 バイトで、デフォルト値は 24(16MB) です。
            もし [b|k|m] から何も指定しなければ、
            メモリサイズは 2^Size バイトで算出されます。
            PPMd は圧縮時と同じ量のメモリを解凍時に使用します。

          o={Size}

            PPMd の為のモデルオーダーを設定します。
            2 〜 32 の範囲が使用できます。
            デフォルト値は 6 です。

        BCJ2

          BCJ2 は 32-bit x86 実行可能ファイルに向けた
          Branch コンバータです。（version 2）
          圧縮を更に促進させる為に幾つかの分岐命令を変換します。

          BCJ2 エンコーダは一つの入力ストリームと
          四つの出力ストリームを持っています。

          ・s0: メインストリーム。更に圧縮する必要があります。
          ・s1: 変換した CALL 値の為のストリーム。更に圧縮が必要です。
          ・s2: 変換した JUMP 値の為のストリーム。更に圧縮が必要です。
          ・s3: サービスストリーム。既に圧縮されています。

          もし LZMA が使われたなら、ストリーム s1 と s2 の為の
          辞書サイズは、ストリーム s0 の為の辞書サイズより
          遥かに小さくできます。（ほとんどの場合 512KB で十分です)

        Delta

          差分符号オフセットをバイト数で設定できます。
          例えば 16-bit stereo WAV ファイルを圧縮する場合
          "0=Delta:4" を設定できます。
          標準の差分符号オフセットは 1 です。

    例:
      a -tzip archive.zip *.jpg -m0

        無圧縮で *.jpg ファイルを archive.zip に追加します。

      a -t7z archive.7z *.exe *.dll -m0=BCJ -m1=LZMA:d=21 -ms

        BCJ 変換方式と辞書サイズが 2MB の LZMA 方式使い
        ソリッドモードで archive.7z に *.exe と *.dll を追加します。

      a -t7z archive.7z *.exe *.dll -m0=BCJ2 -m1=LZMA:d23 -m2=LZMA:d19
        -m3=LZMA:d19 -mb0:1 -mb0s1:2 -mb0s2:3

        BCJ2 変換方式を使い archive.7z に *.exe と *.dll を
        辞書サイズが 8MB の LZMA 方式と結び付けた BCJ2 の
        メイン出力ストリーム (s0) と LZMA 方式と結び付けた
        BCJ2 の s1,s2 出力ストリームで追加します。

      a -t7z archive.7z *.txt -m0=PPMd

        PPMd 方式を使って *.txt ファイルを archive.7z に追加します。

    このスイッチと共に使用できるコマンド。

      a, d, u

    参照

      スイッチ: -t

  -o : 出力先ディレクトリの設定
  ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣
      ファイルを解凍する先のディレクトリを設定します。
      このスイッチは解凍コマンドの時だけ使用されます。

    構文: -o{dir_path}

      {dir_path}

        出力ディレクトリのパスを設定します。
        最後は \ で終わる必要はありません。
        {dir_path} に * を指定すると、その * 文字は書庫名に置き換わります。

    例:
      x archive.zip -oc:\Doc

        archive.zip の全てのファイルを c:\Doc ディレクトリに解凍します。

      x *.zip -o*

        全ての *.zip 書庫をそれぞれの書庫名のサブフォルダに解凍します。

    このスイッチと共に使用できるコマンド。

      e, x

  -p : パスワードの設定
  ￣￣￣￣￣￣￣￣￣￣￣
      パスワードを指定します。

    構文: -p{password}

      {password}

        パスワードを指定します。

    例:
      a archive.7z -psecret -mhe *.txt

        archive.7z に *.txt ファイルをパスワード "secret" を使って圧縮します。
        書庫のヘッダを暗号化することで（-mhe スイッチ）、ファイル名も
        暗号化されます。

      x archive.zip -psecret

        archive.zip をパスワード "secret" を使って全て解凍します。

    このスイッチと共に使用できるコマンド。

      a , d, e, t, u, x


  -r : サブディレクトリの再帰的検索
  ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣
      コマンドラインでワイルドカードとファイル名の扱う方法を指定します。

    構文: -r[- | 0]

　　┌――――┬――――――――――――――――――――――――┐
    │スイッチ│説明                                            │
    ├――――┼――――――――――――――――――――――――┤
    │-r　  　│再帰的ディレクトリ検索を有効にします。          │
    ├――――┼――――――――――――――――――――――――┤
    │-r-     │再帰的ディレクトリ検索を無効にします。          │
    │        │このオプションは全てのコマンドのデフォルトです。│
    ├――――┼――――――――――――――――――――――――┤
    │-r0 　　│ワイルドカード名に付いては                      │
    │   　　 │再帰的ディレクトリ検索を有効にします。          │
    └――――┴――――――――――――――――――――――――┘

    例:
      l archive.zip -r- *.doc

        archive.zip 書庫内のルートディレクトリの
        全ての *.doc ファイルのリストを _szOutput に出力します。

      a -tzip archive.zip -r src\*.cpp src\*.h

        src ディレクトリとそのサブディレクトリ内の全ての
        *.cpp と *.h ファイルを archive.zip に追加します。

    このスイッチと共に使用できるコマンド。

      a, d, e, l, t, u, x

    参照

      スイッチ: -i, -x

  -scc : 入出力の文字コードの設定
  ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣
      入出力の文字コードを設定します。

    構文: -scs{UTF-8 | WIN | DOS}

        デフォルトの文字コードは WIN です。

      UTF-8

        Unicode UTF-8 文字コード。

      WIN

        Windows のデフォルトの文字コード。

      DOS

        Windows のデフォルト DOS(OEM) 文字コード。

    例: l archive.7z -sccUTF-8

      archive.7z のファイルリストを UTF-8 エンコードします。

    このスイッチと共に使用できるコマンド。

      a, d, e, l, t, u, x

  -scs : リストファイルの文字コードの設定
  ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣
      リストファイルの文字コードを設定します。

    構文: -scs{UTF-8 | WIN | DOS}

        デフォルトの文字コードは WIN です。
        ただし、 Unicode モード* の場合は UTF-8 になります。
        * Unicode モード:SevenZipSetUnicodeMode で TRUE を指定した時。

      UTF-8

        Unicode UTF-8 文字コード。

      WIN

        Windows のデフォルトの文字コード。

      DOS

        Windows のデフォルト DOS(OEM) 文字コード。

    例: a archive.7z @listfile.txt -scsWIN

      listfile.txt に書かれたリストを圧縮し、そのファイルのリストは
      Windows のデフォルトの文字コードで書かれています。

    このスイッチと共に使用できるコマンド。

      a, u

  -sfx : 自己解凍書庫の作成
  ￣￣￣￣￣￣￣￣￣￣￣￣￣
      自己解凍書庫を作成します。
      SFX モジュールは www.7-zip.org より別途入手する必要が有ります。

    構文: -sfx[{SFX_Module}]

      {SFX_Module}

        書庫と結合される SFX モジュールを指定します。
        SFX は 7-zip32.dll と同じディレクトリに置く必要が有ります。
        {SFX_Module} を指定しなければ内蔵された SFX を使用します。

　  　  ┌―――――┬―――――――――――――――――――――┐
        │SFX_Module│説明                                      │
        ├―――――┼―――――――――――――――――――――┤
        │7z.sfx    │Windows バージョン。                      │
        ├―――――┼―――――――――――――――――――――┤
        │7zCon.sfx │コンソールバージョン。                    │
        ├―――――┼―――――――――――――――――――――┤
        │7zS.sfx   │インストーラの Windows バージョン。       │
        ├―――――┼―――――――――――――――――――――┤
        │7zSD.sfx  │インストーラの Windows バージョン。       │
        │          │(MSVCRT.dll を使用)                       │
        ├―――――┼―――――――――――――――――――――┤
        │指定なし  │DLL に内蔵された物を使用。                │
        │          │7zSD.sfx を元に改良し圧縮。               │
        └―――――┴―――――――――――――――――――――┘

        内蔵版以外の全ての SFX モジュールは圧縮されていません。
        これらのモジュールを圧縮する為に UPX プログラム
        (http://upx.sourceforge.net) を使うことが出来ます。
        UPX プログラムで SFX モジュールを圧縮することで
        オリジナルのサイズより 40-50% サイズを減らすことが出来ます。

    インストーラ用の SFX モジュール

      インストーラ用の SFX モジュールは 7-Zip の外部パッケージに
      含まれています。(7z_extra)
      これらのモジュールは www.7-zip.org よりダウンロード出来ます。

      インストーラ用の SFX モジュール (7zS.sfx と 7zSD.sfx) は
      インストールプログラムを作成することが可能です。
      これらのモジュールは temp フォルダに書庫を解凍後、
      指定したプログラムを実行し、プログラムが終了したら
      一時ファイルを削除します。

      インストーラ用の自己解凍書庫は以下の 3 つのファイルを
      繋げて作らなければなりません。
      SFX_Module, Installer_Config, 7z_Archive
      Installer_Config はオプションファイルです。

      インストーラ用の自己解凍書庫を作成する為に、
      以下のコマンドを使用することが出来ます。

        copy /b 7zS.sfx + config.txt + archive.7z archive.exe

      もしインストールファイルが 7z 書庫にする前に無圧縮ならば
      最小サイズのインストーラパッケージ書庫が出来ます。

      インストーラモジュールで -y スイッチを指定すると
      解凍時に問い合わせされなくなります。

    インストーラ設定ファイル形式

      設定ファイルはインストーラの為のコマンドを含みます。
      ファイルは文字列 ;!@Install@!UTF-8! で始まり 
      ;!@InstallEnd@! で終わります。
      ファイルは UTF-8 コードで書かれなければなりません。

      ファイルは以下の一部もしくは全ての対になる文字列を含んでいます。

      ID_String="Value"      
　  　┌―――――――――┬――――――――――――――――――――――┐
      │ID_String         │説明                                        │
      ├―――――――――┼――――――――――――――――――――――┤
      │Title             │メッセージのタイトル。                      │
      ├―――――――――┼――――――――――――――――――――――┤
      │BeginPrompt       │開始プロンプトのメッセージ。                │
      ├―――――――――┼――――――――――――――――――――――┤
      │Progress          │"yes" か "no" を指定。デフォルト値は "yes"  │
      ├―――――――――┼――――――――――――――――――――――┤
      │RunProgram        │実行するコマンド。デフォルトは "setup.exe"  │
      │                  │部分列 %%T は、ファイルが解凍された一時的な │
      │                  │フォルダのパスと置き換えられます。          │
      ├―――――――――┼――――――――――――――――――――――┤
      │Directory         │"RunProgram" のディレクトリプレフィックス。 │
      │                  │デフォルト値は ".\\"                        │
      ├―――――――――┼――――――――――――――――――――――┤
      │ExecuteFile       │実行するファイルの名前。                    │
      ├―――――――――┼――――――――――――――――――――――┤
      │ExecuteParameters │"ExecuteFile" のパラメータ。                │
      └―――――――――┴――――――――――――――――――――――┘

      どの組み合わせも省略することができます。

      プログラムを実行するには次の2つの方法があります。
      RunProgram, ExecuteFile.
      7z 書庫からプログラムを実行したい場合は RunProgram を使用します。
      7z 書庫からドキュメントを開くか Windows のコマンドを実行したい
      場合は ExecuteFile を使用します。

      RunProgramを使用し、且つ空のディレクトリプレフィックス
      Directory="" を指定した場合システムは以下の順序で実行ファイルを
      検索します。

      1. アプリケーション(インストーラ)が読み込まれたディレクトリ。

      2. ファイルが解凍された一時フォルダ。

      3. Windows のシステムディレクトリ。

    設定ファイルの例

      ;!@Install@!UTF-8!
      Title="7-Zip 4.00"
      BeginPrompt="Do you want to install the 7-Zip 4.00?"
      RunProgram="setup.exe"
      ;!@InstallEnd@!

      ;!@Install@!UTF-8!
      Title="7-Zip 4.00"
      BeginPrompt="Do you want to install the 7-Zip 4.00?"
      ExecuteFile="7zip.msi"
      ;!@InstallEnd@!

      ;!@Install@!UTF-8!
      Title="7-Zip 4.01 Update"
      BeginPrompt="Do you want to install the 7-Zip 4.01 Update?"
      ExecuteFile="msiexec.exe"
      ExecuteParameters="/i 7zip.msi REINSTALL=ALL REINSTALLMODE=vomus"
      ;!@InstallEnd@!

    内蔵された SFX モジュール

      書庫作成時にタイトル(Title)、開始メッセージ(BeginPrompt)、
      実行コマンドを(RunProgram)を尋ねます。
      実行コマンドを省略すると、解凍時に解凍先を指定出来るようになり、
      実行コマンドを指定するとテンポラリディレクトリに一時解凍後
      指定されたファイルを実行し終了後に一時ファイルは削除されます。

    例:
      a -sfx a.exe *.txt

        内蔵された SFX モジュールを使って*.txt ファイルを
        自己解凍書庫 a.exe に追加します。

      a -sfx7z.sfx a.exe *

        Windows バージョンである SFX の 7z.sfx モジュールを使って
        全てのファイルを 自己解凍書庫 a.exe に追加します。

    このスイッチと共に使用できるコマンド。

      a, d, u

  -slp : ラージページモードを設定　
  ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣
　　　ラージページモードを設定します。
　　　※ DLLでは使用は可能ですが非サポートになります。

    構文: -slp[-]

　　┌――――┬――――――――――――――――――――――――┐
    │スイッチ│説明                                            │
    ├――――┼――――――――――――――――――――――――┤
    │-slp 　 │ラージページモードを有効にします。              │
    ├――――┼――――――――――――――――――――――――┤
    │-slp-   │ラージページモードを無効にします。デフォルト。  │
    └――――┴――――――――――――――――――――――――┘

　　　ラージページモードでは圧縮速度が速くなります。
　　　しかし、ラージページを割り当てる為に圧縮開始時に一時停止します。
      ラージページを割り当てられなければ通常の小さいページが割り当てられます。
　　　また、タスクマネージャーがプログラムの正確なメモリ使用量を表示しません。
　　　この機能は Windows 2003 / XP x64 以降でのみ使用できます。
　　　それから管理者権限をもっている必要があります。
　　　この機能を使用する際に推奨される RAMサイズは 3GB 以上です。
　　　この機能を使用するには、少なくとも一度 7-Zip ファイルマネージャを起動し
　　　閉じた後システムを再起動する必要があります。
　　　# この為、本家 7-Zip が必要なので DLL では非サポートとします。

　　　-slp モードを使用すると DLL がメモリブロックを確保する際にシステムが
　　　数秒間停止する場合があります。
　　　Windows が DLL 用に大きなページを割り当てようとする際に Windows は
　　　その間、他のタスクを停止させます。
　　　完全にシステムが停止したように見えますが再開し、メモリの割り当てに成功
　　　したならば DLL はより速く動作します。
　　　もし他のタスクを数秒間停止させたくないのであれば -slp モードは
　　　使用しないで下さい。
　　　また、小さなデータセット（100MB 未満）を圧縮するために -slp モードを
　　　使用するのは無意味です。
　　　しかし、LZMA 方式の大きな辞書で大きなデータセット（300MB 以上）を圧縮するなら
　　　-slp モードで 5%-10% の速度向上を得ることが出来ます。

    例: a archive.7z -slp a.iso

      ラージページモードを使用し a.iso を圧縮します。

  -slt : 技術情報を表示
  ￣￣￣￣￣￣￣￣￣￣￣
      l (List) コマンドで技術モードに設定します。

    構文: -slt

    例: l -slt archive.7z

      archive.7z の詳細な技術情報を表示します。

    このスイッチと共に使用できるコマンド。

      l

  -ssc : 大文字と小文字を区別
  ￣￣￣￣￣￣￣￣￣￣￣￣￣￣
      ファイル名の大文字と小文字を区別させます。

　  　┌――――┬―――――――――――――――――――――――――――――┐
      │スイッチ｜説明                                                      │
      ├――――┼―――――――――――――――――――――――――――――┤
      │-ssc    ｜大文字と小文字を区別します。Posix/Linux のデフォルトです。│
      ├――――┼―――――――――――――――――――――――――――――┤
      │-ssc-   ｜大文字と小文字を区別しません。Windows のデフォルトです。  │
      └――――┴―――――――――――――――――――――――――――――┘

    構文: -ssc[-]

    例: a archive.7z A*.txt -ssc -r

      カレントディレクトリとそのサブディレクトリの全ての A*.txtファイルを
      圧縮します。このコマンドは a*.txt は圧縮しません。

    このスイッチと共に使用できるコマンド。

      a, d, e, l, t, u, x

  -ssw : 開いているファイルを圧縮
  ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣
      他のアプリケーションで書き込みの為に開いているファイルを圧縮します。
      このスイッチを使用しなければそのファイルは含めません。

    構文: -ssw

    例: a archive.7z -ssw *.txt

      カレントディレクトリの他のアプリケーションで書き込みの為に開いている
      ファイルを含めた全ての *.txt ファイルを圧縮します。

    このスイッチと共に使用できるコマンド。

      a, u

  -t : 書庫の形式を設定
  ￣￣￣￣￣￣￣￣￣￣￣
      書庫の形式を設定します。

    構文: -t{archive_type}

      {archive_type} 

        書庫の形式を指定します。
        形式は次の物を指定できます： *, 7z, split, zip, 若しくはこれらの
                                     7z.split の様な組み合わせ。

    -t{archive_type} スイッチを指定しなければ書庫のファイル名で
    使われている拡張子から書庫の形式を見つけ出します。
    新しく書庫を作成する場合で -t{archive_type} を指定せず書庫名に
    拡張子が無い場合は .7z 書庫を作成します。

    多重に圧縮された幾つかの形式の書庫を解凍する時（例えば zip 内の 7z）
    一度に両方の階層を開く事が出来ます。
    一番上の階層の書庫を開く／解凍したい場合は、 -t* を使います。

    # つまり tar.gz とかの為の機能ですが 7-zip32.dll は tar に未対応です。
 
    例:
      a -tzip archive.zip *.txt

        カレントディレクトリの全ての *.txt ファイルを
        zip 形式で archive.zip に追加します。

      t -t7z.split archive.7z.001

        archive.7z.001 の全てのファイルをテストします。
        その書庫は、マルチボリュームの .7z 書庫として。

    このスイッチと共に使用できるコマンド。

      a, d, e, l, t, u, x

  -u : 更新オプション
  ￣￣￣￣￣￣￣￣￣￣
      どのように書庫のファイルを更新するか、及び
      どのように書庫を新たに作成するか設定します。

    構文: -u[-]<action_set>[!{new_archive_name}]

            <action_set>   ::= <state_action>...
            <state_action> ::= <state><action>
            <state>        ::= p | q | r | x | y | z | w
            <action>       ::= 0 | 1 | 2 | 3

    パラメータ

      ダッシュ (-)

        元の書庫の更新を出来なくします。

        元の書庫とはコマンドライン中の base_archive_name の事です。
        詳細は「1. コマンドラインの様式」を参考にして下さい。

      {new_archive_name}

        作成される新しい書庫のパスを設定します。
        このスイッチの全てのオプションは新しい書庫を参照します。

        もし割り当てなければ、このスイッチの全てのオプションは
        コマンドの元の書庫を参照します。

      <state>

        処理されるファイルの特定の状態を指定します。

        <state> ::= p | q | r | x | y | z | w

        個々の唯一なファイル名毎に、６つの異なる状態があります。

　　    ┌――――┬―――――――――――――――┬―――――┬―――――┐
        │<state> │条件                          │ディスク上｜書庫内の  │
        │        │                              │のファイル｜ファイル  │
        ├――――┼―――――――――――――――┼―――――┼―――――┤
        │   p    │ファイルは書庫内に存在するが  │          │存在するが│
        │        │ワイルドカード名と一致しない。│          │一致しない│
        ├――――┼―――――――――――――――┼―――――┼―――――┤
        │   q    │ファイルは書庫内に存在するが  │存在しない│存在する  │
        │        │ディスク上には存在しない。    │          │          │
        ├――――┼―――――――――――――――┼―――――┼―――――┤
        │        │ファイルは書庫内に存在しないが│存在する  │存在しない│
        │   r    │ディスク上には存在する。      │          │          │
        ├――――┼―――――――――――――――┼―――――┼―――――┤
        │        │書庫内のファイルはディスク上の│古い      │新しい    │
        │   x    │ファイルより新しい。          │          │          │
        ├――――┼―――――――――――――――┼―――――┼―――――┤
        │        │書庫内のファイルはディスク上の│新しい    │古い      │
        │   y    │ファイルより古い。            │          │          │
        ├――――┼―――――――――――――――┼―――――┼―――――┤
        │        │書庫内のファイルはディスク上の│同一      │同一      │
        │   z    │ファイルと同一。              │          │          │
        ├――――┼―――――――――――――――┼―――――┼―――――┤
        │        │どのファイルが新しいか        │          │          │
        │   w    │検出できない。( 更新日時      │？        │？        │
        │        │は同じだがサイズが違う )      │          │          │
        └――――┴―――――――――――――――┴―――――┴―――――┘

      <action>

        <state> の所定の動作を指定します。

        <action> ::= 0 | 1 | 2 | 3

        個々の状態に関して、３つの異なる動作から一つを指定できます。

　  　  ┌――――┬――――――――――――――――――――――――┐
        │<action>│説明                                            │
        ├――――┼――――――――――――――――――――――――┤
        │   0    │ファイルを無視。(このファイルの為に             │
        │        │新しい書庫内にアイテムを作成しません)           │
        ├――――┼――――――――――――――――――――――――┤
        │   1    │ファイルをコピー。                              │
        │        │(古い書庫から新しい書庫へコピーします)          │
        ├――――┼――――――――――――――――――――――――┤
        │   2    │圧縮。                                          │
        │        │(新しい書庫にディスクからファイルを圧縮します)  │
        ├――――┼――――――――――――――――――――――――┤
        │   3    │アンチアイテムを作成。(解凍中にファイルや       │
        │        │ディレクトリを削除するアイテム）                │
        │        │この機能は 7z 形式のみでサポートされます。      │
        └――――┴――――――――――――――――――――――――┘

    注釈

      全ての更新コマンド (a, d, u 等) はこの条件が割り当てられます。

      以下の表は更新コマンドと動作の組み合わせです。

　  　┌―――――――――┬―┬―┬―┬―┬―┬―┬―┐
      │コマンド / <state>｜ p｜ q｜ r｜ x｜ y｜ z｜ w│
      ├―――――――――┼―┼―┼―┼―┼―┼―┼―┤
      │     d(削除)      ｜ 1｜ 0｜ 0｜ 0｜ 0｜ 0｜ 0│
      ├―――――――――┼―┼―┼―┼―┼―┼―┼―┤
      │     a(追加)      ｜ 1｜ 1｜ 2｜ 2｜ 2｜ 2｜ 2│
      ├―――――――――┼―┼―┼―┼―┼―┼―┼―┤
      │     u(更新)      ｜ 1｜ 1｜ 2｜ 1｜ 2｜ 1｜ 2│
      ├―――――――――┼―┼―┼―┼―┼―┼―┼―┤
      │      一新        ｜ 1｜ 1｜ 0｜ 1｜ 2｜ 1｜ 2│
      ├―――――――――┼―┼―┼―┼―┼―┼―┼―┤
      │      同期        ｜ 1｜ 0｜ 2｜ 1｜ 2｜ 1｜ 2│
      └―――――――――┴―┴―┴―┴―┴―┴―┴―┘

      もし !{new_archive_name} オプションを指定しないならば
      全てのオプションはメイン書庫 (コマンドラインでコマンドの後に
      割り当てられた書庫) を参照します。
      もし !{new_archive_name} オプションを指定したならば
      7-zip32.dll が指定された名前によって新しい書庫を作成し、
      全てのオプションはその新しい書庫を参照します。

      更新スイッチは複数指定できます。
      7-zip32.dll は一度の操作で複数の書庫を作成できます。

      デフォルトでは、それぞれの新しい書庫の動作の設定は、
      メインコマンドで設定された動作が割り当てられます。
      コマンドには設定できる動作が三種類有ります。: a, d, u
      どの <state_action> も組み合わせができます。

    タイムゾーンについて

      タイムゾーンを変更した場合（別のタイムゾーンへ移動した時かあるいは
      夏時間で時計が変更された時）ファイルの更新日時に依存している
      更新コマンドで幾つかの問題が起きます。
      ファイルシステムには世界協定時（ UTC ）だけを使い、書庫の形式も同様に
      UTC を使うことを強く推奨します。
      そうすれば、タイムゾーンを変更しても問題は起きないでしょう。
      また、他の場合も UTC だけを使うことを推奨します。例えば、他の
      タイムゾーンの誰かにファイルを送るような場合にも。

      ファイルシステムと書庫形式の両方でローカルタイムを使ってる場合、例えば
      FAT ファイルシステムと ZIP 形式等、幾つかの場合には問題は発生しません。

      ・UTC ファイルシステム : NTFS 
      ・UTC 書庫形式 : -mtc スイッチを使用した zip, 7z 
      ・ローカルタイム ファイルシステム : FAT, FAT32 
      ・ローカルタイム 書庫形式 : zip 

    例: u c:\1\exist.7z -u- -up0q3x2z0!c:\1\update.7z *

      新しい書庫 update.7z を作成し、exist.7z 書庫内のファイルと
      カレントディレクトリのファイルで異なる物を書き込みます。
      exist.7z 書庫は変更されません。

        u c:\1\exist.7z -up0q3x2z0!c:\1\update.7z * -ms=off

      新しい書庫 update.7z を作成し、exist.7z 書庫内のファイルと
      カレントディレクトリのファイルで異なる物を書き込みます。

      注：.7z ソリッド書庫の更新は幾つか再圧縮が必要になるので時間が掛ります。

    このスイッチと共に使用できるコマンド。

      a, d, u

  -v : ボリューム作成
  ￣￣￣￣￣￣￣￣￣￣
      ボリュームサイズを指定します。

    構文: -v{Size}[b | k | m | g]

      {Size}[b | k | m | g]

        ボリュームサイズを バイト 、キロバイト(1キロバイト=1024バイト)
        メガバイト(1メガバイト=1024Kバイト)、ギガバイト(1ギガバイト=
        1024キロバイト)で指定します。
        もし {Size} しか指定しない場合はバイトとして扱います。

      複数の -v スイッチを指定する事が出来ます。

      注:書庫化が終わる前にボリュームを使わないでください（あとコピーも)。
         書庫化作業が終わればどのボリュームも（最初も含む）使用できます。

    例: a a.7z *.txt -v10k -v15k -v2m

      a.7z 書庫のマルチボリュームを作成します。
      最初のボリュームは 10KB で次は 15KB、それ以降は 2MB になります。

    このスイッチと共に使用できるコマンド。

      a

  -w : 作業ディレクトリの設定
  ￣￣￣￣￣￣￣￣￣￣￣￣￣￣
      一時的な基本書庫の為の作業ディレクトリを設定します。
      7-zip32.dll はデフォルトで 、新しい基本書庫を古い基本書庫と
      同じディレクトリに作成します。
      このスイッチを指定することで、一時的な基本書庫ファイルが
      作成される作業ディレクトリの場所を設定できます。
      一時的な基本書庫が作成された後は元の書庫に上書きされ
      一時ファイルは削除されます。

    構文: -w[{dir_path}]

      {dir_path}

        目的のディレクトリのパスを指定します。
        パスは \ で終わる必要はありません。

        もし <dir_path> が割り当てられなければ、7-zip32.dll は
        Windows の temp ディレクトリを使用します。

    例: a -tzip archive.zip *.cpp -wc:\temp

      *.cpp ファイルを archive.zip に追加。
      一時的な書庫は c:\temp に作成されます。

    このスイッチと共に使用できるコマンド。

      a, d, u

  -x : ファイルを除外
  ￣￣￣￣￣￣￣￣￣￣
      操作から除外するファイル名及びワイルドカードを指定します。
      複数の除外スイッチをサポートします。

    構文: -x[<recurse_type>]<file_ref>

            <recurse_type> ::= r[- | 0]
            <file_ref>     ::= @{listfile} | !{wildcard}

      オプションパラメータの詳細は -i スイッチを参照してください。

    例: a -tzip archive.zip *.txt -x!temp.*

      archive.zip に temp.* を除いた全ての *.txt ファイルを追加します。

    このスイッチと共に使用できるコマンド。

      a, d, e, l, t, u, x

    参照

      スイッチ: -a, -i

  -y : 全ての質問に yes を仮定
  ￣￣￣￣￣￣￣￣￣￣￣￣￣￣
      7-zip32.dll 実行時にユーザへの質問の割り込みを抑制します。
      このスイッチを使用することで e, x コマンドでの上書き確認を
      抑制することが出来ます。

    構文: x src.zip -y

      src.zip から全てのファイルを解凍します。
      全ての上書き確認は抑制されディスク上のファイルで
      書庫内と同じファイル名のものは上書きされます。

    このスイッチと共に使用できるコマンド。

      e, x

    参照

      スイッチ: -ao

================================================================================